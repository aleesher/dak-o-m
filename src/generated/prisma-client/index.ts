// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  action: (where?: ActionWhereInput) => Promise<boolean>;
  activityLog: (where?: ActivityLogWhereInput) => Promise<boolean>;
  activityLogHistory: (
    where?: ActivityLogHistoryWhereInput
  ) => Promise<boolean>;
  customerFeedback: (where?: CustomerFeedbackWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  faq: (where?: FaqWhereInput) => Promise<boolean>;
  kimInformation: (where?: KimInformationWhereInput) => Promise<boolean>;
  moment: (where?: MomentWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  reporter: (where?: ReporterWhereInput) => Promise<boolean>;
  serviceAppointment: (
    where?: ServiceAppointmentWhereInput
  ) => Promise<boolean>;
  serviceContract: (where?: ServiceContractWhereInput) => Promise<boolean>;
  serviceContractEstimation: (
    where?: ServiceContractEstimationWhereInput
  ) => Promise<boolean>;
  serviceContractIndex: (
    where?: ServiceContractIndexWhereInput
  ) => Promise<boolean>;
  serviceContractTerm: (
    where?: ServiceContractTermWhereInput
  ) => Promise<boolean>;
  serviceOrder: (where?: ServiceOrderWhereInput) => Promise<boolean>;
  serviceOrderComment: (
    where?: ServiceOrderCommentWhereInput
  ) => Promise<boolean>;
  serviceOrderUpdateNotification: (
    where?: ServiceOrderUpdateNotificationWhereInput
  ) => Promise<boolean>;
  serviceStatus: (where?: ServiceStatusWhereInput) => Promise<boolean>;
  serviceText: (where?: ServiceTextWhereInput) => Promise<boolean>;
  workOrder: (where?: WorkOrderWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  action: (where: ActionWhereUniqueInput) => ActionNullablePromise;
  actions: (args?: {
    where?: ActionWhereInput;
    orderBy?: ActionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Action>;
  actionsConnection: (args?: {
    where?: ActionWhereInput;
    orderBy?: ActionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActionConnectionPromise;
  activityLog: (
    where: ActivityLogWhereUniqueInput
  ) => ActivityLogNullablePromise;
  activityLogs: (args?: {
    where?: ActivityLogWhereInput;
    orderBy?: ActivityLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivityLog>;
  activityLogsConnection: (args?: {
    where?: ActivityLogWhereInput;
    orderBy?: ActivityLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityLogConnectionPromise;
  activityLogHistory: (
    where: ActivityLogHistoryWhereUniqueInput
  ) => ActivityLogHistoryNullablePromise;
  activityLogHistories: (args?: {
    where?: ActivityLogHistoryWhereInput;
    orderBy?: ActivityLogHistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ActivityLogHistory>;
  activityLogHistoriesConnection: (args?: {
    where?: ActivityLogHistoryWhereInput;
    orderBy?: ActivityLogHistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityLogHistoryConnectionPromise;
  customerFeedback: (
    where: CustomerFeedbackWhereUniqueInput
  ) => CustomerFeedbackNullablePromise;
  customerFeedbacks: (args?: {
    where?: CustomerFeedbackWhereInput;
    orderBy?: CustomerFeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CustomerFeedback>;
  customerFeedbacksConnection: (args?: {
    where?: CustomerFeedbackWhereInput;
    orderBy?: CustomerFeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerFeedbackConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  faq: (where: FaqWhereUniqueInput) => FaqNullablePromise;
  faqs: (args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Faq>;
  faqsConnection: (args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FaqConnectionPromise;
  kimInformation: (
    where: KimInformationWhereUniqueInput
  ) => KimInformationNullablePromise;
  kimInformations: (args?: {
    where?: KimInformationWhereInput;
    orderBy?: KimInformationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<KimInformation>;
  kimInformationsConnection: (args?: {
    where?: KimInformationWhereInput;
    orderBy?: KimInformationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KimInformationConnectionPromise;
  moment: (where: MomentWhereUniqueInput) => MomentNullablePromise;
  moments: (args?: {
    where?: MomentWhereInput;
    orderBy?: MomentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Moment>;
  momentsConnection: (args?: {
    where?: MomentWhereInput;
    orderBy?: MomentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MomentConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  reporter: (where: ReporterWhereUniqueInput) => ReporterNullablePromise;
  reporters: (args?: {
    where?: ReporterWhereInput;
    orderBy?: ReporterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Reporter>;
  reportersConnection: (args?: {
    where?: ReporterWhereInput;
    orderBy?: ReporterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReporterConnectionPromise;
  serviceAppointment: (
    where: ServiceAppointmentWhereUniqueInput
  ) => ServiceAppointmentNullablePromise;
  serviceAppointments: (args?: {
    where?: ServiceAppointmentWhereInput;
    orderBy?: ServiceAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceAppointment>;
  serviceAppointmentsConnection: (args?: {
    where?: ServiceAppointmentWhereInput;
    orderBy?: ServiceAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceAppointmentConnectionPromise;
  serviceContract: (
    where: ServiceContractWhereUniqueInput
  ) => ServiceContractNullablePromise;
  serviceContracts: (args?: {
    where?: ServiceContractWhereInput;
    orderBy?: ServiceContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceContract>;
  serviceContractsConnection: (args?: {
    where?: ServiceContractWhereInput;
    orderBy?: ServiceContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceContractConnectionPromise;
  serviceContractEstimation: (
    where: ServiceContractEstimationWhereUniqueInput
  ) => ServiceContractEstimationNullablePromise;
  serviceContractEstimations: (args?: {
    where?: ServiceContractEstimationWhereInput;
    orderBy?: ServiceContractEstimationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceContractEstimation>;
  serviceContractEstimationsConnection: (args?: {
    where?: ServiceContractEstimationWhereInput;
    orderBy?: ServiceContractEstimationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceContractEstimationConnectionPromise;
  serviceContractIndex: (
    where: ServiceContractIndexWhereUniqueInput
  ) => ServiceContractIndexNullablePromise;
  serviceContractIndexes: (args?: {
    where?: ServiceContractIndexWhereInput;
    orderBy?: ServiceContractIndexOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceContractIndex>;
  serviceContractIndexesConnection: (args?: {
    where?: ServiceContractIndexWhereInput;
    orderBy?: ServiceContractIndexOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceContractIndexConnectionPromise;
  serviceContractTerm: (
    where: ServiceContractTermWhereUniqueInput
  ) => ServiceContractTermNullablePromise;
  serviceContractTerms: (args?: {
    where?: ServiceContractTermWhereInput;
    orderBy?: ServiceContractTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceContractTerm>;
  serviceContractTermsConnection: (args?: {
    where?: ServiceContractTermWhereInput;
    orderBy?: ServiceContractTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceContractTermConnectionPromise;
  serviceOrder: (
    where: ServiceOrderWhereUniqueInput
  ) => ServiceOrderNullablePromise;
  serviceOrders: (args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceOrder>;
  serviceOrdersConnection: (args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceOrderConnectionPromise;
  serviceOrderComment: (
    where: ServiceOrderCommentWhereUniqueInput
  ) => ServiceOrderCommentNullablePromise;
  serviceOrderComments: (args?: {
    where?: ServiceOrderCommentWhereInput;
    orderBy?: ServiceOrderCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceOrderComment>;
  serviceOrderCommentsConnection: (args?: {
    where?: ServiceOrderCommentWhereInput;
    orderBy?: ServiceOrderCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceOrderCommentConnectionPromise;
  serviceOrderUpdateNotification: (
    where: ServiceOrderUpdateNotificationWhereUniqueInput
  ) => ServiceOrderUpdateNotificationNullablePromise;
  serviceOrderUpdateNotifications: (args?: {
    where?: ServiceOrderUpdateNotificationWhereInput;
    orderBy?: ServiceOrderUpdateNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceOrderUpdateNotification>;
  serviceOrderUpdateNotificationsConnection: (args?: {
    where?: ServiceOrderUpdateNotificationWhereInput;
    orderBy?: ServiceOrderUpdateNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceOrderUpdateNotificationConnectionPromise;
  serviceStatus: (
    where: ServiceStatusWhereUniqueInput
  ) => ServiceStatusNullablePromise;
  serviceStatuses: (args?: {
    where?: ServiceStatusWhereInput;
    orderBy?: ServiceStatusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceStatus>;
  serviceStatusesConnection: (args?: {
    where?: ServiceStatusWhereInput;
    orderBy?: ServiceStatusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceStatusConnectionPromise;
  serviceText: (
    where: ServiceTextWhereUniqueInput
  ) => ServiceTextNullablePromise;
  serviceTexts: (args?: {
    where?: ServiceTextWhereInput;
    orderBy?: ServiceTextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceText>;
  serviceTextsConnection: (args?: {
    where?: ServiceTextWhereInput;
    orderBy?: ServiceTextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceTextConnectionPromise;
  workOrder: (where: WorkOrderWhereUniqueInput) => WorkOrderNullablePromise;
  workOrders: (args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkOrder>;
  workOrdersConnection: (args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkOrderConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAction: (data: ActionCreateInput) => ActionPromise;
  updateAction: (args: {
    data: ActionUpdateInput;
    where: ActionWhereUniqueInput;
  }) => ActionPromise;
  updateManyActions: (args: {
    data: ActionUpdateManyMutationInput;
    where?: ActionWhereInput;
  }) => BatchPayloadPromise;
  upsertAction: (args: {
    where: ActionWhereUniqueInput;
    create: ActionCreateInput;
    update: ActionUpdateInput;
  }) => ActionPromise;
  deleteAction: (where: ActionWhereUniqueInput) => ActionPromise;
  deleteManyActions: (where?: ActionWhereInput) => BatchPayloadPromise;
  createActivityLog: (data: ActivityLogCreateInput) => ActivityLogPromise;
  updateActivityLog: (args: {
    data: ActivityLogUpdateInput;
    where: ActivityLogWhereUniqueInput;
  }) => ActivityLogPromise;
  updateManyActivityLogs: (args: {
    data: ActivityLogUpdateManyMutationInput;
    where?: ActivityLogWhereInput;
  }) => BatchPayloadPromise;
  upsertActivityLog: (args: {
    where: ActivityLogWhereUniqueInput;
    create: ActivityLogCreateInput;
    update: ActivityLogUpdateInput;
  }) => ActivityLogPromise;
  deleteActivityLog: (where: ActivityLogWhereUniqueInput) => ActivityLogPromise;
  deleteManyActivityLogs: (
    where?: ActivityLogWhereInput
  ) => BatchPayloadPromise;
  createActivityLogHistory: (
    data: ActivityLogHistoryCreateInput
  ) => ActivityLogHistoryPromise;
  updateActivityLogHistory: (args: {
    data: ActivityLogHistoryUpdateInput;
    where: ActivityLogHistoryWhereUniqueInput;
  }) => ActivityLogHistoryPromise;
  updateManyActivityLogHistories: (args: {
    data: ActivityLogHistoryUpdateManyMutationInput;
    where?: ActivityLogHistoryWhereInput;
  }) => BatchPayloadPromise;
  upsertActivityLogHistory: (args: {
    where: ActivityLogHistoryWhereUniqueInput;
    create: ActivityLogHistoryCreateInput;
    update: ActivityLogHistoryUpdateInput;
  }) => ActivityLogHistoryPromise;
  deleteActivityLogHistory: (
    where: ActivityLogHistoryWhereUniqueInput
  ) => ActivityLogHistoryPromise;
  deleteManyActivityLogHistories: (
    where?: ActivityLogHistoryWhereInput
  ) => BatchPayloadPromise;
  createCustomerFeedback: (
    data: CustomerFeedbackCreateInput
  ) => CustomerFeedbackPromise;
  updateCustomerFeedback: (args: {
    data: CustomerFeedbackUpdateInput;
    where: CustomerFeedbackWhereUniqueInput;
  }) => CustomerFeedbackPromise;
  updateManyCustomerFeedbacks: (args: {
    data: CustomerFeedbackUpdateManyMutationInput;
    where?: CustomerFeedbackWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomerFeedback: (args: {
    where: CustomerFeedbackWhereUniqueInput;
    create: CustomerFeedbackCreateInput;
    update: CustomerFeedbackUpdateInput;
  }) => CustomerFeedbackPromise;
  deleteCustomerFeedback: (
    where: CustomerFeedbackWhereUniqueInput
  ) => CustomerFeedbackPromise;
  deleteManyCustomerFeedbacks: (
    where?: CustomerFeedbackWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createFaq: (data: FaqCreateInput) => FaqPromise;
  updateFaq: (args: {
    data: FaqUpdateInput;
    where: FaqWhereUniqueInput;
  }) => FaqPromise;
  updateManyFaqs: (args: {
    data: FaqUpdateManyMutationInput;
    where?: FaqWhereInput;
  }) => BatchPayloadPromise;
  upsertFaq: (args: {
    where: FaqWhereUniqueInput;
    create: FaqCreateInput;
    update: FaqUpdateInput;
  }) => FaqPromise;
  deleteFaq: (where: FaqWhereUniqueInput) => FaqPromise;
  deleteManyFaqs: (where?: FaqWhereInput) => BatchPayloadPromise;
  createKimInformation: (
    data: KimInformationCreateInput
  ) => KimInformationPromise;
  updateKimInformation: (args: {
    data: KimInformationUpdateInput;
    where: KimInformationWhereUniqueInput;
  }) => KimInformationPromise;
  updateManyKimInformations: (args: {
    data: KimInformationUpdateManyMutationInput;
    where?: KimInformationWhereInput;
  }) => BatchPayloadPromise;
  upsertKimInformation: (args: {
    where: KimInformationWhereUniqueInput;
    create: KimInformationCreateInput;
    update: KimInformationUpdateInput;
  }) => KimInformationPromise;
  deleteKimInformation: (
    where: KimInformationWhereUniqueInput
  ) => KimInformationPromise;
  deleteManyKimInformations: (
    where?: KimInformationWhereInput
  ) => BatchPayloadPromise;
  createMoment: (data: MomentCreateInput) => MomentPromise;
  updateMoment: (args: {
    data: MomentUpdateInput;
    where: MomentWhereUniqueInput;
  }) => MomentPromise;
  updateManyMoments: (args: {
    data: MomentUpdateManyMutationInput;
    where?: MomentWhereInput;
  }) => BatchPayloadPromise;
  upsertMoment: (args: {
    where: MomentWhereUniqueInput;
    create: MomentCreateInput;
    update: MomentUpdateInput;
  }) => MomentPromise;
  deleteMoment: (where: MomentWhereUniqueInput) => MomentPromise;
  deleteManyMoments: (where?: MomentWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createReporter: (data: ReporterCreateInput) => ReporterPromise;
  updateReporter: (args: {
    data: ReporterUpdateInput;
    where: ReporterWhereUniqueInput;
  }) => ReporterPromise;
  updateManyReporters: (args: {
    data: ReporterUpdateManyMutationInput;
    where?: ReporterWhereInput;
  }) => BatchPayloadPromise;
  upsertReporter: (args: {
    where: ReporterWhereUniqueInput;
    create: ReporterCreateInput;
    update: ReporterUpdateInput;
  }) => ReporterPromise;
  deleteReporter: (where: ReporterWhereUniqueInput) => ReporterPromise;
  deleteManyReporters: (where?: ReporterWhereInput) => BatchPayloadPromise;
  createServiceAppointment: (
    data: ServiceAppointmentCreateInput
  ) => ServiceAppointmentPromise;
  updateServiceAppointment: (args: {
    data: ServiceAppointmentUpdateInput;
    where: ServiceAppointmentWhereUniqueInput;
  }) => ServiceAppointmentPromise;
  updateManyServiceAppointments: (args: {
    data: ServiceAppointmentUpdateManyMutationInput;
    where?: ServiceAppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceAppointment: (args: {
    where: ServiceAppointmentWhereUniqueInput;
    create: ServiceAppointmentCreateInput;
    update: ServiceAppointmentUpdateInput;
  }) => ServiceAppointmentPromise;
  deleteServiceAppointment: (
    where: ServiceAppointmentWhereUniqueInput
  ) => ServiceAppointmentPromise;
  deleteManyServiceAppointments: (
    where?: ServiceAppointmentWhereInput
  ) => BatchPayloadPromise;
  createServiceContract: (
    data: ServiceContractCreateInput
  ) => ServiceContractPromise;
  updateServiceContract: (args: {
    data: ServiceContractUpdateInput;
    where: ServiceContractWhereUniqueInput;
  }) => ServiceContractPromise;
  updateManyServiceContracts: (args: {
    data: ServiceContractUpdateManyMutationInput;
    where?: ServiceContractWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceContract: (args: {
    where: ServiceContractWhereUniqueInput;
    create: ServiceContractCreateInput;
    update: ServiceContractUpdateInput;
  }) => ServiceContractPromise;
  deleteServiceContract: (
    where: ServiceContractWhereUniqueInput
  ) => ServiceContractPromise;
  deleteManyServiceContracts: (
    where?: ServiceContractWhereInput
  ) => BatchPayloadPromise;
  createServiceContractEstimation: (
    data: ServiceContractEstimationCreateInput
  ) => ServiceContractEstimationPromise;
  updateServiceContractEstimation: (args: {
    data: ServiceContractEstimationUpdateInput;
    where: ServiceContractEstimationWhereUniqueInput;
  }) => ServiceContractEstimationPromise;
  updateManyServiceContractEstimations: (args: {
    data: ServiceContractEstimationUpdateManyMutationInput;
    where?: ServiceContractEstimationWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceContractEstimation: (args: {
    where: ServiceContractEstimationWhereUniqueInput;
    create: ServiceContractEstimationCreateInput;
    update: ServiceContractEstimationUpdateInput;
  }) => ServiceContractEstimationPromise;
  deleteServiceContractEstimation: (
    where: ServiceContractEstimationWhereUniqueInput
  ) => ServiceContractEstimationPromise;
  deleteManyServiceContractEstimations: (
    where?: ServiceContractEstimationWhereInput
  ) => BatchPayloadPromise;
  createServiceContractIndex: (
    data: ServiceContractIndexCreateInput
  ) => ServiceContractIndexPromise;
  updateServiceContractIndex: (args: {
    data: ServiceContractIndexUpdateInput;
    where: ServiceContractIndexWhereUniqueInput;
  }) => ServiceContractIndexPromise;
  updateManyServiceContractIndexes: (args: {
    data: ServiceContractIndexUpdateManyMutationInput;
    where?: ServiceContractIndexWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceContractIndex: (args: {
    where: ServiceContractIndexWhereUniqueInput;
    create: ServiceContractIndexCreateInput;
    update: ServiceContractIndexUpdateInput;
  }) => ServiceContractIndexPromise;
  deleteServiceContractIndex: (
    where: ServiceContractIndexWhereUniqueInput
  ) => ServiceContractIndexPromise;
  deleteManyServiceContractIndexes: (
    where?: ServiceContractIndexWhereInput
  ) => BatchPayloadPromise;
  createServiceContractTerm: (
    data: ServiceContractTermCreateInput
  ) => ServiceContractTermPromise;
  updateServiceContractTerm: (args: {
    data: ServiceContractTermUpdateInput;
    where: ServiceContractTermWhereUniqueInput;
  }) => ServiceContractTermPromise;
  updateManyServiceContractTerms: (args: {
    data: ServiceContractTermUpdateManyMutationInput;
    where?: ServiceContractTermWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceContractTerm: (args: {
    where: ServiceContractTermWhereUniqueInput;
    create: ServiceContractTermCreateInput;
    update: ServiceContractTermUpdateInput;
  }) => ServiceContractTermPromise;
  deleteServiceContractTerm: (
    where: ServiceContractTermWhereUniqueInput
  ) => ServiceContractTermPromise;
  deleteManyServiceContractTerms: (
    where?: ServiceContractTermWhereInput
  ) => BatchPayloadPromise;
  createServiceOrder: (data: ServiceOrderCreateInput) => ServiceOrderPromise;
  updateServiceOrder: (args: {
    data: ServiceOrderUpdateInput;
    where: ServiceOrderWhereUniqueInput;
  }) => ServiceOrderPromise;
  updateManyServiceOrders: (args: {
    data: ServiceOrderUpdateManyMutationInput;
    where?: ServiceOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceOrder: (args: {
    where: ServiceOrderWhereUniqueInput;
    create: ServiceOrderCreateInput;
    update: ServiceOrderUpdateInput;
  }) => ServiceOrderPromise;
  deleteServiceOrder: (
    where: ServiceOrderWhereUniqueInput
  ) => ServiceOrderPromise;
  deleteManyServiceOrders: (
    where?: ServiceOrderWhereInput
  ) => BatchPayloadPromise;
  createServiceOrderComment: (
    data: ServiceOrderCommentCreateInput
  ) => ServiceOrderCommentPromise;
  updateServiceOrderComment: (args: {
    data: ServiceOrderCommentUpdateInput;
    where: ServiceOrderCommentWhereUniqueInput;
  }) => ServiceOrderCommentPromise;
  updateManyServiceOrderComments: (args: {
    data: ServiceOrderCommentUpdateManyMutationInput;
    where?: ServiceOrderCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceOrderComment: (args: {
    where: ServiceOrderCommentWhereUniqueInput;
    create: ServiceOrderCommentCreateInput;
    update: ServiceOrderCommentUpdateInput;
  }) => ServiceOrderCommentPromise;
  deleteServiceOrderComment: (
    where: ServiceOrderCommentWhereUniqueInput
  ) => ServiceOrderCommentPromise;
  deleteManyServiceOrderComments: (
    where?: ServiceOrderCommentWhereInput
  ) => BatchPayloadPromise;
  createServiceOrderUpdateNotification: (
    data: ServiceOrderUpdateNotificationCreateInput
  ) => ServiceOrderUpdateNotificationPromise;
  updateServiceOrderUpdateNotification: (args: {
    data: ServiceOrderUpdateNotificationUpdateInput;
    where: ServiceOrderUpdateNotificationWhereUniqueInput;
  }) => ServiceOrderUpdateNotificationPromise;
  updateManyServiceOrderUpdateNotifications: (args: {
    data: ServiceOrderUpdateNotificationUpdateManyMutationInput;
    where?: ServiceOrderUpdateNotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceOrderUpdateNotification: (args: {
    where: ServiceOrderUpdateNotificationWhereUniqueInput;
    create: ServiceOrderUpdateNotificationCreateInput;
    update: ServiceOrderUpdateNotificationUpdateInput;
  }) => ServiceOrderUpdateNotificationPromise;
  deleteServiceOrderUpdateNotification: (
    where: ServiceOrderUpdateNotificationWhereUniqueInput
  ) => ServiceOrderUpdateNotificationPromise;
  deleteManyServiceOrderUpdateNotifications: (
    where?: ServiceOrderUpdateNotificationWhereInput
  ) => BatchPayloadPromise;
  createServiceStatus: (data: ServiceStatusCreateInput) => ServiceStatusPromise;
  updateServiceStatus: (args: {
    data: ServiceStatusUpdateInput;
    where: ServiceStatusWhereUniqueInput;
  }) => ServiceStatusPromise;
  updateManyServiceStatuses: (args: {
    data: ServiceStatusUpdateManyMutationInput;
    where?: ServiceStatusWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceStatus: (args: {
    where: ServiceStatusWhereUniqueInput;
    create: ServiceStatusCreateInput;
    update: ServiceStatusUpdateInput;
  }) => ServiceStatusPromise;
  deleteServiceStatus: (
    where: ServiceStatusWhereUniqueInput
  ) => ServiceStatusPromise;
  deleteManyServiceStatuses: (
    where?: ServiceStatusWhereInput
  ) => BatchPayloadPromise;
  createServiceText: (data: ServiceTextCreateInput) => ServiceTextPromise;
  updateServiceText: (args: {
    data: ServiceTextUpdateInput;
    where: ServiceTextWhereUniqueInput;
  }) => ServiceTextPromise;
  updateManyServiceTexts: (args: {
    data: ServiceTextUpdateManyMutationInput;
    where?: ServiceTextWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceText: (args: {
    where: ServiceTextWhereUniqueInput;
    create: ServiceTextCreateInput;
    update: ServiceTextUpdateInput;
  }) => ServiceTextPromise;
  deleteServiceText: (where: ServiceTextWhereUniqueInput) => ServiceTextPromise;
  deleteManyServiceTexts: (
    where?: ServiceTextWhereInput
  ) => BatchPayloadPromise;
  createWorkOrder: (data: WorkOrderCreateInput) => WorkOrderPromise;
  updateWorkOrder: (args: {
    data: WorkOrderUpdateInput;
    where: WorkOrderWhereUniqueInput;
  }) => WorkOrderPromise;
  updateManyWorkOrders: (args: {
    data: WorkOrderUpdateManyMutationInput;
    where?: WorkOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkOrder: (args: {
    where: WorkOrderWhereUniqueInput;
    create: WorkOrderCreateInput;
    update: WorkOrderUpdateInput;
  }) => WorkOrderPromise;
  deleteWorkOrder: (where: WorkOrderWhereUniqueInput) => WorkOrderPromise;
  deleteManyWorkOrders: (where?: WorkOrderWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  action: (
    where?: ActionSubscriptionWhereInput
  ) => ActionSubscriptionPayloadSubscription;
  activityLog: (
    where?: ActivityLogSubscriptionWhereInput
  ) => ActivityLogSubscriptionPayloadSubscription;
  activityLogHistory: (
    where?: ActivityLogHistorySubscriptionWhereInput
  ) => ActivityLogHistorySubscriptionPayloadSubscription;
  customerFeedback: (
    where?: CustomerFeedbackSubscriptionWhereInput
  ) => CustomerFeedbackSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  faq: (
    where?: FaqSubscriptionWhereInput
  ) => FaqSubscriptionPayloadSubscription;
  kimInformation: (
    where?: KimInformationSubscriptionWhereInput
  ) => KimInformationSubscriptionPayloadSubscription;
  moment: (
    where?: MomentSubscriptionWhereInput
  ) => MomentSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  reporter: (
    where?: ReporterSubscriptionWhereInput
  ) => ReporterSubscriptionPayloadSubscription;
  serviceAppointment: (
    where?: ServiceAppointmentSubscriptionWhereInput
  ) => ServiceAppointmentSubscriptionPayloadSubscription;
  serviceContract: (
    where?: ServiceContractSubscriptionWhereInput
  ) => ServiceContractSubscriptionPayloadSubscription;
  serviceContractEstimation: (
    where?: ServiceContractEstimationSubscriptionWhereInput
  ) => ServiceContractEstimationSubscriptionPayloadSubscription;
  serviceContractIndex: (
    where?: ServiceContractIndexSubscriptionWhereInput
  ) => ServiceContractIndexSubscriptionPayloadSubscription;
  serviceContractTerm: (
    where?: ServiceContractTermSubscriptionWhereInput
  ) => ServiceContractTermSubscriptionPayloadSubscription;
  serviceOrder: (
    where?: ServiceOrderSubscriptionWhereInput
  ) => ServiceOrderSubscriptionPayloadSubscription;
  serviceOrderComment: (
    where?: ServiceOrderCommentSubscriptionWhereInput
  ) => ServiceOrderCommentSubscriptionPayloadSubscription;
  serviceOrderUpdateNotification: (
    where?: ServiceOrderUpdateNotificationSubscriptionWhereInput
  ) => ServiceOrderUpdateNotificationSubscriptionPayloadSubscription;
  serviceStatus: (
    where?: ServiceStatusSubscriptionWhereInput
  ) => ServiceStatusSubscriptionPayloadSubscription;
  serviceText: (
    where?: ServiceTextSubscriptionWhereInput
  ) => ServiceTextSubscriptionPayloadSubscription;
  workOrder: (
    where?: WorkOrderSubscriptionWhereInput
  ) => WorkOrderSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC";

export type PriorityType = "LOW" | "MEDIUM" | "HIGH";

export type ReporterType = "BEWONER" | "OPDRACHTGEVER" | "BEHEERDE";

export type ServiceOrderCommentType = "Internal_Text" | "Problem_Text";

export type ContractStatus =
  | "Applied"
  | "Offered"
  | "Order"
  | "Invoicing_Allowed"
  | "Expired";

export type ContractInvoiceType = "Dynamic" | "Installments";

export type ContractInstallmentType = "Contract" | "Object" | "Consumption";

export type ContractInvoicePeriod = "Forehand" | "Afterwards";

export type MomentEntityType = "SO" | "SC" | "WO";

export type WorkOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "status_ASC"
  | "status_DESC"
  | "sourceCompanyName_ASC"
  | "sourceCompanyName_DESC"
  | "sourceType_ASC"
  | "sourceType_DESC"
  | "sourceCode_ASC"
  | "sourceCode_DESC"
  | "description_ASC"
  | "description_DESC"
  | "resourceType_ASC"
  | "resourceType_DESC"
  | "resourceCode_ASC"
  | "resourceCode_DESC"
  | "resourceCompanyName_ASC"
  | "resourceCompanyName_DESC"
  | "isMainResource_ASC"
  | "isMainResource_DESC"
  | "serviceStatus_ASC"
  | "serviceStatus_DESC"
  | "statusReasonDescription_ASC"
  | "statusReasonDescription_DESC"
  | "isFinishedService_ASC"
  | "isFinishedService_DESC"
  | "firstPossibleStartDate_ASC"
  | "firstPossibleStartDate_DESC"
  | "lastPossibleStartDate_ASC"
  | "lastPossibleStartDate_DESC"
  | "starDate_ASC"
  | "starDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "expectedHours_ASC"
  | "expectedHours_DESC"
  | "durationTime_ASC"
  | "durationTime_DESC"
  | "isDuringClockTime_ASC"
  | "isDuringClockTime_DESC"
  | "isFirmPlanned_ASC"
  | "isFirmPlanned_DESC"
  | "isExportToFSA_ASC"
  | "isExportToFSA_DESC"
  | "exportToFSADate_ASC"
  | "exportToFSADate_DESC"
  | "actualReferencePoint_ASC"
  | "actualReferencePoint_DESC"
  | "assignedTo_ASC"
  | "assignedTo_DESC"
  | "globalDimensionCode_ASC"
  | "globalDimensionCode_DESC"
  | "serviceContractCode_ASC"
  | "serviceContractCode_DESC"
  | "orderManager_ASC"
  | "orderManager_DESC"
  | "address_ASC"
  | "address_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "city_ASC"
  | "city_DESC"
  | "customerCode_ASC"
  | "customerCode_DESC"
  | "jobDescription_ASC"
  | "jobDescription_DESC"
  | "soCode_ASC"
  | "soCode_DESC"
  | "soCallerCode_ASC"
  | "soCallerCode_DESC"
  | "soOrderType_ASC"
  | "soOrderType_DESC"
  | "soDescription_ASC"
  | "soDescription_DESC"
  | "soContactCode_ASC"
  | "soContactCode_DESC"
  | "soContactPersonCode_ASC"
  | "soContactPersonCode_DESC"
  | "soCustomerFeature_ASC"
  | "soCustomerFeature_DESC"
  | "soBillingCode_ASC"
  | "soBillingCode_DESC"
  | "soReference_ASC"
  | "soReference_DESC"
  | "soCommissionDate_ASC"
  | "soCommissionDate_DESC"
  | "soServiceLocationCode_ASC"
  | "soServiceLocationCode_DESC"
  | "soOrderCodeCustomer_ASC"
  | "soOrderCodeCustomer_DESC"
  | "soName_ASC"
  | "soName_DESC"
  | "soName2_ASC"
  | "soName2_DESC"
  | "soSourceType_ASC"
  | "soSourceType_DESC"
  | "soServiceContractCode_ASC"
  | "soServiceContractCode_DESC"
  | "soGlobalDimensionCode_ASC"
  | "soGlobalDimensionCode_DESC"
  | "soTerritoryCode_ASC"
  | "soTerritoryCode_DESC"
  | "soOrderDate_ASC"
  | "soOrderDate_DESC"
  | "soOrderTime_ASC"
  | "soOrderTime_DESC"
  | "soBudgetHours_ASC"
  | "soBudgetHours_DESC"
  | "soExpectedHours_ASC"
  | "soExpectedHours_DESC"
  | "soDurationTime_ASC"
  | "soDurationTime_DESC"
  | "soIsFirmPlanned_ASC"
  | "soIsFirmPlanned_DESC"
  | "soStarDate_ASC"
  | "soStarDate_DESC"
  | "soStarTime_ASC"
  | "soStarTime_DESC"
  | "soEndDate_ASC"
  | "soEndDate_DESC"
  | "soEndTime_ASC"
  | "soEndTime_DESC"
  | "soPriority_ASC"
  | "soPriority_DESC"
  | "soNextDeadline_ASC"
  | "soNextDeadline_DESC"
  | "soStatus_ASC"
  | "soStatus_DESC"
  | "soActualReferencePoint_ASC"
  | "soActualReferencePoint_DESC"
  | "soOrderManager_ASC"
  | "soOrderManager_DESC"
  | "soAssignedTo_ASC"
  | "soAssignedTo_DESC"
  | "soEmployeeCode_ASC"
  | "soEmployeeCode_DESC"
  | "roofingPartnerName_ASC"
  | "roofingPartnerName_DESC"
  | "detectorType_ASC"
  | "detectorType_DESC"
  | "notInDakota_ASC"
  | "notInDakota_DESC"
  | "soServiceType_ASC"
  | "soServiceType_DESC"
  | "soInvoicedPrice_ASC"
  | "soInvoicedPrice_DESC"
  | "soServicePackage_ASC"
  | "soServicePackage_DESC"
  | "soOrderAmount_ASC"
  | "soOrderAmount_DESC"
  | "soServiceControlPeriodDate_ASC"
  | "soServiceControlPeriodDate_DESC"
  | "soIsRemoteControl_ASC"
  | "soIsRemoteControl_DESC"
  | "soCountryCode_ASC"
  | "soCountryCode_DESC"
  | "soProblemDescription_ASC"
  | "soProblemDescription_DESC"
  | "soProblemCause_ASC"
  | "soProblemCause_DESC"
  | "soProblemSolution_ASC"
  | "soProblemSolution_DESC"
  | "firstDeadline_ASC"
  | "firstDeadline_DESC"
  | "gdbServiceOrderStartDate_ASC"
  | "gdbServiceOrderStartDate_DESC"
  | "dateExecuted_ASC"
  | "dateExecuted_DESC"
  | "gdbServiceOrderInvoicedDate_ASC"
  | "gdbServiceOrderInvoicedDate_DESC"
  | "isExportToFSA2_ASC"
  | "isExportToFSA2_DESC"
  | "soExportToFSADate_ASC"
  | "soExportToFSADate_DESC"
  | "hasSignature_ASC"
  | "hasSignature_DESC"
  | "planAhead_ASC"
  | "planAhead_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "orderIsSent_ASC"
  | "orderIsSent_DESC"
  | "isLocked_ASC"
  | "isLocked_DESC"
  | "lockedBy_ASC"
  | "lockedBy_DESC"
  | "isExportBlocked_ASC"
  | "isExportBlocked_DESC"
  | "updatedByUserId_ASC"
  | "updatedByUserId_DESC"
  | "isBlocked_ASC"
  | "isBlocked_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ActivityLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "description_ASC"
  | "description_DESC"
  | "apply_ASC"
  | "apply_DESC"
  | "colour_ASC"
  | "colour_DESC"
  | "eventType_ASC"
  | "eventType_DESC"
  | "statusPurchQuote_ASC"
  | "statusPurchQuote_DESC"
  | "statusPurchOrder_ASC"
  | "statusPurchOrder_DESC"
  | "statusServiceCall_ASC"
  | "statusServiceCall_DESC"
  | "statusServiceOrder_ASC"
  | "statusServiceOrder_DESC"
  | "fieldService_ASC"
  | "fieldService_DESC"
  | "blockModifyServiceOrder_ASC"
  | "blockModifyServiceOrder_DESC"
  | "skipExportToFSA_ASC"
  | "skipExportToFSA_DESC"
  | "sendStatusUpdateMail_ASC"
  | "sendStatusUpdateMail_DESC"
  | "sendMailWorkSheet_ASC"
  | "sendMailWorkSheet_DESC"
  | "publishOnServicePOrtal_ASC"
  | "publishOnServicePOrtal_DESC"
  | "sendMainToSubcontractor_ASC"
  | "sendMainToSubcontractor_DESC"
  | "updateWOStartTime_ASC"
  | "updateWOStartTime_DESC"
  | "updateWOEndTime_ASC"
  | "updateWOEndTime_DESC"
  | "naForActualReferencePoint_ASC"
  | "naForActualReferencePoint_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceTextOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "tableName_ASC"
  | "tableName_DESC"
  | "type_ASC"
  | "type_DESC"
  | "lineNumber_ASC"
  | "lineNumber_DESC"
  | "date_ASC"
  | "date_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CustomerFeedbackOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "skipped_ASC"
  | "skipped_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "customerRole_ASC"
  | "customerRole_DESC"
  | "serviceOrderId_ASC"
  | "serviceOrderId_DESC"
  | "notificationId_ASC"
  | "notificationId_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ActivityLogHistoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "code_ASC"
  | "code_DESC"
  | "registerDate_ASC"
  | "registerDate_DESC"
  | "employeeCode_ASC"
  | "employeeCode_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceOrderCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "orderCommentType_ASC"
  | "orderCommentType_DESC"
  | "text_ASC"
  | "text_DESC"
  | "authorCode_ASC"
  | "authorCode_DESC"
  | "date_ASC"
  | "date_DESC";

export type ServiceAppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "orderType_ASC"
  | "orderType_DESC"
  | "orderDate_ASC"
  | "orderDate_DESC"
  | "status_ASC"
  | "status_DESC"
  | "isLocked_ASC"
  | "isLocked_DESC"
  | "lockedBy_ASC"
  | "lockedBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "globalId_ASC"
  | "globalId_DESC"
  | "conceptId_ASC"
  | "conceptId_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "callerCode_ASC"
  | "callerCode_DESC"
  | "orderType_ASC"
  | "orderType_DESC"
  | "description_ASC"
  | "description_DESC"
  | "ownerCode_ASC"
  | "ownerCode_DESC"
  | "customerCode_ASC"
  | "customerCode_DESC"
  | "customerName_ASC"
  | "customerName_DESC"
  | "billingCode_ASC"
  | "billingCode_DESC"
  | "customerFeature_ASC"
  | "customerFeature_DESC"
  | "reference_ASC"
  | "reference_DESC"
  | "commissionDate_ASC"
  | "commissionDate_DESC"
  | "serviceLocationCode_ASC"
  | "serviceLocationCode_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "city_ASC"
  | "city_DESC"
  | "sourceType_ASC"
  | "sourceType_DESC"
  | "globalDimensionCode_ASC"
  | "globalDimensionCode_DESC"
  | "territoryCode_ASC"
  | "territoryCode_DESC"
  | "orderDate_ASC"
  | "orderDate_DESC"
  | "orderTime_ASC"
  | "orderTime_DESC"
  | "budgetHours_ASC"
  | "budgetHours_DESC"
  | "expectedHours_ASC"
  | "expectedHours_DESC"
  | "durationTime_ASC"
  | "durationTime_DESC"
  | "isFirmPlanned_ASC"
  | "isFirmPlanned_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "priority_ASC"
  | "priority_DESC"
  | "nextDeadline_ASC"
  | "nextDeadline_DESC"
  | "status_ASC"
  | "status_DESC"
  | "actualReferencePoint_ASC"
  | "actualReferencePoint_DESC"
  | "actualReferencePointDescription_ASC"
  | "actualReferencePointDescription_DESC"
  | "employeeCode_ASC"
  | "employeeCode_DESC"
  | "employeeName_ASC"
  | "employeeName_DESC"
  | "roofingPartnerName_ASC"
  | "roofingPartnerName_DESC"
  | "detectorType_ASC"
  | "detectorType_DESC"
  | "notInDakota_ASC"
  | "notInDakota_DESC"
  | "gdbServiceOrderTrackAndTrace_ASC"
  | "gdbServiceOrderTrackAndTrace_DESC"
  | "gdbServiceOrderKTO_ASC"
  | "gdbServiceOrderKTO_DESC"
  | "ktoFiture_ASC"
  | "ktoFiture_DESC"
  | "serviceType_ASC"
  | "serviceType_DESC"
  | "invoicedPrice_ASC"
  | "invoicedPrice_DESC"
  | "orderAmount_ASC"
  | "orderAmount_DESC"
  | "serviceControlPeriodDate_ASC"
  | "serviceControlPeriodDate_DESC"
  | "isRemoteControl_ASC"
  | "isRemoteControl_DESC"
  | "firstDeadline_ASC"
  | "firstDeadline_DESC"
  | "gdbServiceOrderStartDate_ASC"
  | "gdbServiceOrderStartDate_DESC"
  | "dateExecuted_ASC"
  | "dateExecuted_DESC"
  | "gdbServiceOrderInvoicedDate_ASC"
  | "gdbServiceOrderInvoicedDate_DESC"
  | "isExportToFSA2_ASC"
  | "isExportToFSA2_DESC"
  | "exportToFSADate_ASC"
  | "exportToFSADate_DESC"
  | "isSignatureHasValue_ASC"
  | "isSignatureHasValue_DESC"
  | "signedBy_ASC"
  | "signedBy_DESC"
  | "isSendReport_ASC"
  | "isSendReport_DESC"
  | "isFinishedFieldService_ASC"
  | "isFinishedFieldService_DESC"
  | "cratedBy_ASC"
  | "cratedBy_DESC"
  | "creationDate_ASC"
  | "creationDate_DESC"
  | "updateDate_ASC"
  | "updateDate_DESC"
  | "updatedBy_ASC"
  | "updatedBy_DESC"
  | "customerRemark_ASC"
  | "customerRemark_DESC"
  | "internalRemark_ASC"
  | "internalRemark_DESC"
  | "correctiveMaintenanceRemark_ASC"
  | "correctiveMaintenanceRemark_DESC"
  | "agreementDate_ASC"
  | "agreementDate_DESC"
  | "signature_ASC"
  | "signature_DESC"
  | "contactPersonCode_ASC"
  | "contactPersonCode_DESC"
  | "contactPersonGender_ASC"
  | "contactPersonGender_DESC"
  | "orderCodeCustomer_ASC"
  | "orderCodeCustomer_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC"
  | "serviceContractCode_ASC"
  | "serviceContractCode_DESC"
  | "orderManager_ASC"
  | "orderManager_DESC"
  | "assignedTo_ASC"
  | "assignedTo_DESC"
  | "servicePackage_ASC"
  | "servicePackage_DESC"
  | "problemDescription_ASC"
  | "problemDescription_DESC"
  | "problemCause_ASC"
  | "problemCause_DESC"
  | "problemSolution_ASC"
  | "problemSolution_DESC"
  | "baseServiceOrderCode_ASC"
  | "baseServiceOrderCode_DESC"
  | "isBaseServiceOrder_ASC"
  | "isBaseServiceOrder_DESC"
  | "hasAdditionalServiceOrder_ASC"
  | "hasAdditionalServiceOrder_DESC"
  | "actualHours_ASC"
  | "actualHours_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "isLocked_ASC"
  | "isLocked_DESC"
  | "lockedBy_ASC"
  | "lockedBy_DESC"
  | "orderNumber_ASC"
  | "orderNumber_DESC"
  | "isExportedLocked_ASC"
  | "isExportedLocked_DESC"
  | "complexId_ASC"
  | "complexId_DESC"
  | "complexCode_ASC"
  | "complexCode_DESC"
  | "complexName_ASC"
  | "complexName_DESC"
  | "subComplexCode_ASC"
  | "subComplexCode_DESC"
  | "subComplexName_ASC"
  | "subComplexName_DESC"
  | "roofCode_ASC"
  | "roofCode_DESC"
  | "workType_ASC"
  | "workType_DESC"
  | "statusReasonDescription_ASC"
  | "statusReasonDescription_DESC"
  | "readyDateNew_ASC"
  | "readyDateNew_DESC"
  | "roofPartner_ASC"
  | "roofPartner_DESC"
  | "roofPartnerName_ASC"
  | "roofPartnerName_DESC"
  | "roofWarranty_ASC"
  | "roofWarranty_DESC"
  | "roofIsAGutter_ASC"
  | "roofIsAGutter_DESC"
  | "amountOfMeasures_ASC"
  | "amountOfMeasures_DESC"
  | "roofingPartDescription_ASC"
  | "roofingPartDescription_DESC"
  | "cause_ASC"
  | "cause_DESC"
  | "measureDescription_ASC"
  | "measureDescription_DESC"
  | "consequentialDamageIndoor_ASC"
  | "consequentialDamageIndoor_DESC"
  | "roofTypeCode_ASC"
  | "roofTypeCode_DESC"
  | "condition_ASC"
  | "condition_DESC"
  | "roofingPartCategories_ASC"
  | "roofingPartCategories_DESC"
  | "roofingPartCodes_ASC"
  | "roofingPartCodes_DESC"
  | "contractCode_ASC"
  | "contractCode_DESC"
  | "invoiceType_ASC"
  | "invoiceType_DESC"
  | "billingAddress_ASC"
  | "billingAddress_DESC"
  | "roofNumber_ASC"
  | "roofNumber_DESC"
  | "isBlocked_ASC"
  | "isBlocked_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EventType = "InternalEvent" | "Listener";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "actionId_ASC"
  | "actionId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "order_ASC"
  | "order_DESC";

export type FaqOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "question_ASC"
  | "question_DESC"
  | "answer_ASC"
  | "answer_DESC"
  | "header_ASC"
  | "header_DESC"
  | "projectNumber_ASC"
  | "projectNumber_DESC";

export type KimInformationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "projectNumber_ASC"
  | "projectNumber_DESC"
  | "projectLeader_ASC"
  | "projectLeader_DESC"
  | "projectLeaderPhoto_ASC"
  | "projectLeaderPhoto_DESC"
  | "foreman_ASC"
  | "foreman_DESC"
  | "foremanPhoto_ASC"
  | "foremanPhoto_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "schedule_ASC"
  | "schedule_DESC"
  | "deliveryDate_ASC"
  | "deliveryDate_DESC"
  | "noiseAndDrilling_ASC"
  | "noiseAndDrilling_DESC"
  | "noiseAndGravel_ASC"
  | "noiseAndGravel_DESC"
  | "noiseAndDemolition_ASC"
  | "noiseAndDemolition_DESC"
  | "vibrationDemolition_ASC"
  | "vibrationDemolition_DESC"
  | "dustAndWipe_ASC"
  | "dustAndWipe_DESC"
  | "dustAndDemolish_ASC"
  | "dustAndDemolish_DESC"
  | "smellAndBitumen_ASC"
  | "smellAndBitumen_DESC"
  | "smellAndCoatings_ASC"
  | "smellAndCoatings_DESC"
  | "crane_ASC"
  | "crane_DESC"
  | "container_ASC"
  | "container_DESC"
  | "constructionSite_ASC"
  | "constructionSite_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MomentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "type_ASC"
  | "type_DESC"
  | "navisionCode_ASC"
  | "navisionCode_DESC"
  | "status_ASC"
  | "status_DESC"
  | "actionId_ASC"
  | "actionId_DESC"
  | "hasSoStatusChange_ASC"
  | "hasSoStatusChange_DESC"
  | "hasWoPlanningStatusChange_ASC"
  | "hasWoPlanningStatusChange_DESC"
  | "hasScStatusChange_ASC"
  | "hasScStatusChange_DESC"
  | "isWOPlanningBlocked_ASC"
  | "isWOPlanningBlocked_DESC"
  | "isSCBlocked_ASC"
  | "isSCBlocked_DESC"
  | "isSOBlocked_ASC"
  | "isSOBlocked_DESC"
  | "isExportBlocked_ASC"
  | "isExportBlocked_DESC";

export type ReportIsNecessary = "NietNodig" | "WilIkHebben" | "LooptAchter";

export type ProjectType = "Single" | "Main_Project" | "Sub_Project";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "projectNumber_ASC"
  | "projectNumber_DESC"
  | "location_ASC"
  | "location_DESC"
  | "employeeCode_ASC"
  | "employeeCode_DESC"
  | "ownerCode_ASC"
  | "ownerCode_DESC"
  | "employeeName_ASC"
  | "employeeName_DESC"
  | "mainProject_ASC"
  | "mainProject_DESC"
  | "description_ASC"
  | "description_DESC"
  | "contractValue_ASC"
  | "contractValue_DESC"
  | "additionalTotalAmount_ASC"
  | "additionalTotalAmount_DESC"
  | "percentageDone_ASC"
  | "percentageDone_DESC"
  | "percentageDoneDate_ASC"
  | "percentageDoneDate_DESC"
  | "percentageDoneMinValue_ASC"
  | "percentageDoneMinValue_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "complexExists_ASC"
  | "complexExists_DESC"
  | "complexId_ASC"
  | "complexId_DESC"
  | "complexCode_ASC"
  | "complexCode_DESC"
  | "complexName_ASC"
  | "complexName_DESC"
  | "complexPhotoNo_ASC"
  | "complexPhotoNo_DESC"
  | "complexPhotoUrl_ASC"
  | "complexPhotoUrl_DESC"
  | "amountSpent_ASC"
  | "amountSpent_DESC"
  | "spentVsBudgetted_ASC"
  | "spentVsBudgetted_DESC"
  | "amountOnReceipt_ASC"
  | "amountOnReceipt_DESC"
  | "receiptIsNecessary_ASC"
  | "receiptIsNecessary_DESC"
  | "invoiced_ASC"
  | "invoiced_DESC"
  | "qualityMeasurementIsNecessary_ASC"
  | "qualityMeasurementIsNecessary_DESC"
  | "progressReportIsNecessary_ASC"
  | "progressReportIsNecessary_DESC"
  | "deliveryReportIsNecessary_ASC"
  | "deliveryReportIsNecessary_DESC"
  | "qualityMeasurementIsComplete_ASC"
  | "qualityMeasurementIsComplete_DESC"
  | "progressReportIsComplete_ASC"
  | "progressReportIsComplete_DESC"
  | "deliveryReportIsComplete_ASC"
  | "deliveryReportIsComplete_DESC"
  | "additionalWorkDescription1_ASC"
  | "additionalWorkDescription1_DESC"
  | "additionalWorkAmount1_ASC"
  | "additionalWorkAmount1_DESC"
  | "additionalWorkDescription2_ASC"
  | "additionalWorkDescription2_DESC"
  | "additionalWorkAmount2_ASC"
  | "additionalWorkAmount2_DESC"
  | "additionalWorkDescription3_ASC"
  | "additionalWorkDescription3_DESC"
  | "additionalWorkAmount3_ASC"
  | "additionalWorkAmount3_DESC"
  | "additionalWorkDescription4_ASC"
  | "additionalWorkDescription4_DESC"
  | "additionalWorkAmount4_ASC"
  | "additionalWorkAmount4_DESC"
  | "additionalWorkDescription5_ASC"
  | "additionalWorkDescription5_DESC"
  | "additionalWorkAmount5_ASC"
  | "additionalWorkAmount5_DESC"
  | "additionalWorkDescription6_ASC"
  | "additionalWorkDescription6_DESC"
  | "additionalWorkAmount6_ASC"
  | "additionalWorkAmount6_DESC"
  | "qualityMeasurementDocumentNo_ASC"
  | "qualityMeasurementDocumentNo_DESC"
  | "progressReportDocumentNo_ASC"
  | "progressReportDocumentNo_DESC"
  | "deliveryReportDocumentNo_ASC"
  | "deliveryReportDocumentNo_DESC"
  | "visitReportDocumentNo_ASC"
  | "visitReportDocumentNo_DESC"
  | "incidentReportDocumentNo_ASC"
  | "incidentReportDocumentNo_DESC"
  | "deviationFormDocumentNo_ASC"
  | "deviationFormDocumentNo_DESC"
  | "qualityMeasurementDocumentUrl_ASC"
  | "qualityMeasurementDocumentUrl_DESC"
  | "progressReportDocumentUrl_ASC"
  | "progressReportDocumentUrl_DESC"
  | "deliveryReportDocumentUrl_ASC"
  | "deliveryReportDocumentUrl_DESC"
  | "visitReportDocumentUrl_ASC"
  | "visitReportDocumentUrl_DESC"
  | "incidentReportDocumentUrl_ASC"
  | "incidentReportDocumentUrl_DESC"
  | "deviationFormDocumentUrl_ASC"
  | "deviationFormDocumentUrl_DESC"
  | "isMainProject_ASC"
  | "isMainProject_DESC"
  | "expectedStartDate_ASC"
  | "expectedStartDate_DESC"
  | "expectedEndDate_ASC"
  | "expectedEndDate_DESC"
  | "budgetHours_ASC"
  | "budgetHours_DESC"
  | "numberOfDays_ASC"
  | "numberOfDays_DESC"
  | "numberOfHourlyWorkBudget_ASC"
  | "numberOfHourlyWorkBudget_DESC"
  | "subcontractorName_ASC"
  | "subcontractorName_DESC"
  | "projectMemo_ASC"
  | "projectMemo_DESC"
  | "projectType_ASC"
  | "projectType_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "salesPersonCode_ASC"
  | "salesPersonCode_DESC"
  | "estimatorCode_ASC"
  | "estimatorCode_DESC"
  | "projectManagerCode_ASC"
  | "projectManagerCode_DESC"
  | "siteManagerCode_ASC"
  | "siteManagerCode_DESC"
  | "team_ASC"
  | "team_DESC"
  | "status_ASC"
  | "status_DESC"
  | "statusModificationDate_ASC"
  | "statusModificationDate_DESC"
  | "billToCustomerNo_ASC"
  | "billToCustomerNo_DESC"
  | "commissionDate_ASC"
  | "commissionDate_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "warrantyEndDate_ASC"
  | "warrantyEndDate_DESC"
  | "workType_ASC"
  | "workType_DESC"
  | "roofingPartnerName_ASC"
  | "roofingPartnerName_DESC"
  | "isAppProject_ASC"
  | "isAppProject_DESC";

export type ReporterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "onBehalfOf_ASC"
  | "onBehalfOf_DESC"
  | "type_ASC"
  | "type_DESC"
  | "reference_ASC"
  | "reference_DESC"
  | "priority_ASC"
  | "priority_DESC"
  | "workText_ASC"
  | "workText_DESC"
  | "internalText_ASC"
  | "internalText_DESC"
  | "adviceText_ASC"
  | "adviceText_DESC"
  | "description_ASC"
  | "description_DESC"
  | "isTrackAndTraceActive_ASC"
  | "isTrackAndTraceActive_DESC";

export type ServiceContractOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "description_ASC"
  | "description_DESC"
  | "roofAddress_ASC"
  | "roofAddress_DESC"
  | "roofCity_ASC"
  | "roofCity_DESC"
  | "status_ASC"
  | "status_DESC"
  | "orderDate_ASC"
  | "orderDate_DESC"
  | "startingDate_ASC"
  | "startingDate_DESC"
  | "endingDate_ASC"
  | "endingDate_DESC"
  | "terminationDate_ASC"
  | "terminationDate_DESC"
  | "customerCode_ASC"
  | "customerCode_DESC"
  | "contactPersonCode_ASC"
  | "contactPersonCode_DESC"
  | "name_ASC"
  | "name_DESC"
  | "name2_ASC"
  | "name2_DESC"
  | "address_ASC"
  | "address_DESC"
  | "postcode_ASC"
  | "postcode_DESC"
  | "city_ASC"
  | "city_DESC"
  | "contactName_ASC"
  | "contactName_DESC"
  | "phoneNo_ASC"
  | "phoneNo_DESC"
  | "email_ASC"
  | "email_DESC"
  | "billToCustomerNoContr_ASC"
  | "billToCustomerNoContr_DESC"
  | "billToNameContract_ASC"
  | "billToNameContract_DESC"
  | "billToAddressContract_ASC"
  | "billToAddressContract_DESC"
  | "billToPostCodeContract_ASC"
  | "billToPostCodeContract_DESC"
  | "billToCityContract_ASC"
  | "billToCityContract_DESC"
  | "billToContactPersonContr_ASC"
  | "billToContactPersonContr_DESC"
  | "billToContPersNameCtr_ASC"
  | "billToContPersNameCtr_DESC"
  | "globalDimension1Code_ASC"
  | "globalDimension1Code_DESC"
  | "initialSalesAmount_ASC"
  | "initialSalesAmount_DESC"
  | "maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_ASC"
  | "maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_DESC"
  | "lastIndexDate_ASC"
  | "lastIndexDate_DESC"
  | "contractManager_ASC"
  | "contractManager_DESC"
  | "contractManagerName_ASC"
  | "contractManagerName_DESC"
  | "yourReference_ASC"
  | "yourReference_DESC"
  | "blocked_ASC"
  | "blocked_DESC"
  | "firstYearMaintenance_ASC"
  | "firstYearMaintenance_DESC"
  | "maintenanceMonth_ASC"
  | "maintenanceMonth_DESC"
  | "acknowledgedSO_ASC"
  | "acknowledgedSO_DESC"
  | "createdSO_ASC"
  | "createdSO_DESC"
  | "openedSO_ASC"
  | "openedSO_DESC"
  | "readySO_ASC"
  | "readySO_DESC"
  | "percentageReady_ASC"
  | "percentageReady_DESC"
  | "workingHours_ASC"
  | "workingHours_DESC"
  | "spendHours_ASC"
  | "spendHours_DESC"
  | "hoursSpentLastYear_ASC"
  | "hoursSpentLastYear_DESC"
  | "totalCost_ASC"
  | "totalCost_DESC"
  | "billedAmount_ASC"
  | "billedAmount_DESC"
  | "invoicedUntil_ASC"
  | "invoicedUntil_DESC"
  | "m2Dak_ASC"
  | "m2Dak_DESC"
  | "m2DakReady_ASC"
  | "m2DakReady_DESC"
  | "m2DakReadyPercent_ASC"
  | "m2DakReadyPercent_DESC"
  | "reportDocument_ASC"
  | "reportDocument_DESC"
  | "installmentsBasedOnProgress_ASC"
  | "installmentsBasedOnProgress_DESC"
  | "invoiceType_ASC"
  | "invoiceType_DESC"
  | "installmentType_ASC"
  | "installmentType_DESC"
  | "invoicePeriod_ASC"
  | "invoicePeriod_DESC"
  | "currencyCode_ASC"
  | "currencyCode_DESC"
  | "serviceIndexMethod_ASC"
  | "serviceIndexMethod_DESC"
  | "invoiceTextInstallments_ASC"
  | "invoiceTextInstallments_DESC"
  | "outsourced_ASC"
  | "outsourced_DESC"
  | "lastExecutedBy_ASC"
  | "lastExecutedBy_DESC"
  | "isLocked_ASC"
  | "isLocked_DESC"
  | "lockedBy_ASC"
  | "lockedBy_DESC";

export type ContractIndexMethod = "Geen" | "Standaard" | "Handmatig";

export type ServiceContractEstimationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "initialSalesAmount_ASC"
  | "initialSalesAmount_DESC"
  | "billedAmount_ASC"
  | "billedAmount_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceContractIndexOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "indexMethod_ASC"
  | "indexMethod_DESC"
  | "indexTime_ASC"
  | "indexTime_DESC"
  | "indexedAmount_ASC"
  | "indexedAmount_DESC"
  | "indexFigure_ASC"
  | "indexFigure_DESC"
  | "contractNumber_ASC"
  | "contractNumber_DESC"
  | "contractAmount_ASC"
  | "contractAmount_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceContractTermOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serviceContractCode_ASC"
  | "serviceContractCode_DESC"
  | "lineNo_ASC"
  | "lineNo_DESC"
  | "invoiceFrom_ASC"
  | "invoiceFrom_DESC"
  | "endingDate_ASC"
  | "endingDate_DESC"
  | "invoicedUntil_ASC"
  | "invoicedUntil_DESC"
  | "invoiceInterval_ASC"
  | "invoiceInterval_DESC"
  | "invoicePostponePeriod_ASC"
  | "invoicePostponePeriod_DESC"
  | "nextInvoicingDate_ASC"
  | "nextInvoicingDate_DESC"
  | "progressPercent_ASC"
  | "progressPercent_DESC"
  | "gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_ASC"
  | "gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_DESC"
  | "invoiceDirectly_ASC"
  | "invoiceDirectly_DESC"
  | "gvMaintInvMngmntCUGetInstallmAmntByDateRec_ASC"
  | "gvMaintInvMngmntCUGetInstallmAmntByDateRec_DESC"
  | "gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_ASC"
  | "gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_DESC"
  | "description_ASC"
  | "description_DESC"
  | "invoicingVIACollectiveList_ASC"
  | "invoicingVIACollectiveList_DESC"
  | "invoicePeriod_ASC"
  | "invoicePeriod_DESC"
  | "chargeable_ASC"
  | "chargeable_DESC"
  | "invoicedPrice_ASC"
  | "invoicedPrice_DESC"
  | "invoiceInProcess_ASC"
  | "invoiceInProcess_DESC"
  | "creditMemoInProcess_ASC"
  | "creditMemoInProcess_DESC"
  | "invoicePayment_ASC"
  | "invoicePayment_DESC"
  | "globalDimension1Code_ASC"
  | "globalDimension1Code_DESC"
  | "customerCode_ASC"
  | "customerCode_DESC"
  | "billToCustomerCode_ASC"
  | "billToCustomerCode_DESC";

export type ServiceOrderUpdateNotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "orderOwnerEmail_ASC"
  | "orderOwnerEmail_DESC"
  | "orderOwnerPhone_ASC"
  | "orderOwnerPhone_DESC"
  | "linkToken_ASC"
  | "linkToken_DESC"
  | "smsText_ASC"
  | "smsText_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "emailHtmlBody_ASC"
  | "emailHtmlBody_DESC"
  | "emailSubject_ASC"
  | "emailSubject_DESC"
  | "companyEmail_ASC"
  | "companyEmail_DESC"
  | "smsDeliveryStatus_ASC"
  | "smsDeliveryStatus_DESC"
  | "emailDeliveryStatus_ASC"
  | "emailDeliveryStatus_DESC"
  | "linkExpirationDate_ASC"
  | "linkExpirationDate_DESC"
  | "serviceOrderId_ASC"
  | "serviceOrderId_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ServiceStatusOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ActionWhereInput[] | ActionWhereInput>;
  OR?: Maybe<ActionWhereInput[] | ActionWhereInput>;
  NOT?: Maybe<ActionWhereInput[] | ActionWhereInput>;
}

export type ActivityLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface WorkOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceCompanyName_not?: Maybe<String>;
  sourceCompanyName_in?: Maybe<String[] | String>;
  sourceCompanyName_not_in?: Maybe<String[] | String>;
  sourceCompanyName_lt?: Maybe<String>;
  sourceCompanyName_lte?: Maybe<String>;
  sourceCompanyName_gt?: Maybe<String>;
  sourceCompanyName_gte?: Maybe<String>;
  sourceCompanyName_contains?: Maybe<String>;
  sourceCompanyName_not_contains?: Maybe<String>;
  sourceCompanyName_starts_with?: Maybe<String>;
  sourceCompanyName_not_starts_with?: Maybe<String>;
  sourceCompanyName_ends_with?: Maybe<String>;
  sourceCompanyName_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceType_not?: Maybe<String>;
  sourceType_in?: Maybe<String[] | String>;
  sourceType_not_in?: Maybe<String[] | String>;
  sourceType_lt?: Maybe<String>;
  sourceType_lte?: Maybe<String>;
  sourceType_gt?: Maybe<String>;
  sourceType_gte?: Maybe<String>;
  sourceType_contains?: Maybe<String>;
  sourceType_not_contains?: Maybe<String>;
  sourceType_starts_with?: Maybe<String>;
  sourceType_not_starts_with?: Maybe<String>;
  sourceType_ends_with?: Maybe<String>;
  sourceType_not_ends_with?: Maybe<String>;
  sourceCode?: Maybe<String>;
  sourceCode_not?: Maybe<String>;
  sourceCode_in?: Maybe<String[] | String>;
  sourceCode_not_in?: Maybe<String[] | String>;
  sourceCode_lt?: Maybe<String>;
  sourceCode_lte?: Maybe<String>;
  sourceCode_gt?: Maybe<String>;
  sourceCode_gte?: Maybe<String>;
  sourceCode_contains?: Maybe<String>;
  sourceCode_not_contains?: Maybe<String>;
  sourceCode_starts_with?: Maybe<String>;
  sourceCode_not_starts_with?: Maybe<String>;
  sourceCode_ends_with?: Maybe<String>;
  sourceCode_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceType_not?: Maybe<String>;
  resourceType_in?: Maybe<String[] | String>;
  resourceType_not_in?: Maybe<String[] | String>;
  resourceType_lt?: Maybe<String>;
  resourceType_lte?: Maybe<String>;
  resourceType_gt?: Maybe<String>;
  resourceType_gte?: Maybe<String>;
  resourceType_contains?: Maybe<String>;
  resourceType_not_contains?: Maybe<String>;
  resourceType_starts_with?: Maybe<String>;
  resourceType_not_starts_with?: Maybe<String>;
  resourceType_ends_with?: Maybe<String>;
  resourceType_not_ends_with?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCode_not?: Maybe<String>;
  resourceCode_in?: Maybe<String[] | String>;
  resourceCode_not_in?: Maybe<String[] | String>;
  resourceCode_lt?: Maybe<String>;
  resourceCode_lte?: Maybe<String>;
  resourceCode_gt?: Maybe<String>;
  resourceCode_gte?: Maybe<String>;
  resourceCode_contains?: Maybe<String>;
  resourceCode_not_contains?: Maybe<String>;
  resourceCode_starts_with?: Maybe<String>;
  resourceCode_not_starts_with?: Maybe<String>;
  resourceCode_ends_with?: Maybe<String>;
  resourceCode_not_ends_with?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  resourceCompanyName_not?: Maybe<String>;
  resourceCompanyName_in?: Maybe<String[] | String>;
  resourceCompanyName_not_in?: Maybe<String[] | String>;
  resourceCompanyName_lt?: Maybe<String>;
  resourceCompanyName_lte?: Maybe<String>;
  resourceCompanyName_gt?: Maybe<String>;
  resourceCompanyName_gte?: Maybe<String>;
  resourceCompanyName_contains?: Maybe<String>;
  resourceCompanyName_not_contains?: Maybe<String>;
  resourceCompanyName_starts_with?: Maybe<String>;
  resourceCompanyName_not_starts_with?: Maybe<String>;
  resourceCompanyName_ends_with?: Maybe<String>;
  resourceCompanyName_not_ends_with?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  isMainResource_not?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  serviceStatus_not?: Maybe<String>;
  serviceStatus_in?: Maybe<String[] | String>;
  serviceStatus_not_in?: Maybe<String[] | String>;
  serviceStatus_lt?: Maybe<String>;
  serviceStatus_lte?: Maybe<String>;
  serviceStatus_gt?: Maybe<String>;
  serviceStatus_gte?: Maybe<String>;
  serviceStatus_contains?: Maybe<String>;
  serviceStatus_not_contains?: Maybe<String>;
  serviceStatus_starts_with?: Maybe<String>;
  serviceStatus_not_starts_with?: Maybe<String>;
  serviceStatus_ends_with?: Maybe<String>;
  serviceStatus_not_ends_with?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  statusReasonDescription_not?: Maybe<String>;
  statusReasonDescription_in?: Maybe<String[] | String>;
  statusReasonDescription_not_in?: Maybe<String[] | String>;
  statusReasonDescription_lt?: Maybe<String>;
  statusReasonDescription_lte?: Maybe<String>;
  statusReasonDescription_gt?: Maybe<String>;
  statusReasonDescription_gte?: Maybe<String>;
  statusReasonDescription_contains?: Maybe<String>;
  statusReasonDescription_not_contains?: Maybe<String>;
  statusReasonDescription_starts_with?: Maybe<String>;
  statusReasonDescription_not_starts_with?: Maybe<String>;
  statusReasonDescription_ends_with?: Maybe<String>;
  statusReasonDescription_not_ends_with?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  isFinishedService_not?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  firstPossibleStartDate_not?: Maybe<String>;
  firstPossibleStartDate_in?: Maybe<String[] | String>;
  firstPossibleStartDate_not_in?: Maybe<String[] | String>;
  firstPossibleStartDate_lt?: Maybe<String>;
  firstPossibleStartDate_lte?: Maybe<String>;
  firstPossibleStartDate_gt?: Maybe<String>;
  firstPossibleStartDate_gte?: Maybe<String>;
  firstPossibleStartDate_contains?: Maybe<String>;
  firstPossibleStartDate_not_contains?: Maybe<String>;
  firstPossibleStartDate_starts_with?: Maybe<String>;
  firstPossibleStartDate_not_starts_with?: Maybe<String>;
  firstPossibleStartDate_ends_with?: Maybe<String>;
  firstPossibleStartDate_not_ends_with?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate_not?: Maybe<String>;
  lastPossibleStartDate_in?: Maybe<String[] | String>;
  lastPossibleStartDate_not_in?: Maybe<String[] | String>;
  lastPossibleStartDate_lt?: Maybe<String>;
  lastPossibleStartDate_lte?: Maybe<String>;
  lastPossibleStartDate_gt?: Maybe<String>;
  lastPossibleStartDate_gte?: Maybe<String>;
  lastPossibleStartDate_contains?: Maybe<String>;
  lastPossibleStartDate_not_contains?: Maybe<String>;
  lastPossibleStartDate_starts_with?: Maybe<String>;
  lastPossibleStartDate_not_starts_with?: Maybe<String>;
  lastPossibleStartDate_ends_with?: Maybe<String>;
  lastPossibleStartDate_not_ends_with?: Maybe<String>;
  starDate?: Maybe<String>;
  starDate_not?: Maybe<String>;
  starDate_in?: Maybe<String[] | String>;
  starDate_not_in?: Maybe<String[] | String>;
  starDate_lt?: Maybe<String>;
  starDate_lte?: Maybe<String>;
  starDate_gt?: Maybe<String>;
  starDate_gte?: Maybe<String>;
  starDate_contains?: Maybe<String>;
  starDate_not_contains?: Maybe<String>;
  starDate_starts_with?: Maybe<String>;
  starDate_not_starts_with?: Maybe<String>;
  starDate_ends_with?: Maybe<String>;
  starDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  expectedHours_not?: Maybe<Float>;
  expectedHours_in?: Maybe<Float[] | Float>;
  expectedHours_not_in?: Maybe<Float[] | Float>;
  expectedHours_lt?: Maybe<Float>;
  expectedHours_lte?: Maybe<Float>;
  expectedHours_gt?: Maybe<Float>;
  expectedHours_gte?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  durationTime_not?: Maybe<Float>;
  durationTime_in?: Maybe<Float[] | Float>;
  durationTime_not_in?: Maybe<Float[] | Float>;
  durationTime_lt?: Maybe<Float>;
  durationTime_lte?: Maybe<Float>;
  durationTime_gt?: Maybe<Float>;
  durationTime_gte?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isDuringClockTime_not?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isFirmPlanned_not?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  isExportToFSA_not?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  exportToFSADate_not?: Maybe<String>;
  exportToFSADate_in?: Maybe<String[] | String>;
  exportToFSADate_not_in?: Maybe<String[] | String>;
  exportToFSADate_lt?: Maybe<String>;
  exportToFSADate_lte?: Maybe<String>;
  exportToFSADate_gt?: Maybe<String>;
  exportToFSADate_gte?: Maybe<String>;
  exportToFSADate_contains?: Maybe<String>;
  exportToFSADate_not_contains?: Maybe<String>;
  exportToFSADate_starts_with?: Maybe<String>;
  exportToFSADate_not_starts_with?: Maybe<String>;
  exportToFSADate_ends_with?: Maybe<String>;
  exportToFSADate_not_ends_with?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePoint_not?: Maybe<String>;
  actualReferencePoint_in?: Maybe<String[] | String>;
  actualReferencePoint_not_in?: Maybe<String[] | String>;
  actualReferencePoint_lt?: Maybe<String>;
  actualReferencePoint_lte?: Maybe<String>;
  actualReferencePoint_gt?: Maybe<String>;
  actualReferencePoint_gte?: Maybe<String>;
  actualReferencePoint_contains?: Maybe<String>;
  actualReferencePoint_not_contains?: Maybe<String>;
  actualReferencePoint_starts_with?: Maybe<String>;
  actualReferencePoint_not_starts_with?: Maybe<String>;
  actualReferencePoint_ends_with?: Maybe<String>;
  actualReferencePoint_not_ends_with?: Maybe<String>;
  assignedTo?: Maybe<String>;
  assignedTo_not?: Maybe<String>;
  assignedTo_in?: Maybe<String[] | String>;
  assignedTo_not_in?: Maybe<String[] | String>;
  assignedTo_lt?: Maybe<String>;
  assignedTo_lte?: Maybe<String>;
  assignedTo_gt?: Maybe<String>;
  assignedTo_gte?: Maybe<String>;
  assignedTo_contains?: Maybe<String>;
  assignedTo_not_contains?: Maybe<String>;
  assignedTo_starts_with?: Maybe<String>;
  assignedTo_not_starts_with?: Maybe<String>;
  assignedTo_ends_with?: Maybe<String>;
  assignedTo_not_ends_with?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  globalDimensionCode_not?: Maybe<String>;
  globalDimensionCode_in?: Maybe<String[] | String>;
  globalDimensionCode_not_in?: Maybe<String[] | String>;
  globalDimensionCode_lt?: Maybe<String>;
  globalDimensionCode_lte?: Maybe<String>;
  globalDimensionCode_gt?: Maybe<String>;
  globalDimensionCode_gte?: Maybe<String>;
  globalDimensionCode_contains?: Maybe<String>;
  globalDimensionCode_not_contains?: Maybe<String>;
  globalDimensionCode_starts_with?: Maybe<String>;
  globalDimensionCode_not_starts_with?: Maybe<String>;
  globalDimensionCode_ends_with?: Maybe<String>;
  globalDimensionCode_not_ends_with?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  serviceContractCode_not?: Maybe<String>;
  serviceContractCode_in?: Maybe<String[] | String>;
  serviceContractCode_not_in?: Maybe<String[] | String>;
  serviceContractCode_lt?: Maybe<String>;
  serviceContractCode_lte?: Maybe<String>;
  serviceContractCode_gt?: Maybe<String>;
  serviceContractCode_gte?: Maybe<String>;
  serviceContractCode_contains?: Maybe<String>;
  serviceContractCode_not_contains?: Maybe<String>;
  serviceContractCode_starts_with?: Maybe<String>;
  serviceContractCode_not_starts_with?: Maybe<String>;
  serviceContractCode_ends_with?: Maybe<String>;
  serviceContractCode_not_ends_with?: Maybe<String>;
  orderManager?: Maybe<String>;
  orderManager_not?: Maybe<String>;
  orderManager_in?: Maybe<String[] | String>;
  orderManager_not_in?: Maybe<String[] | String>;
  orderManager_lt?: Maybe<String>;
  orderManager_lte?: Maybe<String>;
  orderManager_gt?: Maybe<String>;
  orderManager_gte?: Maybe<String>;
  orderManager_contains?: Maybe<String>;
  orderManager_not_contains?: Maybe<String>;
  orderManager_starts_with?: Maybe<String>;
  orderManager_not_starts_with?: Maybe<String>;
  orderManager_ends_with?: Maybe<String>;
  orderManager_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  jobDescription?: Maybe<String>;
  jobDescription_not?: Maybe<String>;
  jobDescription_in?: Maybe<String[] | String>;
  jobDescription_not_in?: Maybe<String[] | String>;
  jobDescription_lt?: Maybe<String>;
  jobDescription_lte?: Maybe<String>;
  jobDescription_gt?: Maybe<String>;
  jobDescription_gte?: Maybe<String>;
  jobDescription_contains?: Maybe<String>;
  jobDescription_not_contains?: Maybe<String>;
  jobDescription_starts_with?: Maybe<String>;
  jobDescription_not_starts_with?: Maybe<String>;
  jobDescription_ends_with?: Maybe<String>;
  jobDescription_not_ends_with?: Maybe<String>;
  soCode?: Maybe<String>;
  soCode_not?: Maybe<String>;
  soCode_in?: Maybe<String[] | String>;
  soCode_not_in?: Maybe<String[] | String>;
  soCode_lt?: Maybe<String>;
  soCode_lte?: Maybe<String>;
  soCode_gt?: Maybe<String>;
  soCode_gte?: Maybe<String>;
  soCode_contains?: Maybe<String>;
  soCode_not_contains?: Maybe<String>;
  soCode_starts_with?: Maybe<String>;
  soCode_not_starts_with?: Maybe<String>;
  soCode_ends_with?: Maybe<String>;
  soCode_not_ends_with?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soCallerCode_not?: Maybe<String>;
  soCallerCode_in?: Maybe<String[] | String>;
  soCallerCode_not_in?: Maybe<String[] | String>;
  soCallerCode_lt?: Maybe<String>;
  soCallerCode_lte?: Maybe<String>;
  soCallerCode_gt?: Maybe<String>;
  soCallerCode_gte?: Maybe<String>;
  soCallerCode_contains?: Maybe<String>;
  soCallerCode_not_contains?: Maybe<String>;
  soCallerCode_starts_with?: Maybe<String>;
  soCallerCode_not_starts_with?: Maybe<String>;
  soCallerCode_ends_with?: Maybe<String>;
  soCallerCode_not_ends_with?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soOrderType_not?: Maybe<String>;
  soOrderType_in?: Maybe<String[] | String>;
  soOrderType_not_in?: Maybe<String[] | String>;
  soOrderType_lt?: Maybe<String>;
  soOrderType_lte?: Maybe<String>;
  soOrderType_gt?: Maybe<String>;
  soOrderType_gte?: Maybe<String>;
  soOrderType_contains?: Maybe<String>;
  soOrderType_not_contains?: Maybe<String>;
  soOrderType_starts_with?: Maybe<String>;
  soOrderType_not_starts_with?: Maybe<String>;
  soOrderType_ends_with?: Maybe<String>;
  soOrderType_not_ends_with?: Maybe<String>;
  soDescription?: Maybe<String>;
  soDescription_not?: Maybe<String>;
  soDescription_in?: Maybe<String[] | String>;
  soDescription_not_in?: Maybe<String[] | String>;
  soDescription_lt?: Maybe<String>;
  soDescription_lte?: Maybe<String>;
  soDescription_gt?: Maybe<String>;
  soDescription_gte?: Maybe<String>;
  soDescription_contains?: Maybe<String>;
  soDescription_not_contains?: Maybe<String>;
  soDescription_starts_with?: Maybe<String>;
  soDescription_not_starts_with?: Maybe<String>;
  soDescription_ends_with?: Maybe<String>;
  soDescription_not_ends_with?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactCode_not?: Maybe<String>;
  soContactCode_in?: Maybe<String[] | String>;
  soContactCode_not_in?: Maybe<String[] | String>;
  soContactCode_lt?: Maybe<String>;
  soContactCode_lte?: Maybe<String>;
  soContactCode_gt?: Maybe<String>;
  soContactCode_gte?: Maybe<String>;
  soContactCode_contains?: Maybe<String>;
  soContactCode_not_contains?: Maybe<String>;
  soContactCode_starts_with?: Maybe<String>;
  soContactCode_not_starts_with?: Maybe<String>;
  soContactCode_ends_with?: Maybe<String>;
  soContactCode_not_ends_with?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soContactPersonCode_not?: Maybe<String>;
  soContactPersonCode_in?: Maybe<String[] | String>;
  soContactPersonCode_not_in?: Maybe<String[] | String>;
  soContactPersonCode_lt?: Maybe<String>;
  soContactPersonCode_lte?: Maybe<String>;
  soContactPersonCode_gt?: Maybe<String>;
  soContactPersonCode_gte?: Maybe<String>;
  soContactPersonCode_contains?: Maybe<String>;
  soContactPersonCode_not_contains?: Maybe<String>;
  soContactPersonCode_starts_with?: Maybe<String>;
  soContactPersonCode_not_starts_with?: Maybe<String>;
  soContactPersonCode_ends_with?: Maybe<String>;
  soContactPersonCode_not_ends_with?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soCustomerFeature_not?: Maybe<String>;
  soCustomerFeature_in?: Maybe<String[] | String>;
  soCustomerFeature_not_in?: Maybe<String[] | String>;
  soCustomerFeature_lt?: Maybe<String>;
  soCustomerFeature_lte?: Maybe<String>;
  soCustomerFeature_gt?: Maybe<String>;
  soCustomerFeature_gte?: Maybe<String>;
  soCustomerFeature_contains?: Maybe<String>;
  soCustomerFeature_not_contains?: Maybe<String>;
  soCustomerFeature_starts_with?: Maybe<String>;
  soCustomerFeature_not_starts_with?: Maybe<String>;
  soCustomerFeature_ends_with?: Maybe<String>;
  soCustomerFeature_not_ends_with?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soBillingCode_not?: Maybe<String>;
  soBillingCode_in?: Maybe<String[] | String>;
  soBillingCode_not_in?: Maybe<String[] | String>;
  soBillingCode_lt?: Maybe<String>;
  soBillingCode_lte?: Maybe<String>;
  soBillingCode_gt?: Maybe<String>;
  soBillingCode_gte?: Maybe<String>;
  soBillingCode_contains?: Maybe<String>;
  soBillingCode_not_contains?: Maybe<String>;
  soBillingCode_starts_with?: Maybe<String>;
  soBillingCode_not_starts_with?: Maybe<String>;
  soBillingCode_ends_with?: Maybe<String>;
  soBillingCode_not_ends_with?: Maybe<String>;
  soReference?: Maybe<String>;
  soReference_not?: Maybe<String>;
  soReference_in?: Maybe<String[] | String>;
  soReference_not_in?: Maybe<String[] | String>;
  soReference_lt?: Maybe<String>;
  soReference_lte?: Maybe<String>;
  soReference_gt?: Maybe<String>;
  soReference_gte?: Maybe<String>;
  soReference_contains?: Maybe<String>;
  soReference_not_contains?: Maybe<String>;
  soReference_starts_with?: Maybe<String>;
  soReference_not_starts_with?: Maybe<String>;
  soReference_ends_with?: Maybe<String>;
  soReference_not_ends_with?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soCommissionDate_not?: Maybe<String>;
  soCommissionDate_in?: Maybe<String[] | String>;
  soCommissionDate_not_in?: Maybe<String[] | String>;
  soCommissionDate_lt?: Maybe<String>;
  soCommissionDate_lte?: Maybe<String>;
  soCommissionDate_gt?: Maybe<String>;
  soCommissionDate_gte?: Maybe<String>;
  soCommissionDate_contains?: Maybe<String>;
  soCommissionDate_not_contains?: Maybe<String>;
  soCommissionDate_starts_with?: Maybe<String>;
  soCommissionDate_not_starts_with?: Maybe<String>;
  soCommissionDate_ends_with?: Maybe<String>;
  soCommissionDate_not_ends_with?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soServiceLocationCode_not?: Maybe<String>;
  soServiceLocationCode_in?: Maybe<String[] | String>;
  soServiceLocationCode_not_in?: Maybe<String[] | String>;
  soServiceLocationCode_lt?: Maybe<String>;
  soServiceLocationCode_lte?: Maybe<String>;
  soServiceLocationCode_gt?: Maybe<String>;
  soServiceLocationCode_gte?: Maybe<String>;
  soServiceLocationCode_contains?: Maybe<String>;
  soServiceLocationCode_not_contains?: Maybe<String>;
  soServiceLocationCode_starts_with?: Maybe<String>;
  soServiceLocationCode_not_starts_with?: Maybe<String>;
  soServiceLocationCode_ends_with?: Maybe<String>;
  soServiceLocationCode_not_ends_with?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soOrderCodeCustomer_not?: Maybe<String>;
  soOrderCodeCustomer_in?: Maybe<String[] | String>;
  soOrderCodeCustomer_not_in?: Maybe<String[] | String>;
  soOrderCodeCustomer_lt?: Maybe<String>;
  soOrderCodeCustomer_lte?: Maybe<String>;
  soOrderCodeCustomer_gt?: Maybe<String>;
  soOrderCodeCustomer_gte?: Maybe<String>;
  soOrderCodeCustomer_contains?: Maybe<String>;
  soOrderCodeCustomer_not_contains?: Maybe<String>;
  soOrderCodeCustomer_starts_with?: Maybe<String>;
  soOrderCodeCustomer_not_starts_with?: Maybe<String>;
  soOrderCodeCustomer_ends_with?: Maybe<String>;
  soOrderCodeCustomer_not_ends_with?: Maybe<String>;
  soName?: Maybe<String>;
  soName_not?: Maybe<String>;
  soName_in?: Maybe<String[] | String>;
  soName_not_in?: Maybe<String[] | String>;
  soName_lt?: Maybe<String>;
  soName_lte?: Maybe<String>;
  soName_gt?: Maybe<String>;
  soName_gte?: Maybe<String>;
  soName_contains?: Maybe<String>;
  soName_not_contains?: Maybe<String>;
  soName_starts_with?: Maybe<String>;
  soName_not_starts_with?: Maybe<String>;
  soName_ends_with?: Maybe<String>;
  soName_not_ends_with?: Maybe<String>;
  soName2?: Maybe<String>;
  soName2_not?: Maybe<String>;
  soName2_in?: Maybe<String[] | String>;
  soName2_not_in?: Maybe<String[] | String>;
  soName2_lt?: Maybe<String>;
  soName2_lte?: Maybe<String>;
  soName2_gt?: Maybe<String>;
  soName2_gte?: Maybe<String>;
  soName2_contains?: Maybe<String>;
  soName2_not_contains?: Maybe<String>;
  soName2_starts_with?: Maybe<String>;
  soName2_not_starts_with?: Maybe<String>;
  soName2_ends_with?: Maybe<String>;
  soName2_not_ends_with?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soSourceType_not?: Maybe<String>;
  soSourceType_in?: Maybe<String[] | String>;
  soSourceType_not_in?: Maybe<String[] | String>;
  soSourceType_lt?: Maybe<String>;
  soSourceType_lte?: Maybe<String>;
  soSourceType_gt?: Maybe<String>;
  soSourceType_gte?: Maybe<String>;
  soSourceType_contains?: Maybe<String>;
  soSourceType_not_contains?: Maybe<String>;
  soSourceType_starts_with?: Maybe<String>;
  soSourceType_not_starts_with?: Maybe<String>;
  soSourceType_ends_with?: Maybe<String>;
  soSourceType_not_ends_with?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soServiceContractCode_not?: Maybe<String>;
  soServiceContractCode_in?: Maybe<String[] | String>;
  soServiceContractCode_not_in?: Maybe<String[] | String>;
  soServiceContractCode_lt?: Maybe<String>;
  soServiceContractCode_lte?: Maybe<String>;
  soServiceContractCode_gt?: Maybe<String>;
  soServiceContractCode_gte?: Maybe<String>;
  soServiceContractCode_contains?: Maybe<String>;
  soServiceContractCode_not_contains?: Maybe<String>;
  soServiceContractCode_starts_with?: Maybe<String>;
  soServiceContractCode_not_starts_with?: Maybe<String>;
  soServiceContractCode_ends_with?: Maybe<String>;
  soServiceContractCode_not_ends_with?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soGlobalDimensionCode_not?: Maybe<String>;
  soGlobalDimensionCode_in?: Maybe<String[] | String>;
  soGlobalDimensionCode_not_in?: Maybe<String[] | String>;
  soGlobalDimensionCode_lt?: Maybe<String>;
  soGlobalDimensionCode_lte?: Maybe<String>;
  soGlobalDimensionCode_gt?: Maybe<String>;
  soGlobalDimensionCode_gte?: Maybe<String>;
  soGlobalDimensionCode_contains?: Maybe<String>;
  soGlobalDimensionCode_not_contains?: Maybe<String>;
  soGlobalDimensionCode_starts_with?: Maybe<String>;
  soGlobalDimensionCode_not_starts_with?: Maybe<String>;
  soGlobalDimensionCode_ends_with?: Maybe<String>;
  soGlobalDimensionCode_not_ends_with?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soTerritoryCode_not?: Maybe<String>;
  soTerritoryCode_in?: Maybe<String[] | String>;
  soTerritoryCode_not_in?: Maybe<String[] | String>;
  soTerritoryCode_lt?: Maybe<String>;
  soTerritoryCode_lte?: Maybe<String>;
  soTerritoryCode_gt?: Maybe<String>;
  soTerritoryCode_gte?: Maybe<String>;
  soTerritoryCode_contains?: Maybe<String>;
  soTerritoryCode_not_contains?: Maybe<String>;
  soTerritoryCode_starts_with?: Maybe<String>;
  soTerritoryCode_not_starts_with?: Maybe<String>;
  soTerritoryCode_ends_with?: Maybe<String>;
  soTerritoryCode_not_ends_with?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderDate_not?: Maybe<String>;
  soOrderDate_in?: Maybe<String[] | String>;
  soOrderDate_not_in?: Maybe<String[] | String>;
  soOrderDate_lt?: Maybe<String>;
  soOrderDate_lte?: Maybe<String>;
  soOrderDate_gt?: Maybe<String>;
  soOrderDate_gte?: Maybe<String>;
  soOrderDate_contains?: Maybe<String>;
  soOrderDate_not_contains?: Maybe<String>;
  soOrderDate_starts_with?: Maybe<String>;
  soOrderDate_not_starts_with?: Maybe<String>;
  soOrderDate_ends_with?: Maybe<String>;
  soOrderDate_not_ends_with?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soOrderTime_not?: Maybe<String>;
  soOrderTime_in?: Maybe<String[] | String>;
  soOrderTime_not_in?: Maybe<String[] | String>;
  soOrderTime_lt?: Maybe<String>;
  soOrderTime_lte?: Maybe<String>;
  soOrderTime_gt?: Maybe<String>;
  soOrderTime_gte?: Maybe<String>;
  soOrderTime_contains?: Maybe<String>;
  soOrderTime_not_contains?: Maybe<String>;
  soOrderTime_starts_with?: Maybe<String>;
  soOrderTime_not_starts_with?: Maybe<String>;
  soOrderTime_ends_with?: Maybe<String>;
  soOrderTime_not_ends_with?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soBudgetHours_not?: Maybe<Float>;
  soBudgetHours_in?: Maybe<Float[] | Float>;
  soBudgetHours_not_in?: Maybe<Float[] | Float>;
  soBudgetHours_lt?: Maybe<Float>;
  soBudgetHours_lte?: Maybe<Float>;
  soBudgetHours_gt?: Maybe<Float>;
  soBudgetHours_gte?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soExpectedHours_not?: Maybe<Float>;
  soExpectedHours_in?: Maybe<Float[] | Float>;
  soExpectedHours_not_in?: Maybe<Float[] | Float>;
  soExpectedHours_lt?: Maybe<Float>;
  soExpectedHours_lte?: Maybe<Float>;
  soExpectedHours_gt?: Maybe<Float>;
  soExpectedHours_gte?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soDurationTime_not?: Maybe<Float>;
  soDurationTime_in?: Maybe<Float[] | Float>;
  soDurationTime_not_in?: Maybe<Float[] | Float>;
  soDurationTime_lt?: Maybe<Float>;
  soDurationTime_lte?: Maybe<Float>;
  soDurationTime_gt?: Maybe<Float>;
  soDurationTime_gte?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soIsFirmPlanned_not?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarDate_not?: Maybe<String>;
  soStarDate_in?: Maybe<String[] | String>;
  soStarDate_not_in?: Maybe<String[] | String>;
  soStarDate_lt?: Maybe<String>;
  soStarDate_lte?: Maybe<String>;
  soStarDate_gt?: Maybe<String>;
  soStarDate_gte?: Maybe<String>;
  soStarDate_contains?: Maybe<String>;
  soStarDate_not_contains?: Maybe<String>;
  soStarDate_starts_with?: Maybe<String>;
  soStarDate_not_starts_with?: Maybe<String>;
  soStarDate_ends_with?: Maybe<String>;
  soStarDate_not_ends_with?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soStarTime_not?: Maybe<String>;
  soStarTime_in?: Maybe<String[] | String>;
  soStarTime_not_in?: Maybe<String[] | String>;
  soStarTime_lt?: Maybe<String>;
  soStarTime_lte?: Maybe<String>;
  soStarTime_gt?: Maybe<String>;
  soStarTime_gte?: Maybe<String>;
  soStarTime_contains?: Maybe<String>;
  soStarTime_not_contains?: Maybe<String>;
  soStarTime_starts_with?: Maybe<String>;
  soStarTime_not_starts_with?: Maybe<String>;
  soStarTime_ends_with?: Maybe<String>;
  soStarTime_not_ends_with?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndDate_not?: Maybe<String>;
  soEndDate_in?: Maybe<String[] | String>;
  soEndDate_not_in?: Maybe<String[] | String>;
  soEndDate_lt?: Maybe<String>;
  soEndDate_lte?: Maybe<String>;
  soEndDate_gt?: Maybe<String>;
  soEndDate_gte?: Maybe<String>;
  soEndDate_contains?: Maybe<String>;
  soEndDate_not_contains?: Maybe<String>;
  soEndDate_starts_with?: Maybe<String>;
  soEndDate_not_starts_with?: Maybe<String>;
  soEndDate_ends_with?: Maybe<String>;
  soEndDate_not_ends_with?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soEndTime_not?: Maybe<String>;
  soEndTime_in?: Maybe<String[] | String>;
  soEndTime_not_in?: Maybe<String[] | String>;
  soEndTime_lt?: Maybe<String>;
  soEndTime_lte?: Maybe<String>;
  soEndTime_gt?: Maybe<String>;
  soEndTime_gte?: Maybe<String>;
  soEndTime_contains?: Maybe<String>;
  soEndTime_not_contains?: Maybe<String>;
  soEndTime_starts_with?: Maybe<String>;
  soEndTime_not_starts_with?: Maybe<String>;
  soEndTime_ends_with?: Maybe<String>;
  soEndTime_not_ends_with?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soPriority_not?: Maybe<PriorityType>;
  soPriority_in?: Maybe<PriorityType[] | PriorityType>;
  soPriority_not_in?: Maybe<PriorityType[] | PriorityType>;
  soNextDeadline?: Maybe<String>;
  soNextDeadline_not?: Maybe<String>;
  soNextDeadline_in?: Maybe<String[] | String>;
  soNextDeadline_not_in?: Maybe<String[] | String>;
  soNextDeadline_lt?: Maybe<String>;
  soNextDeadline_lte?: Maybe<String>;
  soNextDeadline_gt?: Maybe<String>;
  soNextDeadline_gte?: Maybe<String>;
  soNextDeadline_contains?: Maybe<String>;
  soNextDeadline_not_contains?: Maybe<String>;
  soNextDeadline_starts_with?: Maybe<String>;
  soNextDeadline_not_starts_with?: Maybe<String>;
  soNextDeadline_ends_with?: Maybe<String>;
  soNextDeadline_not_ends_with?: Maybe<String>;
  soStatus?: Maybe<String>;
  soStatus_not?: Maybe<String>;
  soStatus_in?: Maybe<String[] | String>;
  soStatus_not_in?: Maybe<String[] | String>;
  soStatus_lt?: Maybe<String>;
  soStatus_lte?: Maybe<String>;
  soStatus_gt?: Maybe<String>;
  soStatus_gte?: Maybe<String>;
  soStatus_contains?: Maybe<String>;
  soStatus_not_contains?: Maybe<String>;
  soStatus_starts_with?: Maybe<String>;
  soStatus_not_starts_with?: Maybe<String>;
  soStatus_ends_with?: Maybe<String>;
  soStatus_not_ends_with?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soActualReferencePoint_not?: Maybe<String>;
  soActualReferencePoint_in?: Maybe<String[] | String>;
  soActualReferencePoint_not_in?: Maybe<String[] | String>;
  soActualReferencePoint_lt?: Maybe<String>;
  soActualReferencePoint_lte?: Maybe<String>;
  soActualReferencePoint_gt?: Maybe<String>;
  soActualReferencePoint_gte?: Maybe<String>;
  soActualReferencePoint_contains?: Maybe<String>;
  soActualReferencePoint_not_contains?: Maybe<String>;
  soActualReferencePoint_starts_with?: Maybe<String>;
  soActualReferencePoint_not_starts_with?: Maybe<String>;
  soActualReferencePoint_ends_with?: Maybe<String>;
  soActualReferencePoint_not_ends_with?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soOrderManager_not?: Maybe<String>;
  soOrderManager_in?: Maybe<String[] | String>;
  soOrderManager_not_in?: Maybe<String[] | String>;
  soOrderManager_lt?: Maybe<String>;
  soOrderManager_lte?: Maybe<String>;
  soOrderManager_gt?: Maybe<String>;
  soOrderManager_gte?: Maybe<String>;
  soOrderManager_contains?: Maybe<String>;
  soOrderManager_not_contains?: Maybe<String>;
  soOrderManager_starts_with?: Maybe<String>;
  soOrderManager_not_starts_with?: Maybe<String>;
  soOrderManager_ends_with?: Maybe<String>;
  soOrderManager_not_ends_with?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soAssignedTo_not?: Maybe<String>;
  soAssignedTo_in?: Maybe<String[] | String>;
  soAssignedTo_not_in?: Maybe<String[] | String>;
  soAssignedTo_lt?: Maybe<String>;
  soAssignedTo_lte?: Maybe<String>;
  soAssignedTo_gt?: Maybe<String>;
  soAssignedTo_gte?: Maybe<String>;
  soAssignedTo_contains?: Maybe<String>;
  soAssignedTo_not_contains?: Maybe<String>;
  soAssignedTo_starts_with?: Maybe<String>;
  soAssignedTo_not_starts_with?: Maybe<String>;
  soAssignedTo_ends_with?: Maybe<String>;
  soAssignedTo_not_ends_with?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  soEmployeeCode_not?: Maybe<String>;
  soEmployeeCode_in?: Maybe<String[] | String>;
  soEmployeeCode_not_in?: Maybe<String[] | String>;
  soEmployeeCode_lt?: Maybe<String>;
  soEmployeeCode_lte?: Maybe<String>;
  soEmployeeCode_gt?: Maybe<String>;
  soEmployeeCode_gte?: Maybe<String>;
  soEmployeeCode_contains?: Maybe<String>;
  soEmployeeCode_not_contains?: Maybe<String>;
  soEmployeeCode_starts_with?: Maybe<String>;
  soEmployeeCode_not_starts_with?: Maybe<String>;
  soEmployeeCode_ends_with?: Maybe<String>;
  soEmployeeCode_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  detectorType?: Maybe<String>;
  detectorType_not?: Maybe<String>;
  detectorType_in?: Maybe<String[] | String>;
  detectorType_not_in?: Maybe<String[] | String>;
  detectorType_lt?: Maybe<String>;
  detectorType_lte?: Maybe<String>;
  detectorType_gt?: Maybe<String>;
  detectorType_gte?: Maybe<String>;
  detectorType_contains?: Maybe<String>;
  detectorType_not_contains?: Maybe<String>;
  detectorType_starts_with?: Maybe<String>;
  detectorType_not_starts_with?: Maybe<String>;
  detectorType_ends_with?: Maybe<String>;
  detectorType_not_ends_with?: Maybe<String>;
  notInDakota?: Maybe<String>;
  notInDakota_not?: Maybe<String>;
  notInDakota_in?: Maybe<String[] | String>;
  notInDakota_not_in?: Maybe<String[] | String>;
  notInDakota_lt?: Maybe<String>;
  notInDakota_lte?: Maybe<String>;
  notInDakota_gt?: Maybe<String>;
  notInDakota_gte?: Maybe<String>;
  notInDakota_contains?: Maybe<String>;
  notInDakota_not_contains?: Maybe<String>;
  notInDakota_starts_with?: Maybe<String>;
  notInDakota_not_starts_with?: Maybe<String>;
  notInDakota_ends_with?: Maybe<String>;
  notInDakota_not_ends_with?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soServiceType_not?: Maybe<String>;
  soServiceType_in?: Maybe<String[] | String>;
  soServiceType_not_in?: Maybe<String[] | String>;
  soServiceType_lt?: Maybe<String>;
  soServiceType_lte?: Maybe<String>;
  soServiceType_gt?: Maybe<String>;
  soServiceType_gte?: Maybe<String>;
  soServiceType_contains?: Maybe<String>;
  soServiceType_not_contains?: Maybe<String>;
  soServiceType_starts_with?: Maybe<String>;
  soServiceType_not_starts_with?: Maybe<String>;
  soServiceType_ends_with?: Maybe<String>;
  soServiceType_not_ends_with?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soInvoicedPrice_not?: Maybe<Float>;
  soInvoicedPrice_in?: Maybe<Float[] | Float>;
  soInvoicedPrice_not_in?: Maybe<Float[] | Float>;
  soInvoicedPrice_lt?: Maybe<Float>;
  soInvoicedPrice_lte?: Maybe<Float>;
  soInvoicedPrice_gt?: Maybe<Float>;
  soInvoicedPrice_gte?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soServicePackage_not?: Maybe<String>;
  soServicePackage_in?: Maybe<String[] | String>;
  soServicePackage_not_in?: Maybe<String[] | String>;
  soServicePackage_lt?: Maybe<String>;
  soServicePackage_lte?: Maybe<String>;
  soServicePackage_gt?: Maybe<String>;
  soServicePackage_gte?: Maybe<String>;
  soServicePackage_contains?: Maybe<String>;
  soServicePackage_not_contains?: Maybe<String>;
  soServicePackage_starts_with?: Maybe<String>;
  soServicePackage_not_starts_with?: Maybe<String>;
  soServicePackage_ends_with?: Maybe<String>;
  soServicePackage_not_ends_with?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soOrderAmount_not?: Maybe<Int>;
  soOrderAmount_in?: Maybe<Int[] | Int>;
  soOrderAmount_not_in?: Maybe<Int[] | Int>;
  soOrderAmount_lt?: Maybe<Int>;
  soOrderAmount_lte?: Maybe<Int>;
  soOrderAmount_gt?: Maybe<Int>;
  soOrderAmount_gte?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soServiceControlPeriodDate_not?: Maybe<String>;
  soServiceControlPeriodDate_in?: Maybe<String[] | String>;
  soServiceControlPeriodDate_not_in?: Maybe<String[] | String>;
  soServiceControlPeriodDate_lt?: Maybe<String>;
  soServiceControlPeriodDate_lte?: Maybe<String>;
  soServiceControlPeriodDate_gt?: Maybe<String>;
  soServiceControlPeriodDate_gte?: Maybe<String>;
  soServiceControlPeriodDate_contains?: Maybe<String>;
  soServiceControlPeriodDate_not_contains?: Maybe<String>;
  soServiceControlPeriodDate_starts_with?: Maybe<String>;
  soServiceControlPeriodDate_not_starts_with?: Maybe<String>;
  soServiceControlPeriodDate_ends_with?: Maybe<String>;
  soServiceControlPeriodDate_not_ends_with?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soIsRemoteControl_not?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soCountryCode_not?: Maybe<String>;
  soCountryCode_in?: Maybe<String[] | String>;
  soCountryCode_not_in?: Maybe<String[] | String>;
  soCountryCode_lt?: Maybe<String>;
  soCountryCode_lte?: Maybe<String>;
  soCountryCode_gt?: Maybe<String>;
  soCountryCode_gte?: Maybe<String>;
  soCountryCode_contains?: Maybe<String>;
  soCountryCode_not_contains?: Maybe<String>;
  soCountryCode_starts_with?: Maybe<String>;
  soCountryCode_not_starts_with?: Maybe<String>;
  soCountryCode_ends_with?: Maybe<String>;
  soCountryCode_not_ends_with?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemDescription_not?: Maybe<String>;
  soProblemDescription_in?: Maybe<String[] | String>;
  soProblemDescription_not_in?: Maybe<String[] | String>;
  soProblemDescription_lt?: Maybe<String>;
  soProblemDescription_lte?: Maybe<String>;
  soProblemDescription_gt?: Maybe<String>;
  soProblemDescription_gte?: Maybe<String>;
  soProblemDescription_contains?: Maybe<String>;
  soProblemDescription_not_contains?: Maybe<String>;
  soProblemDescription_starts_with?: Maybe<String>;
  soProblemDescription_not_starts_with?: Maybe<String>;
  soProblemDescription_ends_with?: Maybe<String>;
  soProblemDescription_not_ends_with?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemCause_not?: Maybe<String>;
  soProblemCause_in?: Maybe<String[] | String>;
  soProblemCause_not_in?: Maybe<String[] | String>;
  soProblemCause_lt?: Maybe<String>;
  soProblemCause_lte?: Maybe<String>;
  soProblemCause_gt?: Maybe<String>;
  soProblemCause_gte?: Maybe<String>;
  soProblemCause_contains?: Maybe<String>;
  soProblemCause_not_contains?: Maybe<String>;
  soProblemCause_starts_with?: Maybe<String>;
  soProblemCause_not_starts_with?: Maybe<String>;
  soProblemCause_ends_with?: Maybe<String>;
  soProblemCause_not_ends_with?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  soProblemSolution_not?: Maybe<String>;
  soProblemSolution_in?: Maybe<String[] | String>;
  soProblemSolution_not_in?: Maybe<String[] | String>;
  soProblemSolution_lt?: Maybe<String>;
  soProblemSolution_lte?: Maybe<String>;
  soProblemSolution_gt?: Maybe<String>;
  soProblemSolution_gte?: Maybe<String>;
  soProblemSolution_contains?: Maybe<String>;
  soProblemSolution_not_contains?: Maybe<String>;
  soProblemSolution_starts_with?: Maybe<String>;
  soProblemSolution_not_starts_with?: Maybe<String>;
  soProblemSolution_ends_with?: Maybe<String>;
  soProblemSolution_not_ends_with?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  firstDeadline_not?: Maybe<String>;
  firstDeadline_in?: Maybe<String[] | String>;
  firstDeadline_not_in?: Maybe<String[] | String>;
  firstDeadline_lt?: Maybe<String>;
  firstDeadline_lte?: Maybe<String>;
  firstDeadline_gt?: Maybe<String>;
  firstDeadline_gte?: Maybe<String>;
  firstDeadline_contains?: Maybe<String>;
  firstDeadline_not_contains?: Maybe<String>;
  firstDeadline_starts_with?: Maybe<String>;
  firstDeadline_not_starts_with?: Maybe<String>;
  firstDeadline_ends_with?: Maybe<String>;
  firstDeadline_not_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  gdbServiceOrderStartDate_not?: Maybe<String>;
  gdbServiceOrderStartDate_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_lt?: Maybe<String>;
  gdbServiceOrderStartDate_lte?: Maybe<String>;
  gdbServiceOrderStartDate_gt?: Maybe<String>;
  gdbServiceOrderStartDate_gte?: Maybe<String>;
  gdbServiceOrderStartDate_contains?: Maybe<String>;
  gdbServiceOrderStartDate_not_contains?: Maybe<String>;
  gdbServiceOrderStartDate_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_ends_with?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  dateExecuted_not?: Maybe<String>;
  dateExecuted_in?: Maybe<String[] | String>;
  dateExecuted_not_in?: Maybe<String[] | String>;
  dateExecuted_lt?: Maybe<String>;
  dateExecuted_lte?: Maybe<String>;
  dateExecuted_gt?: Maybe<String>;
  dateExecuted_gte?: Maybe<String>;
  dateExecuted_contains?: Maybe<String>;
  dateExecuted_not_contains?: Maybe<String>;
  dateExecuted_starts_with?: Maybe<String>;
  dateExecuted_not_starts_with?: Maybe<String>;
  dateExecuted_ends_with?: Maybe<String>;
  dateExecuted_not_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not?: Maybe<String>;
  gdbServiceOrderInvoicedDate_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_lt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_lte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_ends_with?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  isExportToFSA2_not?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  soExportToFSADate_not?: Maybe<String>;
  soExportToFSADate_in?: Maybe<String[] | String>;
  soExportToFSADate_not_in?: Maybe<String[] | String>;
  soExportToFSADate_lt?: Maybe<String>;
  soExportToFSADate_lte?: Maybe<String>;
  soExportToFSADate_gt?: Maybe<String>;
  soExportToFSADate_gte?: Maybe<String>;
  soExportToFSADate_contains?: Maybe<String>;
  soExportToFSADate_not_contains?: Maybe<String>;
  soExportToFSADate_starts_with?: Maybe<String>;
  soExportToFSADate_not_starts_with?: Maybe<String>;
  soExportToFSADate_ends_with?: Maybe<String>;
  soExportToFSADate_not_ends_with?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  hasSignature_not?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  planAhead_not?: Maybe<String>;
  planAhead_in?: Maybe<String[] | String>;
  planAhead_not_in?: Maybe<String[] | String>;
  planAhead_lt?: Maybe<String>;
  planAhead_lte?: Maybe<String>;
  planAhead_gt?: Maybe<String>;
  planAhead_gte?: Maybe<String>;
  planAhead_contains?: Maybe<String>;
  planAhead_not_contains?: Maybe<String>;
  planAhead_starts_with?: Maybe<String>;
  planAhead_not_starts_with?: Maybe<String>;
  planAhead_ends_with?: Maybe<String>;
  planAhead_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  orderIsSent_not?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  isExportBlocked_not?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  updatedByUserId_not?: Maybe<String>;
  updatedByUserId_in?: Maybe<String[] | String>;
  updatedByUserId_not_in?: Maybe<String[] | String>;
  updatedByUserId_lt?: Maybe<String>;
  updatedByUserId_lte?: Maybe<String>;
  updatedByUserId_gt?: Maybe<String>;
  updatedByUserId_gte?: Maybe<String>;
  updatedByUserId_contains?: Maybe<String>;
  updatedByUserId_not_contains?: Maybe<String>;
  updatedByUserId_starts_with?: Maybe<String>;
  updatedByUserId_not_starts_with?: Maybe<String>;
  updatedByUserId_ends_with?: Maybe<String>;
  updatedByUserId_not_ends_with?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  activityLog?: Maybe<ActivityLogWhereInput>;
  moment?: Maybe<MomentWhereInput>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
  OR?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
  NOT?: Maybe<WorkOrderWhereInput[] | WorkOrderWhereInput>;
}

export interface ServiceOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  globalId?: Maybe<String>;
  globalId_not?: Maybe<String>;
  globalId_in?: Maybe<String[] | String>;
  globalId_not_in?: Maybe<String[] | String>;
  globalId_lt?: Maybe<String>;
  globalId_lte?: Maybe<String>;
  globalId_gt?: Maybe<String>;
  globalId_gte?: Maybe<String>;
  globalId_contains?: Maybe<String>;
  globalId_not_contains?: Maybe<String>;
  globalId_starts_with?: Maybe<String>;
  globalId_not_starts_with?: Maybe<String>;
  globalId_ends_with?: Maybe<String>;
  globalId_not_ends_with?: Maybe<String>;
  conceptId?: Maybe<String>;
  conceptId_not?: Maybe<String>;
  conceptId_in?: Maybe<String[] | String>;
  conceptId_not_in?: Maybe<String[] | String>;
  conceptId_lt?: Maybe<String>;
  conceptId_lte?: Maybe<String>;
  conceptId_gt?: Maybe<String>;
  conceptId_gte?: Maybe<String>;
  conceptId_contains?: Maybe<String>;
  conceptId_not_contains?: Maybe<String>;
  conceptId_starts_with?: Maybe<String>;
  conceptId_not_starts_with?: Maybe<String>;
  conceptId_ends_with?: Maybe<String>;
  conceptId_not_ends_with?: Maybe<String>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  callerCode?: Maybe<String>;
  callerCode_not?: Maybe<String>;
  callerCode_in?: Maybe<String[] | String>;
  callerCode_not_in?: Maybe<String[] | String>;
  callerCode_lt?: Maybe<String>;
  callerCode_lte?: Maybe<String>;
  callerCode_gt?: Maybe<String>;
  callerCode_gte?: Maybe<String>;
  callerCode_contains?: Maybe<String>;
  callerCode_not_contains?: Maybe<String>;
  callerCode_starts_with?: Maybe<String>;
  callerCode_not_starts_with?: Maybe<String>;
  callerCode_ends_with?: Maybe<String>;
  callerCode_not_ends_with?: Maybe<String>;
  orderType?: Maybe<String>;
  orderType_not?: Maybe<String>;
  orderType_in?: Maybe<String[] | String>;
  orderType_not_in?: Maybe<String[] | String>;
  orderType_lt?: Maybe<String>;
  orderType_lte?: Maybe<String>;
  orderType_gt?: Maybe<String>;
  orderType_gte?: Maybe<String>;
  orderType_contains?: Maybe<String>;
  orderType_not_contains?: Maybe<String>;
  orderType_starts_with?: Maybe<String>;
  orderType_not_starts_with?: Maybe<String>;
  orderType_ends_with?: Maybe<String>;
  orderType_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  ownerCode?: Maybe<String>;
  ownerCode_not?: Maybe<String>;
  ownerCode_in?: Maybe<String[] | String>;
  ownerCode_not_in?: Maybe<String[] | String>;
  ownerCode_lt?: Maybe<String>;
  ownerCode_lte?: Maybe<String>;
  ownerCode_gt?: Maybe<String>;
  ownerCode_gte?: Maybe<String>;
  ownerCode_contains?: Maybe<String>;
  ownerCode_not_contains?: Maybe<String>;
  ownerCode_starts_with?: Maybe<String>;
  ownerCode_not_starts_with?: Maybe<String>;
  ownerCode_ends_with?: Maybe<String>;
  ownerCode_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  customerName?: Maybe<String>;
  customerName_not?: Maybe<String>;
  customerName_in?: Maybe<String[] | String>;
  customerName_not_in?: Maybe<String[] | String>;
  customerName_lt?: Maybe<String>;
  customerName_lte?: Maybe<String>;
  customerName_gt?: Maybe<String>;
  customerName_gte?: Maybe<String>;
  customerName_contains?: Maybe<String>;
  customerName_not_contains?: Maybe<String>;
  customerName_starts_with?: Maybe<String>;
  customerName_not_starts_with?: Maybe<String>;
  customerName_ends_with?: Maybe<String>;
  customerName_not_ends_with?: Maybe<String>;
  billingCode?: Maybe<String>;
  billingCode_not?: Maybe<String>;
  billingCode_in?: Maybe<String[] | String>;
  billingCode_not_in?: Maybe<String[] | String>;
  billingCode_lt?: Maybe<String>;
  billingCode_lte?: Maybe<String>;
  billingCode_gt?: Maybe<String>;
  billingCode_gte?: Maybe<String>;
  billingCode_contains?: Maybe<String>;
  billingCode_not_contains?: Maybe<String>;
  billingCode_starts_with?: Maybe<String>;
  billingCode_not_starts_with?: Maybe<String>;
  billingCode_ends_with?: Maybe<String>;
  billingCode_not_ends_with?: Maybe<String>;
  customerFeature?: Maybe<String>;
  customerFeature_not?: Maybe<String>;
  customerFeature_in?: Maybe<String[] | String>;
  customerFeature_not_in?: Maybe<String[] | String>;
  customerFeature_lt?: Maybe<String>;
  customerFeature_lte?: Maybe<String>;
  customerFeature_gt?: Maybe<String>;
  customerFeature_gte?: Maybe<String>;
  customerFeature_contains?: Maybe<String>;
  customerFeature_not_contains?: Maybe<String>;
  customerFeature_starts_with?: Maybe<String>;
  customerFeature_not_starts_with?: Maybe<String>;
  customerFeature_ends_with?: Maybe<String>;
  customerFeature_not_ends_with?: Maybe<String>;
  reference?: Maybe<String>;
  reference_not?: Maybe<String>;
  reference_in?: Maybe<String[] | String>;
  reference_not_in?: Maybe<String[] | String>;
  reference_lt?: Maybe<String>;
  reference_lte?: Maybe<String>;
  reference_gt?: Maybe<String>;
  reference_gte?: Maybe<String>;
  reference_contains?: Maybe<String>;
  reference_not_contains?: Maybe<String>;
  reference_starts_with?: Maybe<String>;
  reference_not_starts_with?: Maybe<String>;
  reference_ends_with?: Maybe<String>;
  reference_not_ends_with?: Maybe<String>;
  commissionDate?: Maybe<String>;
  commissionDate_not?: Maybe<String>;
  commissionDate_in?: Maybe<String[] | String>;
  commissionDate_not_in?: Maybe<String[] | String>;
  commissionDate_lt?: Maybe<String>;
  commissionDate_lte?: Maybe<String>;
  commissionDate_gt?: Maybe<String>;
  commissionDate_gte?: Maybe<String>;
  commissionDate_contains?: Maybe<String>;
  commissionDate_not_contains?: Maybe<String>;
  commissionDate_starts_with?: Maybe<String>;
  commissionDate_not_starts_with?: Maybe<String>;
  commissionDate_ends_with?: Maybe<String>;
  commissionDate_not_ends_with?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  serviceLocationCode_not?: Maybe<String>;
  serviceLocationCode_in?: Maybe<String[] | String>;
  serviceLocationCode_not_in?: Maybe<String[] | String>;
  serviceLocationCode_lt?: Maybe<String>;
  serviceLocationCode_lte?: Maybe<String>;
  serviceLocationCode_gt?: Maybe<String>;
  serviceLocationCode_gte?: Maybe<String>;
  serviceLocationCode_contains?: Maybe<String>;
  serviceLocationCode_not_contains?: Maybe<String>;
  serviceLocationCode_starts_with?: Maybe<String>;
  serviceLocationCode_not_starts_with?: Maybe<String>;
  serviceLocationCode_ends_with?: Maybe<String>;
  serviceLocationCode_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceType_not?: Maybe<String>;
  sourceType_in?: Maybe<String[] | String>;
  sourceType_not_in?: Maybe<String[] | String>;
  sourceType_lt?: Maybe<String>;
  sourceType_lte?: Maybe<String>;
  sourceType_gt?: Maybe<String>;
  sourceType_gte?: Maybe<String>;
  sourceType_contains?: Maybe<String>;
  sourceType_not_contains?: Maybe<String>;
  sourceType_starts_with?: Maybe<String>;
  sourceType_not_starts_with?: Maybe<String>;
  sourceType_ends_with?: Maybe<String>;
  sourceType_not_ends_with?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  globalDimensionCode_not?: Maybe<String>;
  globalDimensionCode_in?: Maybe<String[] | String>;
  globalDimensionCode_not_in?: Maybe<String[] | String>;
  globalDimensionCode_lt?: Maybe<String>;
  globalDimensionCode_lte?: Maybe<String>;
  globalDimensionCode_gt?: Maybe<String>;
  globalDimensionCode_gte?: Maybe<String>;
  globalDimensionCode_contains?: Maybe<String>;
  globalDimensionCode_not_contains?: Maybe<String>;
  globalDimensionCode_starts_with?: Maybe<String>;
  globalDimensionCode_not_starts_with?: Maybe<String>;
  globalDimensionCode_ends_with?: Maybe<String>;
  globalDimensionCode_not_ends_with?: Maybe<String>;
  territoryCode?: Maybe<String>;
  territoryCode_not?: Maybe<String>;
  territoryCode_in?: Maybe<String[] | String>;
  territoryCode_not_in?: Maybe<String[] | String>;
  territoryCode_lt?: Maybe<String>;
  territoryCode_lte?: Maybe<String>;
  territoryCode_gt?: Maybe<String>;
  territoryCode_gte?: Maybe<String>;
  territoryCode_contains?: Maybe<String>;
  territoryCode_not_contains?: Maybe<String>;
  territoryCode_starts_with?: Maybe<String>;
  territoryCode_not_starts_with?: Maybe<String>;
  territoryCode_ends_with?: Maybe<String>;
  territoryCode_not_ends_with?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderDate_not?: Maybe<String>;
  orderDate_in?: Maybe<String[] | String>;
  orderDate_not_in?: Maybe<String[] | String>;
  orderDate_lt?: Maybe<String>;
  orderDate_lte?: Maybe<String>;
  orderDate_gt?: Maybe<String>;
  orderDate_gte?: Maybe<String>;
  orderDate_contains?: Maybe<String>;
  orderDate_not_contains?: Maybe<String>;
  orderDate_starts_with?: Maybe<String>;
  orderDate_not_starts_with?: Maybe<String>;
  orderDate_ends_with?: Maybe<String>;
  orderDate_not_ends_with?: Maybe<String>;
  orderTime?: Maybe<String>;
  orderTime_not?: Maybe<String>;
  orderTime_in?: Maybe<String[] | String>;
  orderTime_not_in?: Maybe<String[] | String>;
  orderTime_lt?: Maybe<String>;
  orderTime_lte?: Maybe<String>;
  orderTime_gt?: Maybe<String>;
  orderTime_gte?: Maybe<String>;
  orderTime_contains?: Maybe<String>;
  orderTime_not_contains?: Maybe<String>;
  orderTime_starts_with?: Maybe<String>;
  orderTime_not_starts_with?: Maybe<String>;
  orderTime_ends_with?: Maybe<String>;
  orderTime_not_ends_with?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  budgetHours_not?: Maybe<Float>;
  budgetHours_in?: Maybe<Float[] | Float>;
  budgetHours_not_in?: Maybe<Float[] | Float>;
  budgetHours_lt?: Maybe<Float>;
  budgetHours_lte?: Maybe<Float>;
  budgetHours_gt?: Maybe<Float>;
  budgetHours_gte?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  expectedHours_not?: Maybe<Float>;
  expectedHours_in?: Maybe<Float[] | Float>;
  expectedHours_not_in?: Maybe<Float[] | Float>;
  expectedHours_lt?: Maybe<Float>;
  expectedHours_lte?: Maybe<Float>;
  expectedHours_gt?: Maybe<Float>;
  expectedHours_gte?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  durationTime_not?: Maybe<Float>;
  durationTime_in?: Maybe<Float[] | Float>;
  durationTime_not_in?: Maybe<Float[] | Float>;
  durationTime_lt?: Maybe<Float>;
  durationTime_lte?: Maybe<Float>;
  durationTime_gt?: Maybe<Float>;
  durationTime_gte?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  isFirmPlanned_not?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  priority_not?: Maybe<PriorityType>;
  priority_in?: Maybe<PriorityType[] | PriorityType>;
  priority_not_in?: Maybe<PriorityType[] | PriorityType>;
  nextDeadline?: Maybe<String>;
  nextDeadline_not?: Maybe<String>;
  nextDeadline_in?: Maybe<String[] | String>;
  nextDeadline_not_in?: Maybe<String[] | String>;
  nextDeadline_lt?: Maybe<String>;
  nextDeadline_lte?: Maybe<String>;
  nextDeadline_gt?: Maybe<String>;
  nextDeadline_gte?: Maybe<String>;
  nextDeadline_contains?: Maybe<String>;
  nextDeadline_not_contains?: Maybe<String>;
  nextDeadline_starts_with?: Maybe<String>;
  nextDeadline_not_starts_with?: Maybe<String>;
  nextDeadline_ends_with?: Maybe<String>;
  nextDeadline_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePoint_not?: Maybe<String>;
  actualReferencePoint_in?: Maybe<String[] | String>;
  actualReferencePoint_not_in?: Maybe<String[] | String>;
  actualReferencePoint_lt?: Maybe<String>;
  actualReferencePoint_lte?: Maybe<String>;
  actualReferencePoint_gt?: Maybe<String>;
  actualReferencePoint_gte?: Maybe<String>;
  actualReferencePoint_contains?: Maybe<String>;
  actualReferencePoint_not_contains?: Maybe<String>;
  actualReferencePoint_starts_with?: Maybe<String>;
  actualReferencePoint_not_starts_with?: Maybe<String>;
  actualReferencePoint_ends_with?: Maybe<String>;
  actualReferencePoint_not_ends_with?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  actualReferencePointDescription_not?: Maybe<String>;
  actualReferencePointDescription_in?: Maybe<String[] | String>;
  actualReferencePointDescription_not_in?: Maybe<String[] | String>;
  actualReferencePointDescription_lt?: Maybe<String>;
  actualReferencePointDescription_lte?: Maybe<String>;
  actualReferencePointDescription_gt?: Maybe<String>;
  actualReferencePointDescription_gte?: Maybe<String>;
  actualReferencePointDescription_contains?: Maybe<String>;
  actualReferencePointDescription_not_contains?: Maybe<String>;
  actualReferencePointDescription_starts_with?: Maybe<String>;
  actualReferencePointDescription_not_starts_with?: Maybe<String>;
  actualReferencePointDescription_ends_with?: Maybe<String>;
  actualReferencePointDescription_not_ends_with?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  employeeName?: Maybe<String>;
  employeeName_not?: Maybe<String>;
  employeeName_in?: Maybe<String[] | String>;
  employeeName_not_in?: Maybe<String[] | String>;
  employeeName_lt?: Maybe<String>;
  employeeName_lte?: Maybe<String>;
  employeeName_gt?: Maybe<String>;
  employeeName_gte?: Maybe<String>;
  employeeName_contains?: Maybe<String>;
  employeeName_not_contains?: Maybe<String>;
  employeeName_starts_with?: Maybe<String>;
  employeeName_not_starts_with?: Maybe<String>;
  employeeName_ends_with?: Maybe<String>;
  employeeName_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  detectorType?: Maybe<String>;
  detectorType_not?: Maybe<String>;
  detectorType_in?: Maybe<String[] | String>;
  detectorType_not_in?: Maybe<String[] | String>;
  detectorType_lt?: Maybe<String>;
  detectorType_lte?: Maybe<String>;
  detectorType_gt?: Maybe<String>;
  detectorType_gte?: Maybe<String>;
  detectorType_contains?: Maybe<String>;
  detectorType_not_contains?: Maybe<String>;
  detectorType_starts_with?: Maybe<String>;
  detectorType_not_starts_with?: Maybe<String>;
  detectorType_ends_with?: Maybe<String>;
  detectorType_not_ends_with?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  notInDakota_not?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace_not?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  gdbServiceOrderKTO_not?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  ktoFiture_not?: Maybe<Float>;
  ktoFiture_in?: Maybe<Float[] | Float>;
  ktoFiture_not_in?: Maybe<Float[] | Float>;
  ktoFiture_lt?: Maybe<Float>;
  ktoFiture_lte?: Maybe<Float>;
  ktoFiture_gt?: Maybe<Float>;
  ktoFiture_gte?: Maybe<Float>;
  serviceType?: Maybe<String>;
  serviceType_not?: Maybe<String>;
  serviceType_in?: Maybe<String[] | String>;
  serviceType_not_in?: Maybe<String[] | String>;
  serviceType_lt?: Maybe<String>;
  serviceType_lte?: Maybe<String>;
  serviceType_gt?: Maybe<String>;
  serviceType_gte?: Maybe<String>;
  serviceType_contains?: Maybe<String>;
  serviceType_not_contains?: Maybe<String>;
  serviceType_starts_with?: Maybe<String>;
  serviceType_not_starts_with?: Maybe<String>;
  serviceType_ends_with?: Maybe<String>;
  serviceType_not_ends_with?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  invoicedPrice_not?: Maybe<Float>;
  invoicedPrice_in?: Maybe<Float[] | Float>;
  invoicedPrice_not_in?: Maybe<Float[] | Float>;
  invoicedPrice_lt?: Maybe<Float>;
  invoicedPrice_lte?: Maybe<Float>;
  invoicedPrice_gt?: Maybe<Float>;
  invoicedPrice_gte?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  orderAmount_not?: Maybe<Float>;
  orderAmount_in?: Maybe<Float[] | Float>;
  orderAmount_not_in?: Maybe<Float[] | Float>;
  orderAmount_lt?: Maybe<Float>;
  orderAmount_lte?: Maybe<Float>;
  orderAmount_gt?: Maybe<Float>;
  orderAmount_gte?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  serviceControlPeriodDate_not?: Maybe<String>;
  serviceControlPeriodDate_in?: Maybe<String[] | String>;
  serviceControlPeriodDate_not_in?: Maybe<String[] | String>;
  serviceControlPeriodDate_lt?: Maybe<String>;
  serviceControlPeriodDate_lte?: Maybe<String>;
  serviceControlPeriodDate_gt?: Maybe<String>;
  serviceControlPeriodDate_gte?: Maybe<String>;
  serviceControlPeriodDate_contains?: Maybe<String>;
  serviceControlPeriodDate_not_contains?: Maybe<String>;
  serviceControlPeriodDate_starts_with?: Maybe<String>;
  serviceControlPeriodDate_not_starts_with?: Maybe<String>;
  serviceControlPeriodDate_ends_with?: Maybe<String>;
  serviceControlPeriodDate_not_ends_with?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  isRemoteControl_not?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  firstDeadline_not?: Maybe<String>;
  firstDeadline_in?: Maybe<String[] | String>;
  firstDeadline_not_in?: Maybe<String[] | String>;
  firstDeadline_lt?: Maybe<String>;
  firstDeadline_lte?: Maybe<String>;
  firstDeadline_gt?: Maybe<String>;
  firstDeadline_gte?: Maybe<String>;
  firstDeadline_contains?: Maybe<String>;
  firstDeadline_not_contains?: Maybe<String>;
  firstDeadline_starts_with?: Maybe<String>;
  firstDeadline_not_starts_with?: Maybe<String>;
  firstDeadline_ends_with?: Maybe<String>;
  firstDeadline_not_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  gdbServiceOrderStartDate_not?: Maybe<String>;
  gdbServiceOrderStartDate_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_lt?: Maybe<String>;
  gdbServiceOrderStartDate_lte?: Maybe<String>;
  gdbServiceOrderStartDate_gt?: Maybe<String>;
  gdbServiceOrderStartDate_gte?: Maybe<String>;
  gdbServiceOrderStartDate_contains?: Maybe<String>;
  gdbServiceOrderStartDate_not_contains?: Maybe<String>;
  gdbServiceOrderStartDate_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_ends_with?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  dateExecuted_not?: Maybe<String>;
  dateExecuted_in?: Maybe<String[] | String>;
  dateExecuted_not_in?: Maybe<String[] | String>;
  dateExecuted_lt?: Maybe<String>;
  dateExecuted_lte?: Maybe<String>;
  dateExecuted_gt?: Maybe<String>;
  dateExecuted_gte?: Maybe<String>;
  dateExecuted_contains?: Maybe<String>;
  dateExecuted_not_contains?: Maybe<String>;
  dateExecuted_starts_with?: Maybe<String>;
  dateExecuted_not_starts_with?: Maybe<String>;
  dateExecuted_ends_with?: Maybe<String>;
  dateExecuted_not_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not?: Maybe<String>;
  gdbServiceOrderInvoicedDate_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_lt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_lte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_ends_with?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  isExportToFSA2_not?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  exportToFSADate_not?: Maybe<String>;
  exportToFSADate_in?: Maybe<String[] | String>;
  exportToFSADate_not_in?: Maybe<String[] | String>;
  exportToFSADate_lt?: Maybe<String>;
  exportToFSADate_lte?: Maybe<String>;
  exportToFSADate_gt?: Maybe<String>;
  exportToFSADate_gte?: Maybe<String>;
  exportToFSADate_contains?: Maybe<String>;
  exportToFSADate_not_contains?: Maybe<String>;
  exportToFSADate_starts_with?: Maybe<String>;
  exportToFSADate_not_starts_with?: Maybe<String>;
  exportToFSADate_ends_with?: Maybe<String>;
  exportToFSADate_not_ends_with?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  isSignatureHasValue_not?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  signedBy_not?: Maybe<String>;
  signedBy_in?: Maybe<String[] | String>;
  signedBy_not_in?: Maybe<String[] | String>;
  signedBy_lt?: Maybe<String>;
  signedBy_lte?: Maybe<String>;
  signedBy_gt?: Maybe<String>;
  signedBy_gte?: Maybe<String>;
  signedBy_contains?: Maybe<String>;
  signedBy_not_contains?: Maybe<String>;
  signedBy_starts_with?: Maybe<String>;
  signedBy_not_starts_with?: Maybe<String>;
  signedBy_ends_with?: Maybe<String>;
  signedBy_not_ends_with?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isSendReport_not?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  isFinishedFieldService_not?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  cratedBy_not?: Maybe<String>;
  cratedBy_in?: Maybe<String[] | String>;
  cratedBy_not_in?: Maybe<String[] | String>;
  cratedBy_lt?: Maybe<String>;
  cratedBy_lte?: Maybe<String>;
  cratedBy_gt?: Maybe<String>;
  cratedBy_gte?: Maybe<String>;
  cratedBy_contains?: Maybe<String>;
  cratedBy_not_contains?: Maybe<String>;
  cratedBy_starts_with?: Maybe<String>;
  cratedBy_not_starts_with?: Maybe<String>;
  cratedBy_ends_with?: Maybe<String>;
  cratedBy_not_ends_with?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  creationDate_not?: Maybe<DateTimeInput>;
  creationDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  creationDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  creationDate_lt?: Maybe<DateTimeInput>;
  creationDate_lte?: Maybe<DateTimeInput>;
  creationDate_gt?: Maybe<DateTimeInput>;
  creationDate_gte?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updateDate_not?: Maybe<String>;
  updateDate_in?: Maybe<String[] | String>;
  updateDate_not_in?: Maybe<String[] | String>;
  updateDate_lt?: Maybe<String>;
  updateDate_lte?: Maybe<String>;
  updateDate_gt?: Maybe<String>;
  updateDate_gte?: Maybe<String>;
  updateDate_contains?: Maybe<String>;
  updateDate_not_contains?: Maybe<String>;
  updateDate_starts_with?: Maybe<String>;
  updateDate_not_starts_with?: Maybe<String>;
  updateDate_ends_with?: Maybe<String>;
  updateDate_not_ends_with?: Maybe<String>;
  updatedBy?: Maybe<String>;
  updatedBy_not?: Maybe<String>;
  updatedBy_in?: Maybe<String[] | String>;
  updatedBy_not_in?: Maybe<String[] | String>;
  updatedBy_lt?: Maybe<String>;
  updatedBy_lte?: Maybe<String>;
  updatedBy_gt?: Maybe<String>;
  updatedBy_gte?: Maybe<String>;
  updatedBy_contains?: Maybe<String>;
  updatedBy_not_contains?: Maybe<String>;
  updatedBy_starts_with?: Maybe<String>;
  updatedBy_not_starts_with?: Maybe<String>;
  updatedBy_ends_with?: Maybe<String>;
  updatedBy_not_ends_with?: Maybe<String>;
  customerRemark?: Maybe<String>;
  customerRemark_not?: Maybe<String>;
  customerRemark_in?: Maybe<String[] | String>;
  customerRemark_not_in?: Maybe<String[] | String>;
  customerRemark_lt?: Maybe<String>;
  customerRemark_lte?: Maybe<String>;
  customerRemark_gt?: Maybe<String>;
  customerRemark_gte?: Maybe<String>;
  customerRemark_contains?: Maybe<String>;
  customerRemark_not_contains?: Maybe<String>;
  customerRemark_starts_with?: Maybe<String>;
  customerRemark_not_starts_with?: Maybe<String>;
  customerRemark_ends_with?: Maybe<String>;
  customerRemark_not_ends_with?: Maybe<String>;
  internalRemark?: Maybe<String>;
  internalRemark_not?: Maybe<String>;
  internalRemark_in?: Maybe<String[] | String>;
  internalRemark_not_in?: Maybe<String[] | String>;
  internalRemark_lt?: Maybe<String>;
  internalRemark_lte?: Maybe<String>;
  internalRemark_gt?: Maybe<String>;
  internalRemark_gte?: Maybe<String>;
  internalRemark_contains?: Maybe<String>;
  internalRemark_not_contains?: Maybe<String>;
  internalRemark_starts_with?: Maybe<String>;
  internalRemark_not_starts_with?: Maybe<String>;
  internalRemark_ends_with?: Maybe<String>;
  internalRemark_not_ends_with?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  correctiveMaintenanceRemark_not?: Maybe<String>;
  correctiveMaintenanceRemark_in?: Maybe<String[] | String>;
  correctiveMaintenanceRemark_not_in?: Maybe<String[] | String>;
  correctiveMaintenanceRemark_lt?: Maybe<String>;
  correctiveMaintenanceRemark_lte?: Maybe<String>;
  correctiveMaintenanceRemark_gt?: Maybe<String>;
  correctiveMaintenanceRemark_gte?: Maybe<String>;
  correctiveMaintenanceRemark_contains?: Maybe<String>;
  correctiveMaintenanceRemark_not_contains?: Maybe<String>;
  correctiveMaintenanceRemark_starts_with?: Maybe<String>;
  correctiveMaintenanceRemark_not_starts_with?: Maybe<String>;
  correctiveMaintenanceRemark_ends_with?: Maybe<String>;
  correctiveMaintenanceRemark_not_ends_with?: Maybe<String>;
  agreementDate?: Maybe<String>;
  agreementDate_not?: Maybe<String>;
  agreementDate_in?: Maybe<String[] | String>;
  agreementDate_not_in?: Maybe<String[] | String>;
  agreementDate_lt?: Maybe<String>;
  agreementDate_lte?: Maybe<String>;
  agreementDate_gt?: Maybe<String>;
  agreementDate_gte?: Maybe<String>;
  agreementDate_contains?: Maybe<String>;
  agreementDate_not_contains?: Maybe<String>;
  agreementDate_starts_with?: Maybe<String>;
  agreementDate_not_starts_with?: Maybe<String>;
  agreementDate_ends_with?: Maybe<String>;
  agreementDate_not_ends_with?: Maybe<String>;
  signature?: Maybe<String>;
  signature_not?: Maybe<String>;
  signature_in?: Maybe<String[] | String>;
  signature_not_in?: Maybe<String[] | String>;
  signature_lt?: Maybe<String>;
  signature_lte?: Maybe<String>;
  signature_gt?: Maybe<String>;
  signature_gte?: Maybe<String>;
  signature_contains?: Maybe<String>;
  signature_not_contains?: Maybe<String>;
  signature_starts_with?: Maybe<String>;
  signature_not_starts_with?: Maybe<String>;
  signature_ends_with?: Maybe<String>;
  signature_not_ends_with?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCode_not?: Maybe<String>;
  contactPersonCode_in?: Maybe<String[] | String>;
  contactPersonCode_not_in?: Maybe<String[] | String>;
  contactPersonCode_lt?: Maybe<String>;
  contactPersonCode_lte?: Maybe<String>;
  contactPersonCode_gt?: Maybe<String>;
  contactPersonCode_gte?: Maybe<String>;
  contactPersonCode_contains?: Maybe<String>;
  contactPersonCode_not_contains?: Maybe<String>;
  contactPersonCode_starts_with?: Maybe<String>;
  contactPersonCode_not_starts_with?: Maybe<String>;
  contactPersonCode_ends_with?: Maybe<String>;
  contactPersonCode_not_ends_with?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  contactPersonGender_not?: Maybe<String>;
  contactPersonGender_in?: Maybe<String[] | String>;
  contactPersonGender_not_in?: Maybe<String[] | String>;
  contactPersonGender_lt?: Maybe<String>;
  contactPersonGender_lte?: Maybe<String>;
  contactPersonGender_gt?: Maybe<String>;
  contactPersonGender_gte?: Maybe<String>;
  contactPersonGender_contains?: Maybe<String>;
  contactPersonGender_not_contains?: Maybe<String>;
  contactPersonGender_starts_with?: Maybe<String>;
  contactPersonGender_not_starts_with?: Maybe<String>;
  contactPersonGender_ends_with?: Maybe<String>;
  contactPersonGender_not_ends_with?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  orderCodeCustomer_not?: Maybe<String>;
  orderCodeCustomer_in?: Maybe<String[] | String>;
  orderCodeCustomer_not_in?: Maybe<String[] | String>;
  orderCodeCustomer_lt?: Maybe<String>;
  orderCodeCustomer_lte?: Maybe<String>;
  orderCodeCustomer_gt?: Maybe<String>;
  orderCodeCustomer_gte?: Maybe<String>;
  orderCodeCustomer_contains?: Maybe<String>;
  orderCodeCustomer_not_contains?: Maybe<String>;
  orderCodeCustomer_starts_with?: Maybe<String>;
  orderCodeCustomer_not_starts_with?: Maybe<String>;
  orderCodeCustomer_ends_with?: Maybe<String>;
  orderCodeCustomer_not_ends_with?: Maybe<String>;
  countryCode?: Maybe<String>;
  countryCode_not?: Maybe<String>;
  countryCode_in?: Maybe<String[] | String>;
  countryCode_not_in?: Maybe<String[] | String>;
  countryCode_lt?: Maybe<String>;
  countryCode_lte?: Maybe<String>;
  countryCode_gt?: Maybe<String>;
  countryCode_gte?: Maybe<String>;
  countryCode_contains?: Maybe<String>;
  countryCode_not_contains?: Maybe<String>;
  countryCode_starts_with?: Maybe<String>;
  countryCode_not_starts_with?: Maybe<String>;
  countryCode_ends_with?: Maybe<String>;
  countryCode_not_ends_with?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  serviceContractCode_not?: Maybe<String>;
  serviceContractCode_in?: Maybe<String[] | String>;
  serviceContractCode_not_in?: Maybe<String[] | String>;
  serviceContractCode_lt?: Maybe<String>;
  serviceContractCode_lte?: Maybe<String>;
  serviceContractCode_gt?: Maybe<String>;
  serviceContractCode_gte?: Maybe<String>;
  serviceContractCode_contains?: Maybe<String>;
  serviceContractCode_not_contains?: Maybe<String>;
  serviceContractCode_starts_with?: Maybe<String>;
  serviceContractCode_not_starts_with?: Maybe<String>;
  serviceContractCode_ends_with?: Maybe<String>;
  serviceContractCode_not_ends_with?: Maybe<String>;
  orderManager?: Maybe<String>;
  orderManager_not?: Maybe<String>;
  orderManager_in?: Maybe<String[] | String>;
  orderManager_not_in?: Maybe<String[] | String>;
  orderManager_lt?: Maybe<String>;
  orderManager_lte?: Maybe<String>;
  orderManager_gt?: Maybe<String>;
  orderManager_gte?: Maybe<String>;
  orderManager_contains?: Maybe<String>;
  orderManager_not_contains?: Maybe<String>;
  orderManager_starts_with?: Maybe<String>;
  orderManager_not_starts_with?: Maybe<String>;
  orderManager_ends_with?: Maybe<String>;
  orderManager_not_ends_with?: Maybe<String>;
  assignedTo?: Maybe<String>;
  assignedTo_not?: Maybe<String>;
  assignedTo_in?: Maybe<String[] | String>;
  assignedTo_not_in?: Maybe<String[] | String>;
  assignedTo_lt?: Maybe<String>;
  assignedTo_lte?: Maybe<String>;
  assignedTo_gt?: Maybe<String>;
  assignedTo_gte?: Maybe<String>;
  assignedTo_contains?: Maybe<String>;
  assignedTo_not_contains?: Maybe<String>;
  assignedTo_starts_with?: Maybe<String>;
  assignedTo_not_starts_with?: Maybe<String>;
  assignedTo_ends_with?: Maybe<String>;
  assignedTo_not_ends_with?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  servicePackage_not?: Maybe<Float>;
  servicePackage_in?: Maybe<Float[] | Float>;
  servicePackage_not_in?: Maybe<Float[] | Float>;
  servicePackage_lt?: Maybe<Float>;
  servicePackage_lte?: Maybe<Float>;
  servicePackage_gt?: Maybe<Float>;
  servicePackage_gte?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemDescription_not?: Maybe<String>;
  problemDescription_in?: Maybe<String[] | String>;
  problemDescription_not_in?: Maybe<String[] | String>;
  problemDescription_lt?: Maybe<String>;
  problemDescription_lte?: Maybe<String>;
  problemDescription_gt?: Maybe<String>;
  problemDescription_gte?: Maybe<String>;
  problemDescription_contains?: Maybe<String>;
  problemDescription_not_contains?: Maybe<String>;
  problemDescription_starts_with?: Maybe<String>;
  problemDescription_not_starts_with?: Maybe<String>;
  problemDescription_ends_with?: Maybe<String>;
  problemDescription_not_ends_with?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemCause_not?: Maybe<String>;
  problemCause_in?: Maybe<String[] | String>;
  problemCause_not_in?: Maybe<String[] | String>;
  problemCause_lt?: Maybe<String>;
  problemCause_lte?: Maybe<String>;
  problemCause_gt?: Maybe<String>;
  problemCause_gte?: Maybe<String>;
  problemCause_contains?: Maybe<String>;
  problemCause_not_contains?: Maybe<String>;
  problemCause_starts_with?: Maybe<String>;
  problemCause_not_starts_with?: Maybe<String>;
  problemCause_ends_with?: Maybe<String>;
  problemCause_not_ends_with?: Maybe<String>;
  problemSolution?: Maybe<String>;
  problemSolution_not?: Maybe<String>;
  problemSolution_in?: Maybe<String[] | String>;
  problemSolution_not_in?: Maybe<String[] | String>;
  problemSolution_lt?: Maybe<String>;
  problemSolution_lte?: Maybe<String>;
  problemSolution_gt?: Maybe<String>;
  problemSolution_gte?: Maybe<String>;
  problemSolution_contains?: Maybe<String>;
  problemSolution_not_contains?: Maybe<String>;
  problemSolution_starts_with?: Maybe<String>;
  problemSolution_not_starts_with?: Maybe<String>;
  problemSolution_ends_with?: Maybe<String>;
  problemSolution_not_ends_with?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  baseServiceOrderCode_not?: Maybe<String>;
  baseServiceOrderCode_in?: Maybe<String[] | String>;
  baseServiceOrderCode_not_in?: Maybe<String[] | String>;
  baseServiceOrderCode_lt?: Maybe<String>;
  baseServiceOrderCode_lte?: Maybe<String>;
  baseServiceOrderCode_gt?: Maybe<String>;
  baseServiceOrderCode_gte?: Maybe<String>;
  baseServiceOrderCode_contains?: Maybe<String>;
  baseServiceOrderCode_not_contains?: Maybe<String>;
  baseServiceOrderCode_starts_with?: Maybe<String>;
  baseServiceOrderCode_not_starts_with?: Maybe<String>;
  baseServiceOrderCode_ends_with?: Maybe<String>;
  baseServiceOrderCode_not_ends_with?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  isBaseServiceOrder_not?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder_not?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  actualHours_not?: Maybe<Float>;
  actualHours_in?: Maybe<Float[] | Float>;
  actualHours_not_in?: Maybe<Float[] | Float>;
  actualHours_lt?: Maybe<Float>;
  actualHours_lte?: Maybe<Float>;
  actualHours_gt?: Maybe<Float>;
  actualHours_gte?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  orderNumber?: Maybe<String>;
  orderNumber_not?: Maybe<String>;
  orderNumber_in?: Maybe<String[] | String>;
  orderNumber_not_in?: Maybe<String[] | String>;
  orderNumber_lt?: Maybe<String>;
  orderNumber_lte?: Maybe<String>;
  orderNumber_gt?: Maybe<String>;
  orderNumber_gte?: Maybe<String>;
  orderNumber_contains?: Maybe<String>;
  orderNumber_not_contains?: Maybe<String>;
  orderNumber_starts_with?: Maybe<String>;
  orderNumber_not_starts_with?: Maybe<String>;
  orderNumber_ends_with?: Maybe<String>;
  orderNumber_not_ends_with?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  isExportedLocked_not?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexId_not?: Maybe<ID_Input>;
  complexId_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_not_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_lt?: Maybe<ID_Input>;
  complexId_lte?: Maybe<ID_Input>;
  complexId_gt?: Maybe<ID_Input>;
  complexId_gte?: Maybe<ID_Input>;
  complexId_contains?: Maybe<ID_Input>;
  complexId_not_contains?: Maybe<ID_Input>;
  complexId_starts_with?: Maybe<ID_Input>;
  complexId_not_starts_with?: Maybe<ID_Input>;
  complexId_ends_with?: Maybe<ID_Input>;
  complexId_not_ends_with?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexCode_not?: Maybe<String>;
  complexCode_in?: Maybe<String[] | String>;
  complexCode_not_in?: Maybe<String[] | String>;
  complexCode_lt?: Maybe<String>;
  complexCode_lte?: Maybe<String>;
  complexCode_gt?: Maybe<String>;
  complexCode_gte?: Maybe<String>;
  complexCode_contains?: Maybe<String>;
  complexCode_not_contains?: Maybe<String>;
  complexCode_starts_with?: Maybe<String>;
  complexCode_not_starts_with?: Maybe<String>;
  complexCode_ends_with?: Maybe<String>;
  complexCode_not_ends_with?: Maybe<String>;
  complexName?: Maybe<String>;
  complexName_not?: Maybe<String>;
  complexName_in?: Maybe<String[] | String>;
  complexName_not_in?: Maybe<String[] | String>;
  complexName_lt?: Maybe<String>;
  complexName_lte?: Maybe<String>;
  complexName_gt?: Maybe<String>;
  complexName_gte?: Maybe<String>;
  complexName_contains?: Maybe<String>;
  complexName_not_contains?: Maybe<String>;
  complexName_starts_with?: Maybe<String>;
  complexName_not_starts_with?: Maybe<String>;
  complexName_ends_with?: Maybe<String>;
  complexName_not_ends_with?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexCode_not?: Maybe<String>;
  subComplexCode_in?: Maybe<String[] | String>;
  subComplexCode_not_in?: Maybe<String[] | String>;
  subComplexCode_lt?: Maybe<String>;
  subComplexCode_lte?: Maybe<String>;
  subComplexCode_gt?: Maybe<String>;
  subComplexCode_gte?: Maybe<String>;
  subComplexCode_contains?: Maybe<String>;
  subComplexCode_not_contains?: Maybe<String>;
  subComplexCode_starts_with?: Maybe<String>;
  subComplexCode_not_starts_with?: Maybe<String>;
  subComplexCode_ends_with?: Maybe<String>;
  subComplexCode_not_ends_with?: Maybe<String>;
  subComplexName?: Maybe<String>;
  subComplexName_not?: Maybe<String>;
  subComplexName_in?: Maybe<String[] | String>;
  subComplexName_not_in?: Maybe<String[] | String>;
  subComplexName_lt?: Maybe<String>;
  subComplexName_lte?: Maybe<String>;
  subComplexName_gt?: Maybe<String>;
  subComplexName_gte?: Maybe<String>;
  subComplexName_contains?: Maybe<String>;
  subComplexName_not_contains?: Maybe<String>;
  subComplexName_starts_with?: Maybe<String>;
  subComplexName_not_starts_with?: Maybe<String>;
  subComplexName_ends_with?: Maybe<String>;
  subComplexName_not_ends_with?: Maybe<String>;
  roofCode?: Maybe<String>;
  roofCode_not?: Maybe<String>;
  roofCode_in?: Maybe<String[] | String>;
  roofCode_not_in?: Maybe<String[] | String>;
  roofCode_lt?: Maybe<String>;
  roofCode_lte?: Maybe<String>;
  roofCode_gt?: Maybe<String>;
  roofCode_gte?: Maybe<String>;
  roofCode_contains?: Maybe<String>;
  roofCode_not_contains?: Maybe<String>;
  roofCode_starts_with?: Maybe<String>;
  roofCode_not_starts_with?: Maybe<String>;
  roofCode_ends_with?: Maybe<String>;
  roofCode_not_ends_with?: Maybe<String>;
  workType?: Maybe<String>;
  workType_not?: Maybe<String>;
  workType_in?: Maybe<String[] | String>;
  workType_not_in?: Maybe<String[] | String>;
  workType_lt?: Maybe<String>;
  workType_lte?: Maybe<String>;
  workType_gt?: Maybe<String>;
  workType_gte?: Maybe<String>;
  workType_contains?: Maybe<String>;
  workType_not_contains?: Maybe<String>;
  workType_starts_with?: Maybe<String>;
  workType_not_starts_with?: Maybe<String>;
  workType_ends_with?: Maybe<String>;
  workType_not_ends_with?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  statusReasonDescription_not?: Maybe<String>;
  statusReasonDescription_in?: Maybe<String[] | String>;
  statusReasonDescription_not_in?: Maybe<String[] | String>;
  statusReasonDescription_lt?: Maybe<String>;
  statusReasonDescription_lte?: Maybe<String>;
  statusReasonDescription_gt?: Maybe<String>;
  statusReasonDescription_gte?: Maybe<String>;
  statusReasonDescription_contains?: Maybe<String>;
  statusReasonDescription_not_contains?: Maybe<String>;
  statusReasonDescription_starts_with?: Maybe<String>;
  statusReasonDescription_not_starts_with?: Maybe<String>;
  statusReasonDescription_ends_with?: Maybe<String>;
  statusReasonDescription_not_ends_with?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  readyDateNew_not?: Maybe<String>;
  readyDateNew_in?: Maybe<String[] | String>;
  readyDateNew_not_in?: Maybe<String[] | String>;
  readyDateNew_lt?: Maybe<String>;
  readyDateNew_lte?: Maybe<String>;
  readyDateNew_gt?: Maybe<String>;
  readyDateNew_gte?: Maybe<String>;
  readyDateNew_contains?: Maybe<String>;
  readyDateNew_not_contains?: Maybe<String>;
  readyDateNew_starts_with?: Maybe<String>;
  readyDateNew_not_starts_with?: Maybe<String>;
  readyDateNew_ends_with?: Maybe<String>;
  readyDateNew_not_ends_with?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartner_not?: Maybe<String>;
  roofPartner_in?: Maybe<String[] | String>;
  roofPartner_not_in?: Maybe<String[] | String>;
  roofPartner_lt?: Maybe<String>;
  roofPartner_lte?: Maybe<String>;
  roofPartner_gt?: Maybe<String>;
  roofPartner_gte?: Maybe<String>;
  roofPartner_contains?: Maybe<String>;
  roofPartner_not_contains?: Maybe<String>;
  roofPartner_starts_with?: Maybe<String>;
  roofPartner_not_starts_with?: Maybe<String>;
  roofPartner_ends_with?: Maybe<String>;
  roofPartner_not_ends_with?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofPartnerName_not?: Maybe<String>;
  roofPartnerName_in?: Maybe<String[] | String>;
  roofPartnerName_not_in?: Maybe<String[] | String>;
  roofPartnerName_lt?: Maybe<String>;
  roofPartnerName_lte?: Maybe<String>;
  roofPartnerName_gt?: Maybe<String>;
  roofPartnerName_gte?: Maybe<String>;
  roofPartnerName_contains?: Maybe<String>;
  roofPartnerName_not_contains?: Maybe<String>;
  roofPartnerName_starts_with?: Maybe<String>;
  roofPartnerName_not_starts_with?: Maybe<String>;
  roofPartnerName_ends_with?: Maybe<String>;
  roofPartnerName_not_ends_with?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofWarranty_not?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  roofIsAGutter_not?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  amountOfMeasures_not?: Maybe<Int>;
  amountOfMeasures_in?: Maybe<Int[] | Int>;
  amountOfMeasures_not_in?: Maybe<Int[] | Int>;
  amountOfMeasures_lt?: Maybe<Int>;
  amountOfMeasures_lte?: Maybe<Int>;
  amountOfMeasures_gt?: Maybe<Int>;
  amountOfMeasures_gte?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  roofingPartDescription_not?: Maybe<String>;
  roofingPartDescription_in?: Maybe<String[] | String>;
  roofingPartDescription_not_in?: Maybe<String[] | String>;
  roofingPartDescription_lt?: Maybe<String>;
  roofingPartDescription_lte?: Maybe<String>;
  roofingPartDescription_gt?: Maybe<String>;
  roofingPartDescription_gte?: Maybe<String>;
  roofingPartDescription_contains?: Maybe<String>;
  roofingPartDescription_not_contains?: Maybe<String>;
  roofingPartDescription_starts_with?: Maybe<String>;
  roofingPartDescription_not_starts_with?: Maybe<String>;
  roofingPartDescription_ends_with?: Maybe<String>;
  roofingPartDescription_not_ends_with?: Maybe<String>;
  cause?: Maybe<String>;
  cause_not?: Maybe<String>;
  cause_in?: Maybe<String[] | String>;
  cause_not_in?: Maybe<String[] | String>;
  cause_lt?: Maybe<String>;
  cause_lte?: Maybe<String>;
  cause_gt?: Maybe<String>;
  cause_gte?: Maybe<String>;
  cause_contains?: Maybe<String>;
  cause_not_contains?: Maybe<String>;
  cause_starts_with?: Maybe<String>;
  cause_not_starts_with?: Maybe<String>;
  cause_ends_with?: Maybe<String>;
  cause_not_ends_with?: Maybe<String>;
  measureDescription?: Maybe<String>;
  measureDescription_not?: Maybe<String>;
  measureDescription_in?: Maybe<String[] | String>;
  measureDescription_not_in?: Maybe<String[] | String>;
  measureDescription_lt?: Maybe<String>;
  measureDescription_lte?: Maybe<String>;
  measureDescription_gt?: Maybe<String>;
  measureDescription_gte?: Maybe<String>;
  measureDescription_contains?: Maybe<String>;
  measureDescription_not_contains?: Maybe<String>;
  measureDescription_starts_with?: Maybe<String>;
  measureDescription_not_starts_with?: Maybe<String>;
  measureDescription_ends_with?: Maybe<String>;
  measureDescription_not_ends_with?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  consequentialDamageIndoor_not?: Maybe<String>;
  consequentialDamageIndoor_in?: Maybe<String[] | String>;
  consequentialDamageIndoor_not_in?: Maybe<String[] | String>;
  consequentialDamageIndoor_lt?: Maybe<String>;
  consequentialDamageIndoor_lte?: Maybe<String>;
  consequentialDamageIndoor_gt?: Maybe<String>;
  consequentialDamageIndoor_gte?: Maybe<String>;
  consequentialDamageIndoor_contains?: Maybe<String>;
  consequentialDamageIndoor_not_contains?: Maybe<String>;
  consequentialDamageIndoor_starts_with?: Maybe<String>;
  consequentialDamageIndoor_not_starts_with?: Maybe<String>;
  consequentialDamageIndoor_ends_with?: Maybe<String>;
  consequentialDamageIndoor_not_ends_with?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  roofTypeCode_not?: Maybe<String>;
  roofTypeCode_in?: Maybe<String[] | String>;
  roofTypeCode_not_in?: Maybe<String[] | String>;
  roofTypeCode_lt?: Maybe<String>;
  roofTypeCode_lte?: Maybe<String>;
  roofTypeCode_gt?: Maybe<String>;
  roofTypeCode_gte?: Maybe<String>;
  roofTypeCode_contains?: Maybe<String>;
  roofTypeCode_not_contains?: Maybe<String>;
  roofTypeCode_starts_with?: Maybe<String>;
  roofTypeCode_not_starts_with?: Maybe<String>;
  roofTypeCode_ends_with?: Maybe<String>;
  roofTypeCode_not_ends_with?: Maybe<String>;
  condition?: Maybe<Int>;
  condition_not?: Maybe<Int>;
  condition_in?: Maybe<Int[] | Int>;
  condition_not_in?: Maybe<Int[] | Int>;
  condition_lt?: Maybe<Int>;
  condition_lte?: Maybe<Int>;
  condition_gt?: Maybe<Int>;
  condition_gte?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCategories_not?: Maybe<String>;
  roofingPartCategories_in?: Maybe<String[] | String>;
  roofingPartCategories_not_in?: Maybe<String[] | String>;
  roofingPartCategories_lt?: Maybe<String>;
  roofingPartCategories_lte?: Maybe<String>;
  roofingPartCategories_gt?: Maybe<String>;
  roofingPartCategories_gte?: Maybe<String>;
  roofingPartCategories_contains?: Maybe<String>;
  roofingPartCategories_not_contains?: Maybe<String>;
  roofingPartCategories_starts_with?: Maybe<String>;
  roofingPartCategories_not_starts_with?: Maybe<String>;
  roofingPartCategories_ends_with?: Maybe<String>;
  roofingPartCategories_not_ends_with?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  roofingPartCodes_not?: Maybe<String>;
  roofingPartCodes_in?: Maybe<String[] | String>;
  roofingPartCodes_not_in?: Maybe<String[] | String>;
  roofingPartCodes_lt?: Maybe<String>;
  roofingPartCodes_lte?: Maybe<String>;
  roofingPartCodes_gt?: Maybe<String>;
  roofingPartCodes_gte?: Maybe<String>;
  roofingPartCodes_contains?: Maybe<String>;
  roofingPartCodes_not_contains?: Maybe<String>;
  roofingPartCodes_starts_with?: Maybe<String>;
  roofingPartCodes_not_starts_with?: Maybe<String>;
  roofingPartCodes_ends_with?: Maybe<String>;
  roofingPartCodes_not_ends_with?: Maybe<String>;
  contractCode?: Maybe<String>;
  contractCode_not?: Maybe<String>;
  contractCode_in?: Maybe<String[] | String>;
  contractCode_not_in?: Maybe<String[] | String>;
  contractCode_lt?: Maybe<String>;
  contractCode_lte?: Maybe<String>;
  contractCode_gt?: Maybe<String>;
  contractCode_gte?: Maybe<String>;
  contractCode_contains?: Maybe<String>;
  contractCode_not_contains?: Maybe<String>;
  contractCode_starts_with?: Maybe<String>;
  contractCode_not_starts_with?: Maybe<String>;
  contractCode_ends_with?: Maybe<String>;
  contractCode_not_ends_with?: Maybe<String>;
  invoiceType?: Maybe<String>;
  invoiceType_not?: Maybe<String>;
  invoiceType_in?: Maybe<String[] | String>;
  invoiceType_not_in?: Maybe<String[] | String>;
  invoiceType_lt?: Maybe<String>;
  invoiceType_lte?: Maybe<String>;
  invoiceType_gt?: Maybe<String>;
  invoiceType_gte?: Maybe<String>;
  invoiceType_contains?: Maybe<String>;
  invoiceType_not_contains?: Maybe<String>;
  invoiceType_starts_with?: Maybe<String>;
  invoiceType_not_starts_with?: Maybe<String>;
  invoiceType_ends_with?: Maybe<String>;
  invoiceType_not_ends_with?: Maybe<String>;
  billingAddress?: Maybe<String>;
  billingAddress_not?: Maybe<String>;
  billingAddress_in?: Maybe<String[] | String>;
  billingAddress_not_in?: Maybe<String[] | String>;
  billingAddress_lt?: Maybe<String>;
  billingAddress_lte?: Maybe<String>;
  billingAddress_gt?: Maybe<String>;
  billingAddress_gte?: Maybe<String>;
  billingAddress_contains?: Maybe<String>;
  billingAddress_not_contains?: Maybe<String>;
  billingAddress_starts_with?: Maybe<String>;
  billingAddress_not_starts_with?: Maybe<String>;
  billingAddress_ends_with?: Maybe<String>;
  billingAddress_not_ends_with?: Maybe<String>;
  roofNumber?: Maybe<String>;
  roofNumber_not?: Maybe<String>;
  roofNumber_in?: Maybe<String[] | String>;
  roofNumber_not_in?: Maybe<String[] | String>;
  roofNumber_lt?: Maybe<String>;
  roofNumber_lte?: Maybe<String>;
  roofNumber_gt?: Maybe<String>;
  roofNumber_gte?: Maybe<String>;
  roofNumber_contains?: Maybe<String>;
  roofNumber_not_contains?: Maybe<String>;
  roofNumber_starts_with?: Maybe<String>;
  roofNumber_not_starts_with?: Maybe<String>;
  roofNumber_ends_with?: Maybe<String>;
  roofNumber_not_ends_with?: Maybe<String>;
  workOrders_every?: Maybe<WorkOrderWhereInput>;
  workOrders_some?: Maybe<WorkOrderWhereInput>;
  workOrders_none?: Maybe<WorkOrderWhereInput>;
  activityLogs_every?: Maybe<ActivityLogWhereInput>;
  activityLogs_some?: Maybe<ActivityLogWhereInput>;
  activityLogs_none?: Maybe<ActivityLogWhereInput>;
  serviceTexts_every?: Maybe<ServiceTextWhereInput>;
  serviceTexts_some?: Maybe<ServiceTextWhereInput>;
  serviceTexts_none?: Maybe<ServiceTextWhereInput>;
  customerFeedbacks_every?: Maybe<CustomerFeedbackWhereInput>;
  customerFeedbacks_some?: Maybe<CustomerFeedbackWhereInput>;
  customerFeedbacks_none?: Maybe<CustomerFeedbackWhereInput>;
  activityLogHistories_every?: Maybe<ActivityLogHistoryWhereInput>;
  activityLogHistories_some?: Maybe<ActivityLogHistoryWhereInput>;
  activityLogHistories_none?: Maybe<ActivityLogHistoryWhereInput>;
  reporter?: Maybe<ReporterWhereInput>;
  serviceOrderComments_every?: Maybe<ServiceOrderCommentWhereInput>;
  serviceOrderComments_some?: Maybe<ServiceOrderCommentWhereInput>;
  serviceOrderComments_none?: Maybe<ServiceOrderCommentWhereInput>;
  serviceAppointment?: Maybe<ServiceAppointmentWhereInput>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceOrderWhereInput[] | ServiceOrderWhereInput>;
  OR?: Maybe<ServiceOrderWhereInput[] | ServiceOrderWhereInput>;
  NOT?: Maybe<ServiceOrderWhereInput[] | ServiceOrderWhereInput>;
}

export interface ActivityLogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  apply?: Maybe<String>;
  apply_not?: Maybe<String>;
  apply_in?: Maybe<String[] | String>;
  apply_not_in?: Maybe<String[] | String>;
  apply_lt?: Maybe<String>;
  apply_lte?: Maybe<String>;
  apply_gt?: Maybe<String>;
  apply_gte?: Maybe<String>;
  apply_contains?: Maybe<String>;
  apply_not_contains?: Maybe<String>;
  apply_starts_with?: Maybe<String>;
  apply_not_starts_with?: Maybe<String>;
  apply_ends_with?: Maybe<String>;
  apply_not_ends_with?: Maybe<String>;
  colour?: Maybe<String>;
  colour_not?: Maybe<String>;
  colour_in?: Maybe<String[] | String>;
  colour_not_in?: Maybe<String[] | String>;
  colour_lt?: Maybe<String>;
  colour_lte?: Maybe<String>;
  colour_gt?: Maybe<String>;
  colour_gte?: Maybe<String>;
  colour_contains?: Maybe<String>;
  colour_not_contains?: Maybe<String>;
  colour_starts_with?: Maybe<String>;
  colour_not_starts_with?: Maybe<String>;
  colour_ends_with?: Maybe<String>;
  colour_not_ends_with?: Maybe<String>;
  eventType?: Maybe<String>;
  eventType_not?: Maybe<String>;
  eventType_in?: Maybe<String[] | String>;
  eventType_not_in?: Maybe<String[] | String>;
  eventType_lt?: Maybe<String>;
  eventType_lte?: Maybe<String>;
  eventType_gt?: Maybe<String>;
  eventType_gte?: Maybe<String>;
  eventType_contains?: Maybe<String>;
  eventType_not_contains?: Maybe<String>;
  eventType_starts_with?: Maybe<String>;
  eventType_not_starts_with?: Maybe<String>;
  eventType_ends_with?: Maybe<String>;
  eventType_not_ends_with?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchQuote_not?: Maybe<String>;
  statusPurchQuote_in?: Maybe<String[] | String>;
  statusPurchQuote_not_in?: Maybe<String[] | String>;
  statusPurchQuote_lt?: Maybe<String>;
  statusPurchQuote_lte?: Maybe<String>;
  statusPurchQuote_gt?: Maybe<String>;
  statusPurchQuote_gte?: Maybe<String>;
  statusPurchQuote_contains?: Maybe<String>;
  statusPurchQuote_not_contains?: Maybe<String>;
  statusPurchQuote_starts_with?: Maybe<String>;
  statusPurchQuote_not_starts_with?: Maybe<String>;
  statusPurchQuote_ends_with?: Maybe<String>;
  statusPurchQuote_not_ends_with?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusPurchOrder_not?: Maybe<String>;
  statusPurchOrder_in?: Maybe<String[] | String>;
  statusPurchOrder_not_in?: Maybe<String[] | String>;
  statusPurchOrder_lt?: Maybe<String>;
  statusPurchOrder_lte?: Maybe<String>;
  statusPurchOrder_gt?: Maybe<String>;
  statusPurchOrder_gte?: Maybe<String>;
  statusPurchOrder_contains?: Maybe<String>;
  statusPurchOrder_not_contains?: Maybe<String>;
  statusPurchOrder_starts_with?: Maybe<String>;
  statusPurchOrder_not_starts_with?: Maybe<String>;
  statusPurchOrder_ends_with?: Maybe<String>;
  statusPurchOrder_not_ends_with?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceCall_not?: Maybe<String>;
  statusServiceCall_in?: Maybe<String[] | String>;
  statusServiceCall_not_in?: Maybe<String[] | String>;
  statusServiceCall_lt?: Maybe<String>;
  statusServiceCall_lte?: Maybe<String>;
  statusServiceCall_gt?: Maybe<String>;
  statusServiceCall_gte?: Maybe<String>;
  statusServiceCall_contains?: Maybe<String>;
  statusServiceCall_not_contains?: Maybe<String>;
  statusServiceCall_starts_with?: Maybe<String>;
  statusServiceCall_not_starts_with?: Maybe<String>;
  statusServiceCall_ends_with?: Maybe<String>;
  statusServiceCall_not_ends_with?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  statusServiceOrder_not?: Maybe<String>;
  statusServiceOrder_in?: Maybe<String[] | String>;
  statusServiceOrder_not_in?: Maybe<String[] | String>;
  statusServiceOrder_lt?: Maybe<String>;
  statusServiceOrder_lte?: Maybe<String>;
  statusServiceOrder_gt?: Maybe<String>;
  statusServiceOrder_gte?: Maybe<String>;
  statusServiceOrder_contains?: Maybe<String>;
  statusServiceOrder_not_contains?: Maybe<String>;
  statusServiceOrder_starts_with?: Maybe<String>;
  statusServiceOrder_not_starts_with?: Maybe<String>;
  statusServiceOrder_ends_with?: Maybe<String>;
  statusServiceOrder_not_ends_with?: Maybe<String>;
  fieldService?: Maybe<String>;
  fieldService_not?: Maybe<String>;
  fieldService_in?: Maybe<String[] | String>;
  fieldService_not_in?: Maybe<String[] | String>;
  fieldService_lt?: Maybe<String>;
  fieldService_lte?: Maybe<String>;
  fieldService_gt?: Maybe<String>;
  fieldService_gte?: Maybe<String>;
  fieldService_contains?: Maybe<String>;
  fieldService_not_contains?: Maybe<String>;
  fieldService_starts_with?: Maybe<String>;
  fieldService_not_starts_with?: Maybe<String>;
  fieldService_ends_with?: Maybe<String>;
  fieldService_not_ends_with?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  blockModifyServiceOrder_not?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  skipExportToFSA_not?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendStatusUpdateMail_not?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  sendMailWorkSheet_not?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  publishOnServicePOrtal_not?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  sendMainToSubcontractor_not?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOStartTime_not?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  updateWOEndTime_not?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
  naForActualReferencePoint_not?: Maybe<Boolean>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityLogWhereInput[] | ActivityLogWhereInput>;
  OR?: Maybe<ActivityLogWhereInput[] | ActivityLogWhereInput>;
  NOT?: Maybe<ActivityLogWhereInput[] | ActivityLogWhereInput>;
}

export interface ServiceTextWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  tableName?: Maybe<String>;
  tableName_not?: Maybe<String>;
  tableName_in?: Maybe<String[] | String>;
  tableName_not_in?: Maybe<String[] | String>;
  tableName_lt?: Maybe<String>;
  tableName_lte?: Maybe<String>;
  tableName_gt?: Maybe<String>;
  tableName_gte?: Maybe<String>;
  tableName_contains?: Maybe<String>;
  tableName_not_contains?: Maybe<String>;
  tableName_starts_with?: Maybe<String>;
  tableName_not_starts_with?: Maybe<String>;
  tableName_ends_with?: Maybe<String>;
  tableName_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  lineNumber_not?: Maybe<Int>;
  lineNumber_in?: Maybe<Int[] | Int>;
  lineNumber_not_in?: Maybe<Int[] | Int>;
  lineNumber_lt?: Maybe<Int>;
  lineNumber_lte?: Maybe<Int>;
  lineNumber_gt?: Maybe<Int>;
  lineNumber_gte?: Maybe<Int>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceTextWhereInput[] | ServiceTextWhereInput>;
  OR?: Maybe<ServiceTextWhereInput[] | ServiceTextWhereInput>;
  NOT?: Maybe<ServiceTextWhereInput[] | ServiceTextWhereInput>;
}

export interface CustomerFeedbackWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  stage?: Maybe<String>;
  stage_not?: Maybe<String>;
  stage_in?: Maybe<String[] | String>;
  stage_not_in?: Maybe<String[] | String>;
  stage_lt?: Maybe<String>;
  stage_lte?: Maybe<String>;
  stage_gt?: Maybe<String>;
  stage_gte?: Maybe<String>;
  stage_contains?: Maybe<String>;
  stage_not_contains?: Maybe<String>;
  stage_starts_with?: Maybe<String>;
  stage_not_starts_with?: Maybe<String>;
  stage_ends_with?: Maybe<String>;
  stage_not_ends_with?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  skipped_not?: Maybe<Boolean>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  serviceOrderId?: Maybe<ID_Input>;
  serviceOrderId_not?: Maybe<ID_Input>;
  serviceOrderId_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_not_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_lt?: Maybe<ID_Input>;
  serviceOrderId_lte?: Maybe<ID_Input>;
  serviceOrderId_gt?: Maybe<ID_Input>;
  serviceOrderId_gte?: Maybe<ID_Input>;
  serviceOrderId_contains?: Maybe<ID_Input>;
  serviceOrderId_not_contains?: Maybe<ID_Input>;
  serviceOrderId_starts_with?: Maybe<ID_Input>;
  serviceOrderId_not_starts_with?: Maybe<ID_Input>;
  serviceOrderId_ends_with?: Maybe<ID_Input>;
  serviceOrderId_not_ends_with?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
  notificationId_not?: Maybe<ID_Input>;
  notificationId_in?: Maybe<ID_Input[] | ID_Input>;
  notificationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  notificationId_lt?: Maybe<ID_Input>;
  notificationId_lte?: Maybe<ID_Input>;
  notificationId_gt?: Maybe<ID_Input>;
  notificationId_gte?: Maybe<ID_Input>;
  notificationId_contains?: Maybe<ID_Input>;
  notificationId_not_contains?: Maybe<ID_Input>;
  notificationId_starts_with?: Maybe<ID_Input>;
  notificationId_not_starts_with?: Maybe<ID_Input>;
  notificationId_ends_with?: Maybe<ID_Input>;
  notificationId_not_ends_with?: Maybe<ID_Input>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerFeedbackWhereInput[] | CustomerFeedbackWhereInput>;
  OR?: Maybe<CustomerFeedbackWhereInput[] | CustomerFeedbackWhereInput>;
  NOT?: Maybe<CustomerFeedbackWhereInput[] | CustomerFeedbackWhereInput>;
}

export interface ActivityLogHistoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  registerDate_not?: Maybe<DateTimeInput>;
  registerDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registerDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registerDate_lt?: Maybe<DateTimeInput>;
  registerDate_lte?: Maybe<DateTimeInput>;
  registerDate_gt?: Maybe<DateTimeInput>;
  registerDate_gte?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityLogHistoryWhereInput[] | ActivityLogHistoryWhereInput>;
  OR?: Maybe<ActivityLogHistoryWhereInput[] | ActivityLogHistoryWhereInput>;
  NOT?: Maybe<ActivityLogHistoryWhereInput[] | ActivityLogHistoryWhereInput>;
}

export interface ReporterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  onBehalfOf?: Maybe<String>;
  onBehalfOf_not?: Maybe<String>;
  onBehalfOf_in?: Maybe<String[] | String>;
  onBehalfOf_not_in?: Maybe<String[] | String>;
  onBehalfOf_lt?: Maybe<String>;
  onBehalfOf_lte?: Maybe<String>;
  onBehalfOf_gt?: Maybe<String>;
  onBehalfOf_gte?: Maybe<String>;
  onBehalfOf_contains?: Maybe<String>;
  onBehalfOf_not_contains?: Maybe<String>;
  onBehalfOf_starts_with?: Maybe<String>;
  onBehalfOf_not_starts_with?: Maybe<String>;
  onBehalfOf_ends_with?: Maybe<String>;
  onBehalfOf_not_ends_with?: Maybe<String>;
  type?: Maybe<ReporterType>;
  type_not?: Maybe<ReporterType>;
  type_in?: Maybe<ReporterType[] | ReporterType>;
  type_not_in?: Maybe<ReporterType[] | ReporterType>;
  reference?: Maybe<String>;
  reference_not?: Maybe<String>;
  reference_in?: Maybe<String[] | String>;
  reference_not_in?: Maybe<String[] | String>;
  reference_lt?: Maybe<String>;
  reference_lte?: Maybe<String>;
  reference_gt?: Maybe<String>;
  reference_gte?: Maybe<String>;
  reference_contains?: Maybe<String>;
  reference_not_contains?: Maybe<String>;
  reference_starts_with?: Maybe<String>;
  reference_not_starts_with?: Maybe<String>;
  reference_ends_with?: Maybe<String>;
  reference_not_ends_with?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  priority_not?: Maybe<PriorityType>;
  priority_in?: Maybe<PriorityType[] | PriorityType>;
  priority_not_in?: Maybe<PriorityType[] | PriorityType>;
  workText?: Maybe<String>;
  workText_not?: Maybe<String>;
  workText_in?: Maybe<String[] | String>;
  workText_not_in?: Maybe<String[] | String>;
  workText_lt?: Maybe<String>;
  workText_lte?: Maybe<String>;
  workText_gt?: Maybe<String>;
  workText_gte?: Maybe<String>;
  workText_contains?: Maybe<String>;
  workText_not_contains?: Maybe<String>;
  workText_starts_with?: Maybe<String>;
  workText_not_starts_with?: Maybe<String>;
  workText_ends_with?: Maybe<String>;
  workText_not_ends_with?: Maybe<String>;
  internalText?: Maybe<String>;
  internalText_not?: Maybe<String>;
  internalText_in?: Maybe<String[] | String>;
  internalText_not_in?: Maybe<String[] | String>;
  internalText_lt?: Maybe<String>;
  internalText_lte?: Maybe<String>;
  internalText_gt?: Maybe<String>;
  internalText_gte?: Maybe<String>;
  internalText_contains?: Maybe<String>;
  internalText_not_contains?: Maybe<String>;
  internalText_starts_with?: Maybe<String>;
  internalText_not_starts_with?: Maybe<String>;
  internalText_ends_with?: Maybe<String>;
  internalText_not_ends_with?: Maybe<String>;
  adviceText?: Maybe<String>;
  adviceText_not?: Maybe<String>;
  adviceText_in?: Maybe<String[] | String>;
  adviceText_not_in?: Maybe<String[] | String>;
  adviceText_lt?: Maybe<String>;
  adviceText_lte?: Maybe<String>;
  adviceText_gt?: Maybe<String>;
  adviceText_gte?: Maybe<String>;
  adviceText_contains?: Maybe<String>;
  adviceText_not_contains?: Maybe<String>;
  adviceText_starts_with?: Maybe<String>;
  adviceText_not_starts_with?: Maybe<String>;
  adviceText_ends_with?: Maybe<String>;
  adviceText_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  isTrackAndTraceActive?: Maybe<Boolean>;
  isTrackAndTraceActive_not?: Maybe<Boolean>;
  AND?: Maybe<ReporterWhereInput[] | ReporterWhereInput>;
  OR?: Maybe<ReporterWhereInput[] | ReporterWhereInput>;
  NOT?: Maybe<ReporterWhereInput[] | ReporterWhereInput>;
}

export interface ServiceOrderCommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  orderCommentType_not?: Maybe<ServiceOrderCommentType>;
  orderCommentType_in?: Maybe<
    ServiceOrderCommentType[] | ServiceOrderCommentType
  >;
  orderCommentType_not_in?: Maybe<
    ServiceOrderCommentType[] | ServiceOrderCommentType
  >;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  authorCode?: Maybe<String>;
  authorCode_not?: Maybe<String>;
  authorCode_in?: Maybe<String[] | String>;
  authorCode_not_in?: Maybe<String[] | String>;
  authorCode_lt?: Maybe<String>;
  authorCode_lte?: Maybe<String>;
  authorCode_gt?: Maybe<String>;
  authorCode_gte?: Maybe<String>;
  authorCode_contains?: Maybe<String>;
  authorCode_not_contains?: Maybe<String>;
  authorCode_starts_with?: Maybe<String>;
  authorCode_not_starts_with?: Maybe<String>;
  authorCode_ends_with?: Maybe<String>;
  authorCode_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  AND?: Maybe<ServiceOrderCommentWhereInput[] | ServiceOrderCommentWhereInput>;
  OR?: Maybe<ServiceOrderCommentWhereInput[] | ServiceOrderCommentWhereInput>;
  NOT?: Maybe<ServiceOrderCommentWhereInput[] | ServiceOrderCommentWhereInput>;
}

export interface ServiceAppointmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  orderType?: Maybe<String>;
  orderType_not?: Maybe<String>;
  orderType_in?: Maybe<String[] | String>;
  orderType_not_in?: Maybe<String[] | String>;
  orderType_lt?: Maybe<String>;
  orderType_lte?: Maybe<String>;
  orderType_gt?: Maybe<String>;
  orderType_gte?: Maybe<String>;
  orderType_contains?: Maybe<String>;
  orderType_not_contains?: Maybe<String>;
  orderType_starts_with?: Maybe<String>;
  orderType_not_starts_with?: Maybe<String>;
  orderType_ends_with?: Maybe<String>;
  orderType_not_ends_with?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderDate_not?: Maybe<String>;
  orderDate_in?: Maybe<String[] | String>;
  orderDate_not_in?: Maybe<String[] | String>;
  orderDate_lt?: Maybe<String>;
  orderDate_lte?: Maybe<String>;
  orderDate_gt?: Maybe<String>;
  orderDate_gte?: Maybe<String>;
  orderDate_contains?: Maybe<String>;
  orderDate_not_contains?: Maybe<String>;
  orderDate_starts_with?: Maybe<String>;
  orderDate_not_starts_with?: Maybe<String>;
  orderDate_ends_with?: Maybe<String>;
  orderDate_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  serviceContract?: Maybe<ServiceContractWhereInput>;
  serviceOrders_every?: Maybe<ServiceOrderWhereInput>;
  serviceOrders_some?: Maybe<ServiceOrderWhereInput>;
  serviceOrders_none?: Maybe<ServiceOrderWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceAppointmentWhereInput[] | ServiceAppointmentWhereInput>;
  OR?: Maybe<ServiceAppointmentWhereInput[] | ServiceAppointmentWhereInput>;
  NOT?: Maybe<ServiceAppointmentWhereInput[] | ServiceAppointmentWhereInput>;
}

export interface ServiceContractWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofAddress_not?: Maybe<String>;
  roofAddress_in?: Maybe<String[] | String>;
  roofAddress_not_in?: Maybe<String[] | String>;
  roofAddress_lt?: Maybe<String>;
  roofAddress_lte?: Maybe<String>;
  roofAddress_gt?: Maybe<String>;
  roofAddress_gte?: Maybe<String>;
  roofAddress_contains?: Maybe<String>;
  roofAddress_not_contains?: Maybe<String>;
  roofAddress_starts_with?: Maybe<String>;
  roofAddress_not_starts_with?: Maybe<String>;
  roofAddress_ends_with?: Maybe<String>;
  roofAddress_not_ends_with?: Maybe<String>;
  roofCity?: Maybe<String>;
  roofCity_not?: Maybe<String>;
  roofCity_in?: Maybe<String[] | String>;
  roofCity_not_in?: Maybe<String[] | String>;
  roofCity_lt?: Maybe<String>;
  roofCity_lte?: Maybe<String>;
  roofCity_gt?: Maybe<String>;
  roofCity_gte?: Maybe<String>;
  roofCity_contains?: Maybe<String>;
  roofCity_not_contains?: Maybe<String>;
  roofCity_starts_with?: Maybe<String>;
  roofCity_not_starts_with?: Maybe<String>;
  roofCity_ends_with?: Maybe<String>;
  roofCity_not_ends_with?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  status_not?: Maybe<ContractStatus>;
  status_in?: Maybe<ContractStatus[] | ContractStatus>;
  status_not_in?: Maybe<ContractStatus[] | ContractStatus>;
  orderDate?: Maybe<String>;
  orderDate_not?: Maybe<String>;
  orderDate_in?: Maybe<String[] | String>;
  orderDate_not_in?: Maybe<String[] | String>;
  orderDate_lt?: Maybe<String>;
  orderDate_lte?: Maybe<String>;
  orderDate_gt?: Maybe<String>;
  orderDate_gte?: Maybe<String>;
  orderDate_contains?: Maybe<String>;
  orderDate_not_contains?: Maybe<String>;
  orderDate_starts_with?: Maybe<String>;
  orderDate_not_starts_with?: Maybe<String>;
  orderDate_ends_with?: Maybe<String>;
  orderDate_not_ends_with?: Maybe<String>;
  startingDate?: Maybe<String>;
  startingDate_not?: Maybe<String>;
  startingDate_in?: Maybe<String[] | String>;
  startingDate_not_in?: Maybe<String[] | String>;
  startingDate_lt?: Maybe<String>;
  startingDate_lte?: Maybe<String>;
  startingDate_gt?: Maybe<String>;
  startingDate_gte?: Maybe<String>;
  startingDate_contains?: Maybe<String>;
  startingDate_not_contains?: Maybe<String>;
  startingDate_starts_with?: Maybe<String>;
  startingDate_not_starts_with?: Maybe<String>;
  startingDate_ends_with?: Maybe<String>;
  startingDate_not_ends_with?: Maybe<String>;
  endingDate?: Maybe<String>;
  endingDate_not?: Maybe<String>;
  endingDate_in?: Maybe<String[] | String>;
  endingDate_not_in?: Maybe<String[] | String>;
  endingDate_lt?: Maybe<String>;
  endingDate_lte?: Maybe<String>;
  endingDate_gt?: Maybe<String>;
  endingDate_gte?: Maybe<String>;
  endingDate_contains?: Maybe<String>;
  endingDate_not_contains?: Maybe<String>;
  endingDate_starts_with?: Maybe<String>;
  endingDate_not_starts_with?: Maybe<String>;
  endingDate_ends_with?: Maybe<String>;
  endingDate_not_ends_with?: Maybe<String>;
  terminationDate?: Maybe<String>;
  terminationDate_not?: Maybe<String>;
  terminationDate_in?: Maybe<String[] | String>;
  terminationDate_not_in?: Maybe<String[] | String>;
  terminationDate_lt?: Maybe<String>;
  terminationDate_lte?: Maybe<String>;
  terminationDate_gt?: Maybe<String>;
  terminationDate_gte?: Maybe<String>;
  terminationDate_contains?: Maybe<String>;
  terminationDate_not_contains?: Maybe<String>;
  terminationDate_starts_with?: Maybe<String>;
  terminationDate_not_starts_with?: Maybe<String>;
  terminationDate_ends_with?: Maybe<String>;
  terminationDate_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCode_not?: Maybe<String>;
  contactPersonCode_in?: Maybe<String[] | String>;
  contactPersonCode_not_in?: Maybe<String[] | String>;
  contactPersonCode_lt?: Maybe<String>;
  contactPersonCode_lte?: Maybe<String>;
  contactPersonCode_gt?: Maybe<String>;
  contactPersonCode_gte?: Maybe<String>;
  contactPersonCode_contains?: Maybe<String>;
  contactPersonCode_not_contains?: Maybe<String>;
  contactPersonCode_starts_with?: Maybe<String>;
  contactPersonCode_not_starts_with?: Maybe<String>;
  contactPersonCode_ends_with?: Maybe<String>;
  contactPersonCode_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  name2?: Maybe<String>;
  name2_not?: Maybe<String>;
  name2_in?: Maybe<String[] | String>;
  name2_not_in?: Maybe<String[] | String>;
  name2_lt?: Maybe<String>;
  name2_lte?: Maybe<String>;
  name2_gt?: Maybe<String>;
  name2_gte?: Maybe<String>;
  name2_contains?: Maybe<String>;
  name2_not_contains?: Maybe<String>;
  name2_starts_with?: Maybe<String>;
  name2_not_starts_with?: Maybe<String>;
  name2_ends_with?: Maybe<String>;
  name2_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postcode?: Maybe<String>;
  postcode_not?: Maybe<String>;
  postcode_in?: Maybe<String[] | String>;
  postcode_not_in?: Maybe<String[] | String>;
  postcode_lt?: Maybe<String>;
  postcode_lte?: Maybe<String>;
  postcode_gt?: Maybe<String>;
  postcode_gte?: Maybe<String>;
  postcode_contains?: Maybe<String>;
  postcode_not_contains?: Maybe<String>;
  postcode_starts_with?: Maybe<String>;
  postcode_not_starts_with?: Maybe<String>;
  postcode_ends_with?: Maybe<String>;
  postcode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  contactName?: Maybe<String>;
  contactName_not?: Maybe<String>;
  contactName_in?: Maybe<String[] | String>;
  contactName_not_in?: Maybe<String[] | String>;
  contactName_lt?: Maybe<String>;
  contactName_lte?: Maybe<String>;
  contactName_gt?: Maybe<String>;
  contactName_gte?: Maybe<String>;
  contactName_contains?: Maybe<String>;
  contactName_not_contains?: Maybe<String>;
  contactName_starts_with?: Maybe<String>;
  contactName_not_starts_with?: Maybe<String>;
  contactName_ends_with?: Maybe<String>;
  contactName_not_ends_with?: Maybe<String>;
  phoneNo?: Maybe<String>;
  phoneNo_not?: Maybe<String>;
  phoneNo_in?: Maybe<String[] | String>;
  phoneNo_not_in?: Maybe<String[] | String>;
  phoneNo_lt?: Maybe<String>;
  phoneNo_lte?: Maybe<String>;
  phoneNo_gt?: Maybe<String>;
  phoneNo_gte?: Maybe<String>;
  phoneNo_contains?: Maybe<String>;
  phoneNo_not_contains?: Maybe<String>;
  phoneNo_starts_with?: Maybe<String>;
  phoneNo_not_starts_with?: Maybe<String>;
  phoneNo_ends_with?: Maybe<String>;
  phoneNo_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToCustomerNoContr_not?: Maybe<String>;
  billToCustomerNoContr_in?: Maybe<String[] | String>;
  billToCustomerNoContr_not_in?: Maybe<String[] | String>;
  billToCustomerNoContr_lt?: Maybe<String>;
  billToCustomerNoContr_lte?: Maybe<String>;
  billToCustomerNoContr_gt?: Maybe<String>;
  billToCustomerNoContr_gte?: Maybe<String>;
  billToCustomerNoContr_contains?: Maybe<String>;
  billToCustomerNoContr_not_contains?: Maybe<String>;
  billToCustomerNoContr_starts_with?: Maybe<String>;
  billToCustomerNoContr_not_starts_with?: Maybe<String>;
  billToCustomerNoContr_ends_with?: Maybe<String>;
  billToCustomerNoContr_not_ends_with?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToNameContract_not?: Maybe<String>;
  billToNameContract_in?: Maybe<String[] | String>;
  billToNameContract_not_in?: Maybe<String[] | String>;
  billToNameContract_lt?: Maybe<String>;
  billToNameContract_lte?: Maybe<String>;
  billToNameContract_gt?: Maybe<String>;
  billToNameContract_gte?: Maybe<String>;
  billToNameContract_contains?: Maybe<String>;
  billToNameContract_not_contains?: Maybe<String>;
  billToNameContract_starts_with?: Maybe<String>;
  billToNameContract_not_starts_with?: Maybe<String>;
  billToNameContract_ends_with?: Maybe<String>;
  billToNameContract_not_ends_with?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToAddressContract_not?: Maybe<String>;
  billToAddressContract_in?: Maybe<String[] | String>;
  billToAddressContract_not_in?: Maybe<String[] | String>;
  billToAddressContract_lt?: Maybe<String>;
  billToAddressContract_lte?: Maybe<String>;
  billToAddressContract_gt?: Maybe<String>;
  billToAddressContract_gte?: Maybe<String>;
  billToAddressContract_contains?: Maybe<String>;
  billToAddressContract_not_contains?: Maybe<String>;
  billToAddressContract_starts_with?: Maybe<String>;
  billToAddressContract_not_starts_with?: Maybe<String>;
  billToAddressContract_ends_with?: Maybe<String>;
  billToAddressContract_not_ends_with?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToPostCodeContract_not?: Maybe<String>;
  billToPostCodeContract_in?: Maybe<String[] | String>;
  billToPostCodeContract_not_in?: Maybe<String[] | String>;
  billToPostCodeContract_lt?: Maybe<String>;
  billToPostCodeContract_lte?: Maybe<String>;
  billToPostCodeContract_gt?: Maybe<String>;
  billToPostCodeContract_gte?: Maybe<String>;
  billToPostCodeContract_contains?: Maybe<String>;
  billToPostCodeContract_not_contains?: Maybe<String>;
  billToPostCodeContract_starts_with?: Maybe<String>;
  billToPostCodeContract_not_starts_with?: Maybe<String>;
  billToPostCodeContract_ends_with?: Maybe<String>;
  billToPostCodeContract_not_ends_with?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToCityContract_not?: Maybe<String>;
  billToCityContract_in?: Maybe<String[] | String>;
  billToCityContract_not_in?: Maybe<String[] | String>;
  billToCityContract_lt?: Maybe<String>;
  billToCityContract_lte?: Maybe<String>;
  billToCityContract_gt?: Maybe<String>;
  billToCityContract_gte?: Maybe<String>;
  billToCityContract_contains?: Maybe<String>;
  billToCityContract_not_contains?: Maybe<String>;
  billToCityContract_starts_with?: Maybe<String>;
  billToCityContract_not_starts_with?: Maybe<String>;
  billToCityContract_ends_with?: Maybe<String>;
  billToCityContract_not_ends_with?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContactPersonContr_not?: Maybe<String>;
  billToContactPersonContr_in?: Maybe<String[] | String>;
  billToContactPersonContr_not_in?: Maybe<String[] | String>;
  billToContactPersonContr_lt?: Maybe<String>;
  billToContactPersonContr_lte?: Maybe<String>;
  billToContactPersonContr_gt?: Maybe<String>;
  billToContactPersonContr_gte?: Maybe<String>;
  billToContactPersonContr_contains?: Maybe<String>;
  billToContactPersonContr_not_contains?: Maybe<String>;
  billToContactPersonContr_starts_with?: Maybe<String>;
  billToContactPersonContr_not_starts_with?: Maybe<String>;
  billToContactPersonContr_ends_with?: Maybe<String>;
  billToContactPersonContr_not_ends_with?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  billToContPersNameCtr_not?: Maybe<String>;
  billToContPersNameCtr_in?: Maybe<String[] | String>;
  billToContPersNameCtr_not_in?: Maybe<String[] | String>;
  billToContPersNameCtr_lt?: Maybe<String>;
  billToContPersNameCtr_lte?: Maybe<String>;
  billToContPersNameCtr_gt?: Maybe<String>;
  billToContPersNameCtr_gte?: Maybe<String>;
  billToContPersNameCtr_contains?: Maybe<String>;
  billToContPersNameCtr_not_contains?: Maybe<String>;
  billToContPersNameCtr_starts_with?: Maybe<String>;
  billToContPersNameCtr_not_starts_with?: Maybe<String>;
  billToContPersNameCtr_ends_with?: Maybe<String>;
  billToContPersNameCtr_not_ends_with?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  globalDimension1Code_not?: Maybe<String>;
  globalDimension1Code_in?: Maybe<String[] | String>;
  globalDimension1Code_not_in?: Maybe<String[] | String>;
  globalDimension1Code_lt?: Maybe<String>;
  globalDimension1Code_lte?: Maybe<String>;
  globalDimension1Code_gt?: Maybe<String>;
  globalDimension1Code_gte?: Maybe<String>;
  globalDimension1Code_contains?: Maybe<String>;
  globalDimension1Code_not_contains?: Maybe<String>;
  globalDimension1Code_starts_with?: Maybe<String>;
  globalDimension1Code_not_starts_with?: Maybe<String>;
  globalDimension1Code_ends_with?: Maybe<String>;
  globalDimension1Code_not_ends_with?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  initialSalesAmount_not?: Maybe<Float>;
  initialSalesAmount_in?: Maybe<Float[] | Float>;
  initialSalesAmount_not_in?: Maybe<Float[] | Float>;
  initialSalesAmount_lt?: Maybe<Float>;
  initialSalesAmount_lte?: Maybe<Float>;
  initialSalesAmount_gt?: Maybe<Float>;
  initialSalesAmount_gte?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_not?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_in?: Maybe<
    Float[] | Float
  >;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_not_in?: Maybe<
    Float[] | Float
  >;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_lt?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_lte?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_gt?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate_gte?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  lastIndexDate_not?: Maybe<String>;
  lastIndexDate_in?: Maybe<String[] | String>;
  lastIndexDate_not_in?: Maybe<String[] | String>;
  lastIndexDate_lt?: Maybe<String>;
  lastIndexDate_lte?: Maybe<String>;
  lastIndexDate_gt?: Maybe<String>;
  lastIndexDate_gte?: Maybe<String>;
  lastIndexDate_contains?: Maybe<String>;
  lastIndexDate_not_contains?: Maybe<String>;
  lastIndexDate_starts_with?: Maybe<String>;
  lastIndexDate_not_starts_with?: Maybe<String>;
  lastIndexDate_ends_with?: Maybe<String>;
  lastIndexDate_not_ends_with?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManager_not?: Maybe<String>;
  contractManager_in?: Maybe<String[] | String>;
  contractManager_not_in?: Maybe<String[] | String>;
  contractManager_lt?: Maybe<String>;
  contractManager_lte?: Maybe<String>;
  contractManager_gt?: Maybe<String>;
  contractManager_gte?: Maybe<String>;
  contractManager_contains?: Maybe<String>;
  contractManager_not_contains?: Maybe<String>;
  contractManager_starts_with?: Maybe<String>;
  contractManager_not_starts_with?: Maybe<String>;
  contractManager_ends_with?: Maybe<String>;
  contractManager_not_ends_with?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  contractManagerName_not?: Maybe<String>;
  contractManagerName_in?: Maybe<String[] | String>;
  contractManagerName_not_in?: Maybe<String[] | String>;
  contractManagerName_lt?: Maybe<String>;
  contractManagerName_lte?: Maybe<String>;
  contractManagerName_gt?: Maybe<String>;
  contractManagerName_gte?: Maybe<String>;
  contractManagerName_contains?: Maybe<String>;
  contractManagerName_not_contains?: Maybe<String>;
  contractManagerName_starts_with?: Maybe<String>;
  contractManagerName_not_starts_with?: Maybe<String>;
  contractManagerName_ends_with?: Maybe<String>;
  contractManagerName_not_ends_with?: Maybe<String>;
  yourReference?: Maybe<String>;
  yourReference_not?: Maybe<String>;
  yourReference_in?: Maybe<String[] | String>;
  yourReference_not_in?: Maybe<String[] | String>;
  yourReference_lt?: Maybe<String>;
  yourReference_lte?: Maybe<String>;
  yourReference_gt?: Maybe<String>;
  yourReference_gte?: Maybe<String>;
  yourReference_contains?: Maybe<String>;
  yourReference_not_contains?: Maybe<String>;
  yourReference_starts_with?: Maybe<String>;
  yourReference_not_starts_with?: Maybe<String>;
  yourReference_ends_with?: Maybe<String>;
  yourReference_not_ends_with?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  blocked_not?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  firstYearMaintenance_not?: Maybe<Int>;
  firstYearMaintenance_in?: Maybe<Int[] | Int>;
  firstYearMaintenance_not_in?: Maybe<Int[] | Int>;
  firstYearMaintenance_lt?: Maybe<Int>;
  firstYearMaintenance_lte?: Maybe<Int>;
  firstYearMaintenance_gt?: Maybe<Int>;
  firstYearMaintenance_gte?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  maintenanceMonth_not?: Maybe<Int>;
  maintenanceMonth_in?: Maybe<Int[] | Int>;
  maintenanceMonth_not_in?: Maybe<Int[] | Int>;
  maintenanceMonth_lt?: Maybe<Int>;
  maintenanceMonth_lte?: Maybe<Int>;
  maintenanceMonth_gt?: Maybe<Int>;
  maintenanceMonth_gte?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  acknowledgedSO_not?: Maybe<Int>;
  acknowledgedSO_in?: Maybe<Int[] | Int>;
  acknowledgedSO_not_in?: Maybe<Int[] | Int>;
  acknowledgedSO_lt?: Maybe<Int>;
  acknowledgedSO_lte?: Maybe<Int>;
  acknowledgedSO_gt?: Maybe<Int>;
  acknowledgedSO_gte?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  createdSO_not?: Maybe<Int>;
  createdSO_in?: Maybe<Int[] | Int>;
  createdSO_not_in?: Maybe<Int[] | Int>;
  createdSO_lt?: Maybe<Int>;
  createdSO_lte?: Maybe<Int>;
  createdSO_gt?: Maybe<Int>;
  createdSO_gte?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  openedSO_not?: Maybe<Int>;
  openedSO_in?: Maybe<Int[] | Int>;
  openedSO_not_in?: Maybe<Int[] | Int>;
  openedSO_lt?: Maybe<Int>;
  openedSO_lte?: Maybe<Int>;
  openedSO_gt?: Maybe<Int>;
  openedSO_gte?: Maybe<Int>;
  readySO?: Maybe<Int>;
  readySO_not?: Maybe<Int>;
  readySO_in?: Maybe<Int[] | Int>;
  readySO_not_in?: Maybe<Int[] | Int>;
  readySO_lt?: Maybe<Int>;
  readySO_lte?: Maybe<Int>;
  readySO_gt?: Maybe<Int>;
  readySO_gte?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  percentageReady_not?: Maybe<Int>;
  percentageReady_in?: Maybe<Int[] | Int>;
  percentageReady_not_in?: Maybe<Int[] | Int>;
  percentageReady_lt?: Maybe<Int>;
  percentageReady_lte?: Maybe<Int>;
  percentageReady_gt?: Maybe<Int>;
  percentageReady_gte?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  workingHours_not?: Maybe<Float>;
  workingHours_in?: Maybe<Float[] | Float>;
  workingHours_not_in?: Maybe<Float[] | Float>;
  workingHours_lt?: Maybe<Float>;
  workingHours_lte?: Maybe<Float>;
  workingHours_gt?: Maybe<Float>;
  workingHours_gte?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  spendHours_not?: Maybe<Float>;
  spendHours_in?: Maybe<Float[] | Float>;
  spendHours_not_in?: Maybe<Float[] | Float>;
  spendHours_lt?: Maybe<Float>;
  spendHours_lte?: Maybe<Float>;
  spendHours_gt?: Maybe<Float>;
  spendHours_gte?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  hoursSpentLastYear_not?: Maybe<Float>;
  hoursSpentLastYear_in?: Maybe<Float[] | Float>;
  hoursSpentLastYear_not_in?: Maybe<Float[] | Float>;
  hoursSpentLastYear_lt?: Maybe<Float>;
  hoursSpentLastYear_lte?: Maybe<Float>;
  hoursSpentLastYear_gt?: Maybe<Float>;
  hoursSpentLastYear_gte?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  totalCost_not?: Maybe<Float>;
  totalCost_in?: Maybe<Float[] | Float>;
  totalCost_not_in?: Maybe<Float[] | Float>;
  totalCost_lt?: Maybe<Float>;
  totalCost_lte?: Maybe<Float>;
  totalCost_gt?: Maybe<Float>;
  totalCost_gte?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  billedAmount_not?: Maybe<Float>;
  billedAmount_in?: Maybe<Float[] | Float>;
  billedAmount_not_in?: Maybe<Float[] | Float>;
  billedAmount_lt?: Maybe<Float>;
  billedAmount_lte?: Maybe<Float>;
  billedAmount_gt?: Maybe<Float>;
  billedAmount_gte?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  invoicedUntil_not?: Maybe<String>;
  invoicedUntil_in?: Maybe<String[] | String>;
  invoicedUntil_not_in?: Maybe<String[] | String>;
  invoicedUntil_lt?: Maybe<String>;
  invoicedUntil_lte?: Maybe<String>;
  invoicedUntil_gt?: Maybe<String>;
  invoicedUntil_gte?: Maybe<String>;
  invoicedUntil_contains?: Maybe<String>;
  invoicedUntil_not_contains?: Maybe<String>;
  invoicedUntil_starts_with?: Maybe<String>;
  invoicedUntil_not_starts_with?: Maybe<String>;
  invoicedUntil_ends_with?: Maybe<String>;
  invoicedUntil_not_ends_with?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2Dak_not?: Maybe<Float>;
  m2Dak_in?: Maybe<Float[] | Float>;
  m2Dak_not_in?: Maybe<Float[] | Float>;
  m2Dak_lt?: Maybe<Float>;
  m2Dak_lte?: Maybe<Float>;
  m2Dak_gt?: Maybe<Float>;
  m2Dak_gte?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReady_not?: Maybe<Float>;
  m2DakReady_in?: Maybe<Float[] | Float>;
  m2DakReady_not_in?: Maybe<Float[] | Float>;
  m2DakReady_lt?: Maybe<Float>;
  m2DakReady_lte?: Maybe<Float>;
  m2DakReady_gt?: Maybe<Float>;
  m2DakReady_gte?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  m2DakReadyPercent_not?: Maybe<String>;
  m2DakReadyPercent_in?: Maybe<String[] | String>;
  m2DakReadyPercent_not_in?: Maybe<String[] | String>;
  m2DakReadyPercent_lt?: Maybe<String>;
  m2DakReadyPercent_lte?: Maybe<String>;
  m2DakReadyPercent_gt?: Maybe<String>;
  m2DakReadyPercent_gte?: Maybe<String>;
  m2DakReadyPercent_contains?: Maybe<String>;
  m2DakReadyPercent_not_contains?: Maybe<String>;
  m2DakReadyPercent_starts_with?: Maybe<String>;
  m2DakReadyPercent_not_starts_with?: Maybe<String>;
  m2DakReadyPercent_ends_with?: Maybe<String>;
  m2DakReadyPercent_not_ends_with?: Maybe<String>;
  reportDocument?: Maybe<String>;
  reportDocument_not?: Maybe<String>;
  reportDocument_in?: Maybe<String[] | String>;
  reportDocument_not_in?: Maybe<String[] | String>;
  reportDocument_lt?: Maybe<String>;
  reportDocument_lte?: Maybe<String>;
  reportDocument_gt?: Maybe<String>;
  reportDocument_gte?: Maybe<String>;
  reportDocument_contains?: Maybe<String>;
  reportDocument_not_contains?: Maybe<String>;
  reportDocument_starts_with?: Maybe<String>;
  reportDocument_not_starts_with?: Maybe<String>;
  reportDocument_ends_with?: Maybe<String>;
  reportDocument_not_ends_with?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  installmentsBasedOnProgress_not?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  invoiceType_not?: Maybe<ContractInvoiceType>;
  invoiceType_in?: Maybe<ContractInvoiceType[] | ContractInvoiceType>;
  invoiceType_not_in?: Maybe<ContractInvoiceType[] | ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  installmentType_not?: Maybe<ContractInstallmentType>;
  installmentType_in?: Maybe<
    ContractInstallmentType[] | ContractInstallmentType
  >;
  installmentType_not_in?: Maybe<
    ContractInstallmentType[] | ContractInstallmentType
  >;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  invoicePeriod_not?: Maybe<ContractInvoicePeriod>;
  invoicePeriod_in?: Maybe<ContractInvoicePeriod[] | ContractInvoicePeriod>;
  invoicePeriod_not_in?: Maybe<ContractInvoicePeriod[] | ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  currencyCode_not?: Maybe<String>;
  currencyCode_in?: Maybe<String[] | String>;
  currencyCode_not_in?: Maybe<String[] | String>;
  currencyCode_lt?: Maybe<String>;
  currencyCode_lte?: Maybe<String>;
  currencyCode_gt?: Maybe<String>;
  currencyCode_gte?: Maybe<String>;
  currencyCode_contains?: Maybe<String>;
  currencyCode_not_contains?: Maybe<String>;
  currencyCode_starts_with?: Maybe<String>;
  currencyCode_not_starts_with?: Maybe<String>;
  currencyCode_ends_with?: Maybe<String>;
  currencyCode_not_ends_with?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  serviceIndexMethod_not?: Maybe<String>;
  serviceIndexMethod_in?: Maybe<String[] | String>;
  serviceIndexMethod_not_in?: Maybe<String[] | String>;
  serviceIndexMethod_lt?: Maybe<String>;
  serviceIndexMethod_lte?: Maybe<String>;
  serviceIndexMethod_gt?: Maybe<String>;
  serviceIndexMethod_gte?: Maybe<String>;
  serviceIndexMethod_contains?: Maybe<String>;
  serviceIndexMethod_not_contains?: Maybe<String>;
  serviceIndexMethod_starts_with?: Maybe<String>;
  serviceIndexMethod_not_starts_with?: Maybe<String>;
  serviceIndexMethod_ends_with?: Maybe<String>;
  serviceIndexMethod_not_ends_with?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  invoiceTextInstallments_not?: Maybe<String>;
  invoiceTextInstallments_in?: Maybe<String[] | String>;
  invoiceTextInstallments_not_in?: Maybe<String[] | String>;
  invoiceTextInstallments_lt?: Maybe<String>;
  invoiceTextInstallments_lte?: Maybe<String>;
  invoiceTextInstallments_gt?: Maybe<String>;
  invoiceTextInstallments_gte?: Maybe<String>;
  invoiceTextInstallments_contains?: Maybe<String>;
  invoiceTextInstallments_not_contains?: Maybe<String>;
  invoiceTextInstallments_starts_with?: Maybe<String>;
  invoiceTextInstallments_not_starts_with?: Maybe<String>;
  invoiceTextInstallments_ends_with?: Maybe<String>;
  invoiceTextInstallments_not_ends_with?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  outsourced_not?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  lastExecutedBy_not?: Maybe<String>;
  lastExecutedBy_in?: Maybe<String[] | String>;
  lastExecutedBy_not_in?: Maybe<String[] | String>;
  lastExecutedBy_lt?: Maybe<String>;
  lastExecutedBy_lte?: Maybe<String>;
  lastExecutedBy_gt?: Maybe<String>;
  lastExecutedBy_gte?: Maybe<String>;
  lastExecutedBy_contains?: Maybe<String>;
  lastExecutedBy_not_contains?: Maybe<String>;
  lastExecutedBy_starts_with?: Maybe<String>;
  lastExecutedBy_not_starts_with?: Maybe<String>;
  lastExecutedBy_ends_with?: Maybe<String>;
  lastExecutedBy_not_ends_with?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  ServiceAppointments_every?: Maybe<ServiceAppointmentWhereInput>;
  ServiceAppointments_some?: Maybe<ServiceAppointmentWhereInput>;
  ServiceAppointments_none?: Maybe<ServiceAppointmentWhereInput>;
  serviceOrders_every?: Maybe<ServiceOrderWhereInput>;
  serviceOrders_some?: Maybe<ServiceOrderWhereInput>;
  serviceOrders_none?: Maybe<ServiceOrderWhereInput>;
  AND?: Maybe<ServiceContractWhereInput[] | ServiceContractWhereInput>;
  OR?: Maybe<ServiceContractWhereInput[] | ServiceContractWhereInput>;
  NOT?: Maybe<ServiceContractWhereInput[] | ServiceContractWhereInput>;
}

export interface MomentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<Int>;
  code_not?: Maybe<Int>;
  code_in?: Maybe<Int[] | Int>;
  code_not_in?: Maybe<Int[] | Int>;
  code_lt?: Maybe<Int>;
  code_lte?: Maybe<Int>;
  code_gt?: Maybe<Int>;
  code_gte?: Maybe<Int>;
  type?: Maybe<MomentEntityType>;
  type_not?: Maybe<MomentEntityType>;
  type_in?: Maybe<MomentEntityType[] | MomentEntityType>;
  type_not_in?: Maybe<MomentEntityType[] | MomentEntityType>;
  navisionCode?: Maybe<Int>;
  navisionCode_not?: Maybe<Int>;
  navisionCode_in?: Maybe<Int[] | Int>;
  navisionCode_not_in?: Maybe<Int[] | Int>;
  navisionCode_lt?: Maybe<Int>;
  navisionCode_lte?: Maybe<Int>;
  navisionCode_gt?: Maybe<Int>;
  navisionCode_gte?: Maybe<Int>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  actionId?: Maybe<String>;
  actionId_not?: Maybe<String>;
  actionId_in?: Maybe<String[] | String>;
  actionId_not_in?: Maybe<String[] | String>;
  actionId_lt?: Maybe<String>;
  actionId_lte?: Maybe<String>;
  actionId_gt?: Maybe<String>;
  actionId_gte?: Maybe<String>;
  actionId_contains?: Maybe<String>;
  actionId_not_contains?: Maybe<String>;
  actionId_starts_with?: Maybe<String>;
  actionId_not_starts_with?: Maybe<String>;
  actionId_ends_with?: Maybe<String>;
  actionId_not_ends_with?: Maybe<String>;
  hasSoStatusChange?: Maybe<Boolean>;
  hasSoStatusChange_not?: Maybe<Boolean>;
  hasWoPlanningStatusChange?: Maybe<Boolean>;
  hasWoPlanningStatusChange_not?: Maybe<Boolean>;
  hasScStatusChange?: Maybe<Boolean>;
  hasScStatusChange_not?: Maybe<Boolean>;
  isWOPlanningBlocked?: Maybe<Boolean>;
  isWOPlanningBlocked_not?: Maybe<Boolean>;
  isSCBlocked?: Maybe<Boolean>;
  isSCBlocked_not?: Maybe<Boolean>;
  isSOBlocked?: Maybe<Boolean>;
  isSOBlocked_not?: Maybe<Boolean>;
  isExportBlocked?: Maybe<Boolean>;
  isExportBlocked_not?: Maybe<Boolean>;
  AND?: Maybe<MomentWhereInput[] | MomentWhereInput>;
  OR?: Maybe<MomentWhereInput[] | MomentWhereInput>;
  NOT?: Maybe<MomentWhereInput[] | MomentWhereInput>;
}

export type ActivityLogHistoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CustomerFeedbackWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  actionId?: Maybe<String>;
  actionId_not?: Maybe<String>;
  actionId_in?: Maybe<String[] | String>;
  actionId_not_in?: Maybe<String[] | String>;
  actionId_lt?: Maybe<String>;
  actionId_lte?: Maybe<String>;
  actionId_gt?: Maybe<String>;
  actionId_gte?: Maybe<String>;
  actionId_contains?: Maybe<String>;
  actionId_not_contains?: Maybe<String>;
  actionId_starts_with?: Maybe<String>;
  actionId_not_starts_with?: Maybe<String>;
  actionId_ends_with?: Maybe<String>;
  actionId_not_ends_with?: Maybe<String>;
  type?: Maybe<EventType>;
  type_not?: Maybe<EventType>;
  type_in?: Maybe<EventType[] | EventType>;
  type_not_in?: Maybe<EventType[] | EventType>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export type FaqWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FaqWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  header?: Maybe<String>;
  header_not?: Maybe<String>;
  header_in?: Maybe<String[] | String>;
  header_not_in?: Maybe<String[] | String>;
  header_lt?: Maybe<String>;
  header_lte?: Maybe<String>;
  header_gt?: Maybe<String>;
  header_gte?: Maybe<String>;
  header_contains?: Maybe<String>;
  header_not_contains?: Maybe<String>;
  header_starts_with?: Maybe<String>;
  header_not_starts_with?: Maybe<String>;
  header_ends_with?: Maybe<String>;
  header_not_ends_with?: Maybe<String>;
  projectNumber?: Maybe<String>;
  projectNumber_not?: Maybe<String>;
  projectNumber_in?: Maybe<String[] | String>;
  projectNumber_not_in?: Maybe<String[] | String>;
  projectNumber_lt?: Maybe<String>;
  projectNumber_lte?: Maybe<String>;
  projectNumber_gt?: Maybe<String>;
  projectNumber_gte?: Maybe<String>;
  projectNumber_contains?: Maybe<String>;
  projectNumber_not_contains?: Maybe<String>;
  projectNumber_starts_with?: Maybe<String>;
  projectNumber_not_starts_with?: Maybe<String>;
  projectNumber_ends_with?: Maybe<String>;
  projectNumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<FaqWhereInput[] | FaqWhereInput>;
  OR?: Maybe<FaqWhereInput[] | FaqWhereInput>;
  NOT?: Maybe<FaqWhereInput[] | FaqWhereInput>;
}

export type KimInformationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  projectNumber?: Maybe<String>;
}>;

export interface KimInformationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  projectNumber?: Maybe<String>;
  projectNumber_not?: Maybe<String>;
  projectNumber_in?: Maybe<String[] | String>;
  projectNumber_not_in?: Maybe<String[] | String>;
  projectNumber_lt?: Maybe<String>;
  projectNumber_lte?: Maybe<String>;
  projectNumber_gt?: Maybe<String>;
  projectNumber_gte?: Maybe<String>;
  projectNumber_contains?: Maybe<String>;
  projectNumber_not_contains?: Maybe<String>;
  projectNumber_starts_with?: Maybe<String>;
  projectNumber_not_starts_with?: Maybe<String>;
  projectNumber_ends_with?: Maybe<String>;
  projectNumber_not_ends_with?: Maybe<String>;
  projectLeader?: Maybe<String>;
  projectLeader_not?: Maybe<String>;
  projectLeader_in?: Maybe<String[] | String>;
  projectLeader_not_in?: Maybe<String[] | String>;
  projectLeader_lt?: Maybe<String>;
  projectLeader_lte?: Maybe<String>;
  projectLeader_gt?: Maybe<String>;
  projectLeader_gte?: Maybe<String>;
  projectLeader_contains?: Maybe<String>;
  projectLeader_not_contains?: Maybe<String>;
  projectLeader_starts_with?: Maybe<String>;
  projectLeader_not_starts_with?: Maybe<String>;
  projectLeader_ends_with?: Maybe<String>;
  projectLeader_not_ends_with?: Maybe<String>;
  projectLeaderPhoto?: Maybe<String>;
  projectLeaderPhoto_not?: Maybe<String>;
  projectLeaderPhoto_in?: Maybe<String[] | String>;
  projectLeaderPhoto_not_in?: Maybe<String[] | String>;
  projectLeaderPhoto_lt?: Maybe<String>;
  projectLeaderPhoto_lte?: Maybe<String>;
  projectLeaderPhoto_gt?: Maybe<String>;
  projectLeaderPhoto_gte?: Maybe<String>;
  projectLeaderPhoto_contains?: Maybe<String>;
  projectLeaderPhoto_not_contains?: Maybe<String>;
  projectLeaderPhoto_starts_with?: Maybe<String>;
  projectLeaderPhoto_not_starts_with?: Maybe<String>;
  projectLeaderPhoto_ends_with?: Maybe<String>;
  projectLeaderPhoto_not_ends_with?: Maybe<String>;
  foreman?: Maybe<String>;
  foreman_not?: Maybe<String>;
  foreman_in?: Maybe<String[] | String>;
  foreman_not_in?: Maybe<String[] | String>;
  foreman_lt?: Maybe<String>;
  foreman_lte?: Maybe<String>;
  foreman_gt?: Maybe<String>;
  foreman_gte?: Maybe<String>;
  foreman_contains?: Maybe<String>;
  foreman_not_contains?: Maybe<String>;
  foreman_starts_with?: Maybe<String>;
  foreman_not_starts_with?: Maybe<String>;
  foreman_ends_with?: Maybe<String>;
  foreman_not_ends_with?: Maybe<String>;
  foremanPhoto?: Maybe<String>;
  foremanPhoto_not?: Maybe<String>;
  foremanPhoto_in?: Maybe<String[] | String>;
  foremanPhoto_not_in?: Maybe<String[] | String>;
  foremanPhoto_lt?: Maybe<String>;
  foremanPhoto_lte?: Maybe<String>;
  foremanPhoto_gt?: Maybe<String>;
  foremanPhoto_gte?: Maybe<String>;
  foremanPhoto_contains?: Maybe<String>;
  foremanPhoto_not_contains?: Maybe<String>;
  foremanPhoto_starts_with?: Maybe<String>;
  foremanPhoto_not_starts_with?: Maybe<String>;
  foremanPhoto_ends_with?: Maybe<String>;
  foremanPhoto_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  schedule?: Maybe<String>;
  schedule_not?: Maybe<String>;
  schedule_in?: Maybe<String[] | String>;
  schedule_not_in?: Maybe<String[] | String>;
  schedule_lt?: Maybe<String>;
  schedule_lte?: Maybe<String>;
  schedule_gt?: Maybe<String>;
  schedule_gte?: Maybe<String>;
  schedule_contains?: Maybe<String>;
  schedule_not_contains?: Maybe<String>;
  schedule_starts_with?: Maybe<String>;
  schedule_not_starts_with?: Maybe<String>;
  schedule_ends_with?: Maybe<String>;
  schedule_not_ends_with?: Maybe<String>;
  deliveryDate?: Maybe<String>;
  deliveryDate_not?: Maybe<String>;
  deliveryDate_in?: Maybe<String[] | String>;
  deliveryDate_not_in?: Maybe<String[] | String>;
  deliveryDate_lt?: Maybe<String>;
  deliveryDate_lte?: Maybe<String>;
  deliveryDate_gt?: Maybe<String>;
  deliveryDate_gte?: Maybe<String>;
  deliveryDate_contains?: Maybe<String>;
  deliveryDate_not_contains?: Maybe<String>;
  deliveryDate_starts_with?: Maybe<String>;
  deliveryDate_not_starts_with?: Maybe<String>;
  deliveryDate_ends_with?: Maybe<String>;
  deliveryDate_not_ends_with?: Maybe<String>;
  noiseAndDrilling?: Maybe<String>;
  noiseAndDrilling_not?: Maybe<String>;
  noiseAndDrilling_in?: Maybe<String[] | String>;
  noiseAndDrilling_not_in?: Maybe<String[] | String>;
  noiseAndDrilling_lt?: Maybe<String>;
  noiseAndDrilling_lte?: Maybe<String>;
  noiseAndDrilling_gt?: Maybe<String>;
  noiseAndDrilling_gte?: Maybe<String>;
  noiseAndDrilling_contains?: Maybe<String>;
  noiseAndDrilling_not_contains?: Maybe<String>;
  noiseAndDrilling_starts_with?: Maybe<String>;
  noiseAndDrilling_not_starts_with?: Maybe<String>;
  noiseAndDrilling_ends_with?: Maybe<String>;
  noiseAndDrilling_not_ends_with?: Maybe<String>;
  noiseAndGravel?: Maybe<String>;
  noiseAndGravel_not?: Maybe<String>;
  noiseAndGravel_in?: Maybe<String[] | String>;
  noiseAndGravel_not_in?: Maybe<String[] | String>;
  noiseAndGravel_lt?: Maybe<String>;
  noiseAndGravel_lte?: Maybe<String>;
  noiseAndGravel_gt?: Maybe<String>;
  noiseAndGravel_gte?: Maybe<String>;
  noiseAndGravel_contains?: Maybe<String>;
  noiseAndGravel_not_contains?: Maybe<String>;
  noiseAndGravel_starts_with?: Maybe<String>;
  noiseAndGravel_not_starts_with?: Maybe<String>;
  noiseAndGravel_ends_with?: Maybe<String>;
  noiseAndGravel_not_ends_with?: Maybe<String>;
  noiseAndDemolition?: Maybe<String>;
  noiseAndDemolition_not?: Maybe<String>;
  noiseAndDemolition_in?: Maybe<String[] | String>;
  noiseAndDemolition_not_in?: Maybe<String[] | String>;
  noiseAndDemolition_lt?: Maybe<String>;
  noiseAndDemolition_lte?: Maybe<String>;
  noiseAndDemolition_gt?: Maybe<String>;
  noiseAndDemolition_gte?: Maybe<String>;
  noiseAndDemolition_contains?: Maybe<String>;
  noiseAndDemolition_not_contains?: Maybe<String>;
  noiseAndDemolition_starts_with?: Maybe<String>;
  noiseAndDemolition_not_starts_with?: Maybe<String>;
  noiseAndDemolition_ends_with?: Maybe<String>;
  noiseAndDemolition_not_ends_with?: Maybe<String>;
  vibrationDemolition?: Maybe<String>;
  vibrationDemolition_not?: Maybe<String>;
  vibrationDemolition_in?: Maybe<String[] | String>;
  vibrationDemolition_not_in?: Maybe<String[] | String>;
  vibrationDemolition_lt?: Maybe<String>;
  vibrationDemolition_lte?: Maybe<String>;
  vibrationDemolition_gt?: Maybe<String>;
  vibrationDemolition_gte?: Maybe<String>;
  vibrationDemolition_contains?: Maybe<String>;
  vibrationDemolition_not_contains?: Maybe<String>;
  vibrationDemolition_starts_with?: Maybe<String>;
  vibrationDemolition_not_starts_with?: Maybe<String>;
  vibrationDemolition_ends_with?: Maybe<String>;
  vibrationDemolition_not_ends_with?: Maybe<String>;
  dustAndWipe?: Maybe<String>;
  dustAndWipe_not?: Maybe<String>;
  dustAndWipe_in?: Maybe<String[] | String>;
  dustAndWipe_not_in?: Maybe<String[] | String>;
  dustAndWipe_lt?: Maybe<String>;
  dustAndWipe_lte?: Maybe<String>;
  dustAndWipe_gt?: Maybe<String>;
  dustAndWipe_gte?: Maybe<String>;
  dustAndWipe_contains?: Maybe<String>;
  dustAndWipe_not_contains?: Maybe<String>;
  dustAndWipe_starts_with?: Maybe<String>;
  dustAndWipe_not_starts_with?: Maybe<String>;
  dustAndWipe_ends_with?: Maybe<String>;
  dustAndWipe_not_ends_with?: Maybe<String>;
  dustAndDemolish?: Maybe<String>;
  dustAndDemolish_not?: Maybe<String>;
  dustAndDemolish_in?: Maybe<String[] | String>;
  dustAndDemolish_not_in?: Maybe<String[] | String>;
  dustAndDemolish_lt?: Maybe<String>;
  dustAndDemolish_lte?: Maybe<String>;
  dustAndDemolish_gt?: Maybe<String>;
  dustAndDemolish_gte?: Maybe<String>;
  dustAndDemolish_contains?: Maybe<String>;
  dustAndDemolish_not_contains?: Maybe<String>;
  dustAndDemolish_starts_with?: Maybe<String>;
  dustAndDemolish_not_starts_with?: Maybe<String>;
  dustAndDemolish_ends_with?: Maybe<String>;
  dustAndDemolish_not_ends_with?: Maybe<String>;
  smellAndBitumen?: Maybe<String>;
  smellAndBitumen_not?: Maybe<String>;
  smellAndBitumen_in?: Maybe<String[] | String>;
  smellAndBitumen_not_in?: Maybe<String[] | String>;
  smellAndBitumen_lt?: Maybe<String>;
  smellAndBitumen_lte?: Maybe<String>;
  smellAndBitumen_gt?: Maybe<String>;
  smellAndBitumen_gte?: Maybe<String>;
  smellAndBitumen_contains?: Maybe<String>;
  smellAndBitumen_not_contains?: Maybe<String>;
  smellAndBitumen_starts_with?: Maybe<String>;
  smellAndBitumen_not_starts_with?: Maybe<String>;
  smellAndBitumen_ends_with?: Maybe<String>;
  smellAndBitumen_not_ends_with?: Maybe<String>;
  smellAndCoatings?: Maybe<String>;
  smellAndCoatings_not?: Maybe<String>;
  smellAndCoatings_in?: Maybe<String[] | String>;
  smellAndCoatings_not_in?: Maybe<String[] | String>;
  smellAndCoatings_lt?: Maybe<String>;
  smellAndCoatings_lte?: Maybe<String>;
  smellAndCoatings_gt?: Maybe<String>;
  smellAndCoatings_gte?: Maybe<String>;
  smellAndCoatings_contains?: Maybe<String>;
  smellAndCoatings_not_contains?: Maybe<String>;
  smellAndCoatings_starts_with?: Maybe<String>;
  smellAndCoatings_not_starts_with?: Maybe<String>;
  smellAndCoatings_ends_with?: Maybe<String>;
  smellAndCoatings_not_ends_with?: Maybe<String>;
  crane?: Maybe<String>;
  crane_not?: Maybe<String>;
  crane_in?: Maybe<String[] | String>;
  crane_not_in?: Maybe<String[] | String>;
  crane_lt?: Maybe<String>;
  crane_lte?: Maybe<String>;
  crane_gt?: Maybe<String>;
  crane_gte?: Maybe<String>;
  crane_contains?: Maybe<String>;
  crane_not_contains?: Maybe<String>;
  crane_starts_with?: Maybe<String>;
  crane_not_starts_with?: Maybe<String>;
  crane_ends_with?: Maybe<String>;
  crane_not_ends_with?: Maybe<String>;
  container?: Maybe<String>;
  container_not?: Maybe<String>;
  container_in?: Maybe<String[] | String>;
  container_not_in?: Maybe<String[] | String>;
  container_lt?: Maybe<String>;
  container_lte?: Maybe<String>;
  container_gt?: Maybe<String>;
  container_gte?: Maybe<String>;
  container_contains?: Maybe<String>;
  container_not_contains?: Maybe<String>;
  container_starts_with?: Maybe<String>;
  container_not_starts_with?: Maybe<String>;
  container_ends_with?: Maybe<String>;
  container_not_ends_with?: Maybe<String>;
  constructionSite?: Maybe<String>;
  constructionSite_not?: Maybe<String>;
  constructionSite_in?: Maybe<String[] | String>;
  constructionSite_not_in?: Maybe<String[] | String>;
  constructionSite_lt?: Maybe<String>;
  constructionSite_lte?: Maybe<String>;
  constructionSite_gt?: Maybe<String>;
  constructionSite_gte?: Maybe<String>;
  constructionSite_contains?: Maybe<String>;
  constructionSite_not_contains?: Maybe<String>;
  constructionSite_starts_with?: Maybe<String>;
  constructionSite_not_starts_with?: Maybe<String>;
  constructionSite_ends_with?: Maybe<String>;
  constructionSite_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<KimInformationWhereInput[] | KimInformationWhereInput>;
  OR?: Maybe<KimInformationWhereInput[] | KimInformationWhereInput>;
  NOT?: Maybe<KimInformationWhereInput[] | KimInformationWhereInput>;
}

export type MomentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  projectNumber?: Maybe<String>;
}>;

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  projectNumber?: Maybe<String>;
  projectNumber_not?: Maybe<String>;
  projectNumber_in?: Maybe<String[] | String>;
  projectNumber_not_in?: Maybe<String[] | String>;
  projectNumber_lt?: Maybe<String>;
  projectNumber_lte?: Maybe<String>;
  projectNumber_gt?: Maybe<String>;
  projectNumber_gte?: Maybe<String>;
  projectNumber_contains?: Maybe<String>;
  projectNumber_not_contains?: Maybe<String>;
  projectNumber_starts_with?: Maybe<String>;
  projectNumber_not_starts_with?: Maybe<String>;
  projectNumber_ends_with?: Maybe<String>;
  projectNumber_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  ownerCode?: Maybe<String>;
  ownerCode_not?: Maybe<String>;
  ownerCode_in?: Maybe<String[] | String>;
  ownerCode_not_in?: Maybe<String[] | String>;
  ownerCode_lt?: Maybe<String>;
  ownerCode_lte?: Maybe<String>;
  ownerCode_gt?: Maybe<String>;
  ownerCode_gte?: Maybe<String>;
  ownerCode_contains?: Maybe<String>;
  ownerCode_not_contains?: Maybe<String>;
  ownerCode_starts_with?: Maybe<String>;
  ownerCode_not_starts_with?: Maybe<String>;
  ownerCode_ends_with?: Maybe<String>;
  ownerCode_not_ends_with?: Maybe<String>;
  employeeName?: Maybe<String>;
  employeeName_not?: Maybe<String>;
  employeeName_in?: Maybe<String[] | String>;
  employeeName_not_in?: Maybe<String[] | String>;
  employeeName_lt?: Maybe<String>;
  employeeName_lte?: Maybe<String>;
  employeeName_gt?: Maybe<String>;
  employeeName_gte?: Maybe<String>;
  employeeName_contains?: Maybe<String>;
  employeeName_not_contains?: Maybe<String>;
  employeeName_starts_with?: Maybe<String>;
  employeeName_not_starts_with?: Maybe<String>;
  employeeName_ends_with?: Maybe<String>;
  employeeName_not_ends_with?: Maybe<String>;
  mainProject?: Maybe<String>;
  mainProject_not?: Maybe<String>;
  mainProject_in?: Maybe<String[] | String>;
  mainProject_not_in?: Maybe<String[] | String>;
  mainProject_lt?: Maybe<String>;
  mainProject_lte?: Maybe<String>;
  mainProject_gt?: Maybe<String>;
  mainProject_gte?: Maybe<String>;
  mainProject_contains?: Maybe<String>;
  mainProject_not_contains?: Maybe<String>;
  mainProject_starts_with?: Maybe<String>;
  mainProject_not_starts_with?: Maybe<String>;
  mainProject_ends_with?: Maybe<String>;
  mainProject_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  contractValue?: Maybe<Float>;
  contractValue_not?: Maybe<Float>;
  contractValue_in?: Maybe<Float[] | Float>;
  contractValue_not_in?: Maybe<Float[] | Float>;
  contractValue_lt?: Maybe<Float>;
  contractValue_lte?: Maybe<Float>;
  contractValue_gt?: Maybe<Float>;
  contractValue_gte?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  additionalTotalAmount_not?: Maybe<Float>;
  additionalTotalAmount_in?: Maybe<Float[] | Float>;
  additionalTotalAmount_not_in?: Maybe<Float[] | Float>;
  additionalTotalAmount_lt?: Maybe<Float>;
  additionalTotalAmount_lte?: Maybe<Float>;
  additionalTotalAmount_gt?: Maybe<Float>;
  additionalTotalAmount_gte?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDone_not?: Maybe<Int>;
  percentageDone_in?: Maybe<Int[] | Int>;
  percentageDone_not_in?: Maybe<Int[] | Int>;
  percentageDone_lt?: Maybe<Int>;
  percentageDone_lte?: Maybe<Int>;
  percentageDone_gt?: Maybe<Int>;
  percentageDone_gte?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneDate_not?: Maybe<String>;
  percentageDoneDate_in?: Maybe<String[] | String>;
  percentageDoneDate_not_in?: Maybe<String[] | String>;
  percentageDoneDate_lt?: Maybe<String>;
  percentageDoneDate_lte?: Maybe<String>;
  percentageDoneDate_gt?: Maybe<String>;
  percentageDoneDate_gte?: Maybe<String>;
  percentageDoneDate_contains?: Maybe<String>;
  percentageDoneDate_not_contains?: Maybe<String>;
  percentageDoneDate_starts_with?: Maybe<String>;
  percentageDoneDate_not_starts_with?: Maybe<String>;
  percentageDoneDate_ends_with?: Maybe<String>;
  percentageDoneDate_not_ends_with?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  percentageDoneMinValue_not?: Maybe<Int>;
  percentageDoneMinValue_in?: Maybe<Int[] | Int>;
  percentageDoneMinValue_not_in?: Maybe<Int[] | Int>;
  percentageDoneMinValue_lt?: Maybe<Int>;
  percentageDoneMinValue_lte?: Maybe<Int>;
  percentageDoneMinValue_gt?: Maybe<Int>;
  percentageDoneMinValue_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexExists_not?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexId_not?: Maybe<ID_Input>;
  complexId_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_not_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_lt?: Maybe<ID_Input>;
  complexId_lte?: Maybe<ID_Input>;
  complexId_gt?: Maybe<ID_Input>;
  complexId_gte?: Maybe<ID_Input>;
  complexId_contains?: Maybe<ID_Input>;
  complexId_not_contains?: Maybe<ID_Input>;
  complexId_starts_with?: Maybe<ID_Input>;
  complexId_not_starts_with?: Maybe<ID_Input>;
  complexId_ends_with?: Maybe<ID_Input>;
  complexId_not_ends_with?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexCode_not?: Maybe<String>;
  complexCode_in?: Maybe<String[] | String>;
  complexCode_not_in?: Maybe<String[] | String>;
  complexCode_lt?: Maybe<String>;
  complexCode_lte?: Maybe<String>;
  complexCode_gt?: Maybe<String>;
  complexCode_gte?: Maybe<String>;
  complexCode_contains?: Maybe<String>;
  complexCode_not_contains?: Maybe<String>;
  complexCode_starts_with?: Maybe<String>;
  complexCode_not_starts_with?: Maybe<String>;
  complexCode_ends_with?: Maybe<String>;
  complexCode_not_ends_with?: Maybe<String>;
  complexName?: Maybe<String>;
  complexName_not?: Maybe<String>;
  complexName_in?: Maybe<String[] | String>;
  complexName_not_in?: Maybe<String[] | String>;
  complexName_lt?: Maybe<String>;
  complexName_lte?: Maybe<String>;
  complexName_gt?: Maybe<String>;
  complexName_gte?: Maybe<String>;
  complexName_contains?: Maybe<String>;
  complexName_not_contains?: Maybe<String>;
  complexName_starts_with?: Maybe<String>;
  complexName_not_starts_with?: Maybe<String>;
  complexName_ends_with?: Maybe<String>;
  complexName_not_ends_with?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoNo_not?: Maybe<String>;
  complexPhotoNo_in?: Maybe<String[] | String>;
  complexPhotoNo_not_in?: Maybe<String[] | String>;
  complexPhotoNo_lt?: Maybe<String>;
  complexPhotoNo_lte?: Maybe<String>;
  complexPhotoNo_gt?: Maybe<String>;
  complexPhotoNo_gte?: Maybe<String>;
  complexPhotoNo_contains?: Maybe<String>;
  complexPhotoNo_not_contains?: Maybe<String>;
  complexPhotoNo_starts_with?: Maybe<String>;
  complexPhotoNo_not_starts_with?: Maybe<String>;
  complexPhotoNo_ends_with?: Maybe<String>;
  complexPhotoNo_not_ends_with?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  complexPhotoUrl_not?: Maybe<String>;
  complexPhotoUrl_in?: Maybe<String[] | String>;
  complexPhotoUrl_not_in?: Maybe<String[] | String>;
  complexPhotoUrl_lt?: Maybe<String>;
  complexPhotoUrl_lte?: Maybe<String>;
  complexPhotoUrl_gt?: Maybe<String>;
  complexPhotoUrl_gte?: Maybe<String>;
  complexPhotoUrl_contains?: Maybe<String>;
  complexPhotoUrl_not_contains?: Maybe<String>;
  complexPhotoUrl_starts_with?: Maybe<String>;
  complexPhotoUrl_not_starts_with?: Maybe<String>;
  complexPhotoUrl_ends_with?: Maybe<String>;
  complexPhotoUrl_not_ends_with?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  amountSpent_not?: Maybe<Float>;
  amountSpent_in?: Maybe<Float[] | Float>;
  amountSpent_not_in?: Maybe<Float[] | Float>;
  amountSpent_lt?: Maybe<Float>;
  amountSpent_lte?: Maybe<Float>;
  amountSpent_gt?: Maybe<Float>;
  amountSpent_gte?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  spentVsBudgetted_not?: Maybe<Int>;
  spentVsBudgetted_in?: Maybe<Int[] | Int>;
  spentVsBudgetted_not_in?: Maybe<Int[] | Int>;
  spentVsBudgetted_lt?: Maybe<Int>;
  spentVsBudgetted_lte?: Maybe<Int>;
  spentVsBudgetted_gt?: Maybe<Int>;
  spentVsBudgetted_gte?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  amountOnReceipt_not?: Maybe<Float>;
  amountOnReceipt_in?: Maybe<Float[] | Float>;
  amountOnReceipt_not_in?: Maybe<Float[] | Float>;
  amountOnReceipt_lt?: Maybe<Float>;
  amountOnReceipt_lte?: Maybe<Float>;
  amountOnReceipt_gt?: Maybe<Float>;
  amountOnReceipt_gte?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  receiptIsNecessary_not?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  invoiced_not?: Maybe<Float>;
  invoiced_in?: Maybe<Float[] | Float>;
  invoiced_not_in?: Maybe<Float[] | Float>;
  invoiced_lt?: Maybe<Float>;
  invoiced_lte?: Maybe<Float>;
  invoiced_gt?: Maybe<Float>;
  invoiced_gte?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsNecessary_not?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsNecessary_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  qualityMeasurementIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary_not?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary_in?: Maybe<ReportIsNecessary[] | ReportIsNecessary>;
  progressReportIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary_not?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary_in?: Maybe<ReportIsNecessary[] | ReportIsNecessary>;
  deliveryReportIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  qualityMeasurementIsComplete_not?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  progressReportIsComplete_not?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete_not?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkDescription1_not?: Maybe<String>;
  additionalWorkDescription1_in?: Maybe<String[] | String>;
  additionalWorkDescription1_not_in?: Maybe<String[] | String>;
  additionalWorkDescription1_lt?: Maybe<String>;
  additionalWorkDescription1_lte?: Maybe<String>;
  additionalWorkDescription1_gt?: Maybe<String>;
  additionalWorkDescription1_gte?: Maybe<String>;
  additionalWorkDescription1_contains?: Maybe<String>;
  additionalWorkDescription1_not_contains?: Maybe<String>;
  additionalWorkDescription1_starts_with?: Maybe<String>;
  additionalWorkDescription1_not_starts_with?: Maybe<String>;
  additionalWorkDescription1_ends_with?: Maybe<String>;
  additionalWorkDescription1_not_ends_with?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkAmount1_not?: Maybe<Float>;
  additionalWorkAmount1_in?: Maybe<Float[] | Float>;
  additionalWorkAmount1_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount1_lt?: Maybe<Float>;
  additionalWorkAmount1_lte?: Maybe<Float>;
  additionalWorkAmount1_gt?: Maybe<Float>;
  additionalWorkAmount1_gte?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkDescription2_not?: Maybe<String>;
  additionalWorkDescription2_in?: Maybe<String[] | String>;
  additionalWorkDescription2_not_in?: Maybe<String[] | String>;
  additionalWorkDescription2_lt?: Maybe<String>;
  additionalWorkDescription2_lte?: Maybe<String>;
  additionalWorkDescription2_gt?: Maybe<String>;
  additionalWorkDescription2_gte?: Maybe<String>;
  additionalWorkDescription2_contains?: Maybe<String>;
  additionalWorkDescription2_not_contains?: Maybe<String>;
  additionalWorkDescription2_starts_with?: Maybe<String>;
  additionalWorkDescription2_not_starts_with?: Maybe<String>;
  additionalWorkDescription2_ends_with?: Maybe<String>;
  additionalWorkDescription2_not_ends_with?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkAmount2_not?: Maybe<Float>;
  additionalWorkAmount2_in?: Maybe<Float[] | Float>;
  additionalWorkAmount2_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount2_lt?: Maybe<Float>;
  additionalWorkAmount2_lte?: Maybe<Float>;
  additionalWorkAmount2_gt?: Maybe<Float>;
  additionalWorkAmount2_gte?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkDescription3_not?: Maybe<String>;
  additionalWorkDescription3_in?: Maybe<String[] | String>;
  additionalWorkDescription3_not_in?: Maybe<String[] | String>;
  additionalWorkDescription3_lt?: Maybe<String>;
  additionalWorkDescription3_lte?: Maybe<String>;
  additionalWorkDescription3_gt?: Maybe<String>;
  additionalWorkDescription3_gte?: Maybe<String>;
  additionalWorkDescription3_contains?: Maybe<String>;
  additionalWorkDescription3_not_contains?: Maybe<String>;
  additionalWorkDescription3_starts_with?: Maybe<String>;
  additionalWorkDescription3_not_starts_with?: Maybe<String>;
  additionalWorkDescription3_ends_with?: Maybe<String>;
  additionalWorkDescription3_not_ends_with?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkAmount3_not?: Maybe<Float>;
  additionalWorkAmount3_in?: Maybe<Float[] | Float>;
  additionalWorkAmount3_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount3_lt?: Maybe<Float>;
  additionalWorkAmount3_lte?: Maybe<Float>;
  additionalWorkAmount3_gt?: Maybe<Float>;
  additionalWorkAmount3_gte?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkDescription4_not?: Maybe<String>;
  additionalWorkDescription4_in?: Maybe<String[] | String>;
  additionalWorkDescription4_not_in?: Maybe<String[] | String>;
  additionalWorkDescription4_lt?: Maybe<String>;
  additionalWorkDescription4_lte?: Maybe<String>;
  additionalWorkDescription4_gt?: Maybe<String>;
  additionalWorkDescription4_gte?: Maybe<String>;
  additionalWorkDescription4_contains?: Maybe<String>;
  additionalWorkDescription4_not_contains?: Maybe<String>;
  additionalWorkDescription4_starts_with?: Maybe<String>;
  additionalWorkDescription4_not_starts_with?: Maybe<String>;
  additionalWorkDescription4_ends_with?: Maybe<String>;
  additionalWorkDescription4_not_ends_with?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkAmount4_not?: Maybe<Float>;
  additionalWorkAmount4_in?: Maybe<Float[] | Float>;
  additionalWorkAmount4_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount4_lt?: Maybe<Float>;
  additionalWorkAmount4_lte?: Maybe<Float>;
  additionalWorkAmount4_gt?: Maybe<Float>;
  additionalWorkAmount4_gte?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkDescription5_not?: Maybe<String>;
  additionalWorkDescription5_in?: Maybe<String[] | String>;
  additionalWorkDescription5_not_in?: Maybe<String[] | String>;
  additionalWorkDescription5_lt?: Maybe<String>;
  additionalWorkDescription5_lte?: Maybe<String>;
  additionalWorkDescription5_gt?: Maybe<String>;
  additionalWorkDescription5_gte?: Maybe<String>;
  additionalWorkDescription5_contains?: Maybe<String>;
  additionalWorkDescription5_not_contains?: Maybe<String>;
  additionalWorkDescription5_starts_with?: Maybe<String>;
  additionalWorkDescription5_not_starts_with?: Maybe<String>;
  additionalWorkDescription5_ends_with?: Maybe<String>;
  additionalWorkDescription5_not_ends_with?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkAmount5_not?: Maybe<Float>;
  additionalWorkAmount5_in?: Maybe<Float[] | Float>;
  additionalWorkAmount5_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount5_lt?: Maybe<Float>;
  additionalWorkAmount5_lte?: Maybe<Float>;
  additionalWorkAmount5_gt?: Maybe<Float>;
  additionalWorkAmount5_gte?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkDescription6_not?: Maybe<String>;
  additionalWorkDescription6_in?: Maybe<String[] | String>;
  additionalWorkDescription6_not_in?: Maybe<String[] | String>;
  additionalWorkDescription6_lt?: Maybe<String>;
  additionalWorkDescription6_lte?: Maybe<String>;
  additionalWorkDescription6_gt?: Maybe<String>;
  additionalWorkDescription6_gte?: Maybe<String>;
  additionalWorkDescription6_contains?: Maybe<String>;
  additionalWorkDescription6_not_contains?: Maybe<String>;
  additionalWorkDescription6_starts_with?: Maybe<String>;
  additionalWorkDescription6_not_starts_with?: Maybe<String>;
  additionalWorkDescription6_ends_with?: Maybe<String>;
  additionalWorkDescription6_not_ends_with?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  additionalWorkAmount6_not?: Maybe<Float>;
  additionalWorkAmount6_in?: Maybe<Float[] | Float>;
  additionalWorkAmount6_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount6_lt?: Maybe<Float>;
  additionalWorkAmount6_lte?: Maybe<Float>;
  additionalWorkAmount6_gt?: Maybe<Float>;
  additionalWorkAmount6_gte?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentNo_not?: Maybe<String>;
  qualityMeasurementDocumentNo_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentNo_not_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentNo_lt?: Maybe<String>;
  qualityMeasurementDocumentNo_lte?: Maybe<String>;
  qualityMeasurementDocumentNo_gt?: Maybe<String>;
  qualityMeasurementDocumentNo_gte?: Maybe<String>;
  qualityMeasurementDocumentNo_contains?: Maybe<String>;
  qualityMeasurementDocumentNo_not_contains?: Maybe<String>;
  qualityMeasurementDocumentNo_starts_with?: Maybe<String>;
  qualityMeasurementDocumentNo_not_starts_with?: Maybe<String>;
  qualityMeasurementDocumentNo_ends_with?: Maybe<String>;
  qualityMeasurementDocumentNo_not_ends_with?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  progressReportDocumentNo_not?: Maybe<String>;
  progressReportDocumentNo_in?: Maybe<String[] | String>;
  progressReportDocumentNo_not_in?: Maybe<String[] | String>;
  progressReportDocumentNo_lt?: Maybe<String>;
  progressReportDocumentNo_lte?: Maybe<String>;
  progressReportDocumentNo_gt?: Maybe<String>;
  progressReportDocumentNo_gte?: Maybe<String>;
  progressReportDocumentNo_contains?: Maybe<String>;
  progressReportDocumentNo_not_contains?: Maybe<String>;
  progressReportDocumentNo_starts_with?: Maybe<String>;
  progressReportDocumentNo_not_starts_with?: Maybe<String>;
  progressReportDocumentNo_ends_with?: Maybe<String>;
  progressReportDocumentNo_not_ends_with?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo_not?: Maybe<String>;
  deliveryReportDocumentNo_in?: Maybe<String[] | String>;
  deliveryReportDocumentNo_not_in?: Maybe<String[] | String>;
  deliveryReportDocumentNo_lt?: Maybe<String>;
  deliveryReportDocumentNo_lte?: Maybe<String>;
  deliveryReportDocumentNo_gt?: Maybe<String>;
  deliveryReportDocumentNo_gte?: Maybe<String>;
  deliveryReportDocumentNo_contains?: Maybe<String>;
  deliveryReportDocumentNo_not_contains?: Maybe<String>;
  deliveryReportDocumentNo_starts_with?: Maybe<String>;
  deliveryReportDocumentNo_not_starts_with?: Maybe<String>;
  deliveryReportDocumentNo_ends_with?: Maybe<String>;
  deliveryReportDocumentNo_not_ends_with?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo_not?: Maybe<String>;
  visitReportDocumentNo_in?: Maybe<String[] | String>;
  visitReportDocumentNo_not_in?: Maybe<String[] | String>;
  visitReportDocumentNo_lt?: Maybe<String>;
  visitReportDocumentNo_lte?: Maybe<String>;
  visitReportDocumentNo_gt?: Maybe<String>;
  visitReportDocumentNo_gte?: Maybe<String>;
  visitReportDocumentNo_contains?: Maybe<String>;
  visitReportDocumentNo_not_contains?: Maybe<String>;
  visitReportDocumentNo_starts_with?: Maybe<String>;
  visitReportDocumentNo_not_starts_with?: Maybe<String>;
  visitReportDocumentNo_ends_with?: Maybe<String>;
  visitReportDocumentNo_not_ends_with?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo_not?: Maybe<String>;
  incidentReportDocumentNo_in?: Maybe<String[] | String>;
  incidentReportDocumentNo_not_in?: Maybe<String[] | String>;
  incidentReportDocumentNo_lt?: Maybe<String>;
  incidentReportDocumentNo_lte?: Maybe<String>;
  incidentReportDocumentNo_gt?: Maybe<String>;
  incidentReportDocumentNo_gte?: Maybe<String>;
  incidentReportDocumentNo_contains?: Maybe<String>;
  incidentReportDocumentNo_not_contains?: Maybe<String>;
  incidentReportDocumentNo_starts_with?: Maybe<String>;
  incidentReportDocumentNo_not_starts_with?: Maybe<String>;
  incidentReportDocumentNo_ends_with?: Maybe<String>;
  incidentReportDocumentNo_not_ends_with?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  deviationFormDocumentNo_not?: Maybe<String>;
  deviationFormDocumentNo_in?: Maybe<String[] | String>;
  deviationFormDocumentNo_not_in?: Maybe<String[] | String>;
  deviationFormDocumentNo_lt?: Maybe<String>;
  deviationFormDocumentNo_lte?: Maybe<String>;
  deviationFormDocumentNo_gt?: Maybe<String>;
  deviationFormDocumentNo_gte?: Maybe<String>;
  deviationFormDocumentNo_contains?: Maybe<String>;
  deviationFormDocumentNo_not_contains?: Maybe<String>;
  deviationFormDocumentNo_starts_with?: Maybe<String>;
  deviationFormDocumentNo_not_starts_with?: Maybe<String>;
  deviationFormDocumentNo_ends_with?: Maybe<String>;
  deviationFormDocumentNo_not_ends_with?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  qualityMeasurementDocumentUrl_not?: Maybe<String>;
  qualityMeasurementDocumentUrl_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentUrl_not_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentUrl_lt?: Maybe<String>;
  qualityMeasurementDocumentUrl_lte?: Maybe<String>;
  qualityMeasurementDocumentUrl_gt?: Maybe<String>;
  qualityMeasurementDocumentUrl_gte?: Maybe<String>;
  qualityMeasurementDocumentUrl_contains?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_contains?: Maybe<String>;
  qualityMeasurementDocumentUrl_starts_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_starts_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_ends_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_ends_with?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl_not?: Maybe<String>;
  progressReportDocumentUrl_in?: Maybe<String[] | String>;
  progressReportDocumentUrl_not_in?: Maybe<String[] | String>;
  progressReportDocumentUrl_lt?: Maybe<String>;
  progressReportDocumentUrl_lte?: Maybe<String>;
  progressReportDocumentUrl_gt?: Maybe<String>;
  progressReportDocumentUrl_gte?: Maybe<String>;
  progressReportDocumentUrl_contains?: Maybe<String>;
  progressReportDocumentUrl_not_contains?: Maybe<String>;
  progressReportDocumentUrl_starts_with?: Maybe<String>;
  progressReportDocumentUrl_not_starts_with?: Maybe<String>;
  progressReportDocumentUrl_ends_with?: Maybe<String>;
  progressReportDocumentUrl_not_ends_with?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl_not?: Maybe<String>;
  deliveryReportDocumentUrl_in?: Maybe<String[] | String>;
  deliveryReportDocumentUrl_not_in?: Maybe<String[] | String>;
  deliveryReportDocumentUrl_lt?: Maybe<String>;
  deliveryReportDocumentUrl_lte?: Maybe<String>;
  deliveryReportDocumentUrl_gt?: Maybe<String>;
  deliveryReportDocumentUrl_gte?: Maybe<String>;
  deliveryReportDocumentUrl_contains?: Maybe<String>;
  deliveryReportDocumentUrl_not_contains?: Maybe<String>;
  deliveryReportDocumentUrl_starts_with?: Maybe<String>;
  deliveryReportDocumentUrl_not_starts_with?: Maybe<String>;
  deliveryReportDocumentUrl_ends_with?: Maybe<String>;
  deliveryReportDocumentUrl_not_ends_with?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl_not?: Maybe<String>;
  visitReportDocumentUrl_in?: Maybe<String[] | String>;
  visitReportDocumentUrl_not_in?: Maybe<String[] | String>;
  visitReportDocumentUrl_lt?: Maybe<String>;
  visitReportDocumentUrl_lte?: Maybe<String>;
  visitReportDocumentUrl_gt?: Maybe<String>;
  visitReportDocumentUrl_gte?: Maybe<String>;
  visitReportDocumentUrl_contains?: Maybe<String>;
  visitReportDocumentUrl_not_contains?: Maybe<String>;
  visitReportDocumentUrl_starts_with?: Maybe<String>;
  visitReportDocumentUrl_not_starts_with?: Maybe<String>;
  visitReportDocumentUrl_ends_with?: Maybe<String>;
  visitReportDocumentUrl_not_ends_with?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl_not?: Maybe<String>;
  incidentReportDocumentUrl_in?: Maybe<String[] | String>;
  incidentReportDocumentUrl_not_in?: Maybe<String[] | String>;
  incidentReportDocumentUrl_lt?: Maybe<String>;
  incidentReportDocumentUrl_lte?: Maybe<String>;
  incidentReportDocumentUrl_gt?: Maybe<String>;
  incidentReportDocumentUrl_gte?: Maybe<String>;
  incidentReportDocumentUrl_contains?: Maybe<String>;
  incidentReportDocumentUrl_not_contains?: Maybe<String>;
  incidentReportDocumentUrl_starts_with?: Maybe<String>;
  incidentReportDocumentUrl_not_starts_with?: Maybe<String>;
  incidentReportDocumentUrl_ends_with?: Maybe<String>;
  incidentReportDocumentUrl_not_ends_with?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl_not?: Maybe<String>;
  deviationFormDocumentUrl_in?: Maybe<String[] | String>;
  deviationFormDocumentUrl_not_in?: Maybe<String[] | String>;
  deviationFormDocumentUrl_lt?: Maybe<String>;
  deviationFormDocumentUrl_lte?: Maybe<String>;
  deviationFormDocumentUrl_gt?: Maybe<String>;
  deviationFormDocumentUrl_gte?: Maybe<String>;
  deviationFormDocumentUrl_contains?: Maybe<String>;
  deviationFormDocumentUrl_not_contains?: Maybe<String>;
  deviationFormDocumentUrl_starts_with?: Maybe<String>;
  deviationFormDocumentUrl_not_starts_with?: Maybe<String>;
  deviationFormDocumentUrl_ends_with?: Maybe<String>;
  deviationFormDocumentUrl_not_ends_with?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  isMainProject_not?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedStartDate_not?: Maybe<String>;
  expectedStartDate_in?: Maybe<String[] | String>;
  expectedStartDate_not_in?: Maybe<String[] | String>;
  expectedStartDate_lt?: Maybe<String>;
  expectedStartDate_lte?: Maybe<String>;
  expectedStartDate_gt?: Maybe<String>;
  expectedStartDate_gte?: Maybe<String>;
  expectedStartDate_contains?: Maybe<String>;
  expectedStartDate_not_contains?: Maybe<String>;
  expectedStartDate_starts_with?: Maybe<String>;
  expectedStartDate_not_starts_with?: Maybe<String>;
  expectedStartDate_ends_with?: Maybe<String>;
  expectedStartDate_not_ends_with?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  expectedEndDate_not?: Maybe<String>;
  expectedEndDate_in?: Maybe<String[] | String>;
  expectedEndDate_not_in?: Maybe<String[] | String>;
  expectedEndDate_lt?: Maybe<String>;
  expectedEndDate_lte?: Maybe<String>;
  expectedEndDate_gt?: Maybe<String>;
  expectedEndDate_gte?: Maybe<String>;
  expectedEndDate_contains?: Maybe<String>;
  expectedEndDate_not_contains?: Maybe<String>;
  expectedEndDate_starts_with?: Maybe<String>;
  expectedEndDate_not_starts_with?: Maybe<String>;
  expectedEndDate_ends_with?: Maybe<String>;
  expectedEndDate_not_ends_with?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  budgetHours_not?: Maybe<Int>;
  budgetHours_in?: Maybe<Int[] | Int>;
  budgetHours_not_in?: Maybe<Int[] | Int>;
  budgetHours_lt?: Maybe<Int>;
  budgetHours_lte?: Maybe<Int>;
  budgetHours_gt?: Maybe<Int>;
  budgetHours_gte?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfDays_not?: Maybe<Int>;
  numberOfDays_in?: Maybe<Int[] | Int>;
  numberOfDays_not_in?: Maybe<Int[] | Int>;
  numberOfDays_lt?: Maybe<Int>;
  numberOfDays_lte?: Maybe<Int>;
  numberOfDays_gt?: Maybe<Int>;
  numberOfDays_gte?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  numberOfHourlyWorkBudget_not?: Maybe<Int>;
  numberOfHourlyWorkBudget_in?: Maybe<Int[] | Int>;
  numberOfHourlyWorkBudget_not_in?: Maybe<Int[] | Int>;
  numberOfHourlyWorkBudget_lt?: Maybe<Int>;
  numberOfHourlyWorkBudget_lte?: Maybe<Int>;
  numberOfHourlyWorkBudget_gt?: Maybe<Int>;
  numberOfHourlyWorkBudget_gte?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  subcontractorName_not?: Maybe<String>;
  subcontractorName_in?: Maybe<String[] | String>;
  subcontractorName_not_in?: Maybe<String[] | String>;
  subcontractorName_lt?: Maybe<String>;
  subcontractorName_lte?: Maybe<String>;
  subcontractorName_gt?: Maybe<String>;
  subcontractorName_gte?: Maybe<String>;
  subcontractorName_contains?: Maybe<String>;
  subcontractorName_not_contains?: Maybe<String>;
  subcontractorName_starts_with?: Maybe<String>;
  subcontractorName_not_starts_with?: Maybe<String>;
  subcontractorName_ends_with?: Maybe<String>;
  subcontractorName_not_ends_with?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectMemo_not?: Maybe<String>;
  projectMemo_in?: Maybe<String[] | String>;
  projectMemo_not_in?: Maybe<String[] | String>;
  projectMemo_lt?: Maybe<String>;
  projectMemo_lte?: Maybe<String>;
  projectMemo_gt?: Maybe<String>;
  projectMemo_gte?: Maybe<String>;
  projectMemo_contains?: Maybe<String>;
  projectMemo_not_contains?: Maybe<String>;
  projectMemo_starts_with?: Maybe<String>;
  projectMemo_not_starts_with?: Maybe<String>;
  projectMemo_ends_with?: Maybe<String>;
  projectMemo_not_ends_with?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  projectType_not?: Maybe<ProjectType>;
  projectType_in?: Maybe<ProjectType[] | ProjectType>;
  projectType_not_in?: Maybe<ProjectType[] | ProjectType>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  salesPersonCode_not?: Maybe<String>;
  salesPersonCode_in?: Maybe<String[] | String>;
  salesPersonCode_not_in?: Maybe<String[] | String>;
  salesPersonCode_lt?: Maybe<String>;
  salesPersonCode_lte?: Maybe<String>;
  salesPersonCode_gt?: Maybe<String>;
  salesPersonCode_gte?: Maybe<String>;
  salesPersonCode_contains?: Maybe<String>;
  salesPersonCode_not_contains?: Maybe<String>;
  salesPersonCode_starts_with?: Maybe<String>;
  salesPersonCode_not_starts_with?: Maybe<String>;
  salesPersonCode_ends_with?: Maybe<String>;
  salesPersonCode_not_ends_with?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  estimatorCode_not?: Maybe<String>;
  estimatorCode_in?: Maybe<String[] | String>;
  estimatorCode_not_in?: Maybe<String[] | String>;
  estimatorCode_lt?: Maybe<String>;
  estimatorCode_lte?: Maybe<String>;
  estimatorCode_gt?: Maybe<String>;
  estimatorCode_gte?: Maybe<String>;
  estimatorCode_contains?: Maybe<String>;
  estimatorCode_not_contains?: Maybe<String>;
  estimatorCode_starts_with?: Maybe<String>;
  estimatorCode_not_starts_with?: Maybe<String>;
  estimatorCode_ends_with?: Maybe<String>;
  estimatorCode_not_ends_with?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  projectManagerCode_not?: Maybe<String>;
  projectManagerCode_in?: Maybe<String[] | String>;
  projectManagerCode_not_in?: Maybe<String[] | String>;
  projectManagerCode_lt?: Maybe<String>;
  projectManagerCode_lte?: Maybe<String>;
  projectManagerCode_gt?: Maybe<String>;
  projectManagerCode_gte?: Maybe<String>;
  projectManagerCode_contains?: Maybe<String>;
  projectManagerCode_not_contains?: Maybe<String>;
  projectManagerCode_starts_with?: Maybe<String>;
  projectManagerCode_not_starts_with?: Maybe<String>;
  projectManagerCode_ends_with?: Maybe<String>;
  projectManagerCode_not_ends_with?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  siteManagerCode_not?: Maybe<String>;
  siteManagerCode_in?: Maybe<String[] | String>;
  siteManagerCode_not_in?: Maybe<String[] | String>;
  siteManagerCode_lt?: Maybe<String>;
  siteManagerCode_lte?: Maybe<String>;
  siteManagerCode_gt?: Maybe<String>;
  siteManagerCode_gte?: Maybe<String>;
  siteManagerCode_contains?: Maybe<String>;
  siteManagerCode_not_contains?: Maybe<String>;
  siteManagerCode_starts_with?: Maybe<String>;
  siteManagerCode_not_starts_with?: Maybe<String>;
  siteManagerCode_ends_with?: Maybe<String>;
  siteManagerCode_not_ends_with?: Maybe<String>;
  team?: Maybe<String>;
  team_not?: Maybe<String>;
  team_in?: Maybe<String[] | String>;
  team_not_in?: Maybe<String[] | String>;
  team_lt?: Maybe<String>;
  team_lte?: Maybe<String>;
  team_gt?: Maybe<String>;
  team_gte?: Maybe<String>;
  team_contains?: Maybe<String>;
  team_not_contains?: Maybe<String>;
  team_starts_with?: Maybe<String>;
  team_not_starts_with?: Maybe<String>;
  team_ends_with?: Maybe<String>;
  team_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  statusModificationDate_not?: Maybe<String>;
  statusModificationDate_in?: Maybe<String[] | String>;
  statusModificationDate_not_in?: Maybe<String[] | String>;
  statusModificationDate_lt?: Maybe<String>;
  statusModificationDate_lte?: Maybe<String>;
  statusModificationDate_gt?: Maybe<String>;
  statusModificationDate_gte?: Maybe<String>;
  statusModificationDate_contains?: Maybe<String>;
  statusModificationDate_not_contains?: Maybe<String>;
  statusModificationDate_starts_with?: Maybe<String>;
  statusModificationDate_not_starts_with?: Maybe<String>;
  statusModificationDate_ends_with?: Maybe<String>;
  statusModificationDate_not_ends_with?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  billToCustomerNo_not?: Maybe<String>;
  billToCustomerNo_in?: Maybe<String[] | String>;
  billToCustomerNo_not_in?: Maybe<String[] | String>;
  billToCustomerNo_lt?: Maybe<String>;
  billToCustomerNo_lte?: Maybe<String>;
  billToCustomerNo_gt?: Maybe<String>;
  billToCustomerNo_gte?: Maybe<String>;
  billToCustomerNo_contains?: Maybe<String>;
  billToCustomerNo_not_contains?: Maybe<String>;
  billToCustomerNo_starts_with?: Maybe<String>;
  billToCustomerNo_not_starts_with?: Maybe<String>;
  billToCustomerNo_ends_with?: Maybe<String>;
  billToCustomerNo_not_ends_with?: Maybe<String>;
  commissionDate?: Maybe<String>;
  commissionDate_not?: Maybe<String>;
  commissionDate_in?: Maybe<String[] | String>;
  commissionDate_not_in?: Maybe<String[] | String>;
  commissionDate_lt?: Maybe<String>;
  commissionDate_lte?: Maybe<String>;
  commissionDate_gt?: Maybe<String>;
  commissionDate_gte?: Maybe<String>;
  commissionDate_contains?: Maybe<String>;
  commissionDate_not_contains?: Maybe<String>;
  commissionDate_starts_with?: Maybe<String>;
  commissionDate_not_starts_with?: Maybe<String>;
  commissionDate_ends_with?: Maybe<String>;
  commissionDate_not_ends_with?: Maybe<String>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  warrantyEndDate_not?: Maybe<String>;
  warrantyEndDate_in?: Maybe<String[] | String>;
  warrantyEndDate_not_in?: Maybe<String[] | String>;
  warrantyEndDate_lt?: Maybe<String>;
  warrantyEndDate_lte?: Maybe<String>;
  warrantyEndDate_gt?: Maybe<String>;
  warrantyEndDate_gte?: Maybe<String>;
  warrantyEndDate_contains?: Maybe<String>;
  warrantyEndDate_not_contains?: Maybe<String>;
  warrantyEndDate_starts_with?: Maybe<String>;
  warrantyEndDate_not_starts_with?: Maybe<String>;
  warrantyEndDate_ends_with?: Maybe<String>;
  warrantyEndDate_not_ends_with?: Maybe<String>;
  workType?: Maybe<String>;
  workType_not?: Maybe<String>;
  workType_in?: Maybe<String[] | String>;
  workType_not_in?: Maybe<String[] | String>;
  workType_lt?: Maybe<String>;
  workType_lte?: Maybe<String>;
  workType_gt?: Maybe<String>;
  workType_gte?: Maybe<String>;
  workType_contains?: Maybe<String>;
  workType_not_contains?: Maybe<String>;
  workType_starts_with?: Maybe<String>;
  workType_not_starts_with?: Maybe<String>;
  workType_ends_with?: Maybe<String>;
  workType_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
  isAppProject_not?: Maybe<Boolean>;
  kimInformation?: Maybe<KimInformationWhereInput>;
  subProjects_every?: Maybe<ProjectWhereInput>;
  subProjects_some?: Maybe<ProjectWhereInput>;
  subProjects_none?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export type ReporterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type ServiceAppointmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type ServiceContractWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type ServiceContractEstimationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceContractEstimationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  initialSalesAmount?: Maybe<Float>;
  initialSalesAmount_not?: Maybe<Float>;
  initialSalesAmount_in?: Maybe<Float[] | Float>;
  initialSalesAmount_not_in?: Maybe<Float[] | Float>;
  initialSalesAmount_lt?: Maybe<Float>;
  initialSalesAmount_lte?: Maybe<Float>;
  initialSalesAmount_gt?: Maybe<Float>;
  initialSalesAmount_gte?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  billedAmount_not?: Maybe<Float>;
  billedAmount_in?: Maybe<Float[] | Float>;
  billedAmount_not_in?: Maybe<Float[] | Float>;
  billedAmount_lt?: Maybe<Float>;
  billedAmount_lte?: Maybe<Float>;
  billedAmount_gt?: Maybe<Float>;
  billedAmount_gte?: Maybe<Float>;
  serviceContractIndex?: Maybe<ServiceContractIndexWhereInput>;
  serviceContract?: Maybe<ServiceContractWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ServiceContractEstimationWhereInput[] | ServiceContractEstimationWhereInput
  >;
  OR?: Maybe<
    ServiceContractEstimationWhereInput[] | ServiceContractEstimationWhereInput
  >;
  NOT?: Maybe<
    ServiceContractEstimationWhereInput[] | ServiceContractEstimationWhereInput
  >;
}

export interface ServiceContractIndexWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  indexMethod?: Maybe<ContractIndexMethod>;
  indexMethod_not?: Maybe<ContractIndexMethod>;
  indexMethod_in?: Maybe<ContractIndexMethod[] | ContractIndexMethod>;
  indexMethod_not_in?: Maybe<ContractIndexMethod[] | ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexTime_not?: Maybe<String>;
  indexTime_in?: Maybe<String[] | String>;
  indexTime_not_in?: Maybe<String[] | String>;
  indexTime_lt?: Maybe<String>;
  indexTime_lte?: Maybe<String>;
  indexTime_gt?: Maybe<String>;
  indexTime_gte?: Maybe<String>;
  indexTime_contains?: Maybe<String>;
  indexTime_not_contains?: Maybe<String>;
  indexTime_starts_with?: Maybe<String>;
  indexTime_not_starts_with?: Maybe<String>;
  indexTime_ends_with?: Maybe<String>;
  indexTime_not_ends_with?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexedAmount_not?: Maybe<String>;
  indexedAmount_in?: Maybe<String[] | String>;
  indexedAmount_not_in?: Maybe<String[] | String>;
  indexedAmount_lt?: Maybe<String>;
  indexedAmount_lte?: Maybe<String>;
  indexedAmount_gt?: Maybe<String>;
  indexedAmount_gte?: Maybe<String>;
  indexedAmount_contains?: Maybe<String>;
  indexedAmount_not_contains?: Maybe<String>;
  indexedAmount_starts_with?: Maybe<String>;
  indexedAmount_not_starts_with?: Maybe<String>;
  indexedAmount_ends_with?: Maybe<String>;
  indexedAmount_not_ends_with?: Maybe<String>;
  indexFigure?: Maybe<String>;
  indexFigure_not?: Maybe<String>;
  indexFigure_in?: Maybe<String[] | String>;
  indexFigure_not_in?: Maybe<String[] | String>;
  indexFigure_lt?: Maybe<String>;
  indexFigure_lte?: Maybe<String>;
  indexFigure_gt?: Maybe<String>;
  indexFigure_gte?: Maybe<String>;
  indexFigure_contains?: Maybe<String>;
  indexFigure_not_contains?: Maybe<String>;
  indexFigure_starts_with?: Maybe<String>;
  indexFigure_not_starts_with?: Maybe<String>;
  indexFigure_ends_with?: Maybe<String>;
  indexFigure_not_ends_with?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractNumber_not?: Maybe<String>;
  contractNumber_in?: Maybe<String[] | String>;
  contractNumber_not_in?: Maybe<String[] | String>;
  contractNumber_lt?: Maybe<String>;
  contractNumber_lte?: Maybe<String>;
  contractNumber_gt?: Maybe<String>;
  contractNumber_gte?: Maybe<String>;
  contractNumber_contains?: Maybe<String>;
  contractNumber_not_contains?: Maybe<String>;
  contractNumber_starts_with?: Maybe<String>;
  contractNumber_not_starts_with?: Maybe<String>;
  contractNumber_ends_with?: Maybe<String>;
  contractNumber_not_ends_with?: Maybe<String>;
  contractAmount?: Maybe<String>;
  contractAmount_not?: Maybe<String>;
  contractAmount_in?: Maybe<String[] | String>;
  contractAmount_not_in?: Maybe<String[] | String>;
  contractAmount_lt?: Maybe<String>;
  contractAmount_lte?: Maybe<String>;
  contractAmount_gt?: Maybe<String>;
  contractAmount_gte?: Maybe<String>;
  contractAmount_contains?: Maybe<String>;
  contractAmount_not_contains?: Maybe<String>;
  contractAmount_starts_with?: Maybe<String>;
  contractAmount_not_starts_with?: Maybe<String>;
  contractAmount_ends_with?: Maybe<String>;
  contractAmount_not_ends_with?: Maybe<String>;
  estimations_every?: Maybe<ServiceContractEstimationWhereInput>;
  estimations_some?: Maybe<ServiceContractEstimationWhereInput>;
  estimations_none?: Maybe<ServiceContractEstimationWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ServiceContractIndexWhereInput[] | ServiceContractIndexWhereInput
  >;
  OR?: Maybe<ServiceContractIndexWhereInput[] | ServiceContractIndexWhereInput>;
  NOT?: Maybe<
    ServiceContractIndexWhereInput[] | ServiceContractIndexWhereInput
  >;
}

export type ServiceContractIndexWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ServiceContractTermWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceContractTermWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  serviceContractCode?: Maybe<String>;
  serviceContractCode_not?: Maybe<String>;
  serviceContractCode_in?: Maybe<String[] | String>;
  serviceContractCode_not_in?: Maybe<String[] | String>;
  serviceContractCode_lt?: Maybe<String>;
  serviceContractCode_lte?: Maybe<String>;
  serviceContractCode_gt?: Maybe<String>;
  serviceContractCode_gte?: Maybe<String>;
  serviceContractCode_contains?: Maybe<String>;
  serviceContractCode_not_contains?: Maybe<String>;
  serviceContractCode_starts_with?: Maybe<String>;
  serviceContractCode_not_starts_with?: Maybe<String>;
  serviceContractCode_ends_with?: Maybe<String>;
  serviceContractCode_not_ends_with?: Maybe<String>;
  lineNo?: Maybe<Int>;
  lineNo_not?: Maybe<Int>;
  lineNo_in?: Maybe<Int[] | Int>;
  lineNo_not_in?: Maybe<Int[] | Int>;
  lineNo_lt?: Maybe<Int>;
  lineNo_lte?: Maybe<Int>;
  lineNo_gt?: Maybe<Int>;
  lineNo_gte?: Maybe<Int>;
  invoiceFrom?: Maybe<String>;
  invoiceFrom_not?: Maybe<String>;
  invoiceFrom_in?: Maybe<String[] | String>;
  invoiceFrom_not_in?: Maybe<String[] | String>;
  invoiceFrom_lt?: Maybe<String>;
  invoiceFrom_lte?: Maybe<String>;
  invoiceFrom_gt?: Maybe<String>;
  invoiceFrom_gte?: Maybe<String>;
  invoiceFrom_contains?: Maybe<String>;
  invoiceFrom_not_contains?: Maybe<String>;
  invoiceFrom_starts_with?: Maybe<String>;
  invoiceFrom_not_starts_with?: Maybe<String>;
  invoiceFrom_ends_with?: Maybe<String>;
  invoiceFrom_not_ends_with?: Maybe<String>;
  endingDate?: Maybe<String>;
  endingDate_not?: Maybe<String>;
  endingDate_in?: Maybe<String[] | String>;
  endingDate_not_in?: Maybe<String[] | String>;
  endingDate_lt?: Maybe<String>;
  endingDate_lte?: Maybe<String>;
  endingDate_gt?: Maybe<String>;
  endingDate_gte?: Maybe<String>;
  endingDate_contains?: Maybe<String>;
  endingDate_not_contains?: Maybe<String>;
  endingDate_starts_with?: Maybe<String>;
  endingDate_not_starts_with?: Maybe<String>;
  endingDate_ends_with?: Maybe<String>;
  endingDate_not_ends_with?: Maybe<String>;
  invoicedUntil?: Maybe<String>;
  invoicedUntil_not?: Maybe<String>;
  invoicedUntil_in?: Maybe<String[] | String>;
  invoicedUntil_not_in?: Maybe<String[] | String>;
  invoicedUntil_lt?: Maybe<String>;
  invoicedUntil_lte?: Maybe<String>;
  invoicedUntil_gt?: Maybe<String>;
  invoicedUntil_gte?: Maybe<String>;
  invoicedUntil_contains?: Maybe<String>;
  invoicedUntil_not_contains?: Maybe<String>;
  invoicedUntil_starts_with?: Maybe<String>;
  invoicedUntil_not_starts_with?: Maybe<String>;
  invoicedUntil_ends_with?: Maybe<String>;
  invoicedUntil_not_ends_with?: Maybe<String>;
  invoiceInterval?: Maybe<String>;
  invoiceInterval_not?: Maybe<String>;
  invoiceInterval_in?: Maybe<String[] | String>;
  invoiceInterval_not_in?: Maybe<String[] | String>;
  invoiceInterval_lt?: Maybe<String>;
  invoiceInterval_lte?: Maybe<String>;
  invoiceInterval_gt?: Maybe<String>;
  invoiceInterval_gte?: Maybe<String>;
  invoiceInterval_contains?: Maybe<String>;
  invoiceInterval_not_contains?: Maybe<String>;
  invoiceInterval_starts_with?: Maybe<String>;
  invoiceInterval_not_starts_with?: Maybe<String>;
  invoiceInterval_ends_with?: Maybe<String>;
  invoiceInterval_not_ends_with?: Maybe<String>;
  invoicePostponePeriod?: Maybe<String>;
  invoicePostponePeriod_not?: Maybe<String>;
  invoicePostponePeriod_in?: Maybe<String[] | String>;
  invoicePostponePeriod_not_in?: Maybe<String[] | String>;
  invoicePostponePeriod_lt?: Maybe<String>;
  invoicePostponePeriod_lte?: Maybe<String>;
  invoicePostponePeriod_gt?: Maybe<String>;
  invoicePostponePeriod_gte?: Maybe<String>;
  invoicePostponePeriod_contains?: Maybe<String>;
  invoicePostponePeriod_not_contains?: Maybe<String>;
  invoicePostponePeriod_starts_with?: Maybe<String>;
  invoicePostponePeriod_not_starts_with?: Maybe<String>;
  invoicePostponePeriod_ends_with?: Maybe<String>;
  invoicePostponePeriod_not_ends_with?: Maybe<String>;
  nextInvoicingDate?: Maybe<String>;
  nextInvoicingDate_not?: Maybe<String>;
  nextInvoicingDate_in?: Maybe<String[] | String>;
  nextInvoicingDate_not_in?: Maybe<String[] | String>;
  nextInvoicingDate_lt?: Maybe<String>;
  nextInvoicingDate_lte?: Maybe<String>;
  nextInvoicingDate_gt?: Maybe<String>;
  nextInvoicingDate_gte?: Maybe<String>;
  nextInvoicingDate_contains?: Maybe<String>;
  nextInvoicingDate_not_contains?: Maybe<String>;
  nextInvoicingDate_starts_with?: Maybe<String>;
  nextInvoicingDate_not_starts_with?: Maybe<String>;
  nextInvoicingDate_ends_with?: Maybe<String>;
  nextInvoicingDate_not_ends_with?: Maybe<String>;
  progressPercent?: Maybe<Int>;
  progressPercent_not?: Maybe<Int>;
  progressPercent_in?: Maybe<Int[] | Int>;
  progressPercent_not_in?: Maybe<Int[] | Int>;
  progressPercent_lt?: Maybe<Int>;
  progressPercent_lte?: Maybe<Int>;
  progressPercent_gt?: Maybe<Int>;
  progressPercent_gte?: Maybe<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_not?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_in?: Maybe<
    String[] | String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_not_in?: Maybe<
    String[] | String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_lt?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_lte?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_gt?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_gte?: Maybe<String>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_contains?: Maybe<
    String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_not_contains?: Maybe<
    String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_starts_with?: Maybe<
    String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_not_starts_with?: Maybe<
    String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_ends_with?: Maybe<
    String
  >;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode_not_ends_with?: Maybe<
    String
  >;
  invoiceDirectly?: Maybe<Boolean>;
  invoiceDirectly_not?: Maybe<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_not?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_in?: Maybe<String[] | String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_not_in?: Maybe<String[] | String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_lt?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_lte?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_gt?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_gte?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_contains?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_not_contains?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_starts_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_not_starts_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_ends_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec_not_ends_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_not?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_in?: Maybe<String[] | String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_not_in?: Maybe<
    String[] | String
  >;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_lt?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_lte?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_gt?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_gte?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_contains?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_not_contains?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_starts_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_not_starts_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_ends_with?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  invoicingVIACollectiveList?: Maybe<String>;
  invoicingVIACollectiveList_not?: Maybe<String>;
  invoicingVIACollectiveList_in?: Maybe<String[] | String>;
  invoicingVIACollectiveList_not_in?: Maybe<String[] | String>;
  invoicingVIACollectiveList_lt?: Maybe<String>;
  invoicingVIACollectiveList_lte?: Maybe<String>;
  invoicingVIACollectiveList_gt?: Maybe<String>;
  invoicingVIACollectiveList_gte?: Maybe<String>;
  invoicingVIACollectiveList_contains?: Maybe<String>;
  invoicingVIACollectiveList_not_contains?: Maybe<String>;
  invoicingVIACollectiveList_starts_with?: Maybe<String>;
  invoicingVIACollectiveList_not_starts_with?: Maybe<String>;
  invoicingVIACollectiveList_ends_with?: Maybe<String>;
  invoicingVIACollectiveList_not_ends_with?: Maybe<String>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  invoicePeriod_not?: Maybe<ContractInvoicePeriod>;
  invoicePeriod_in?: Maybe<ContractInvoicePeriod[] | ContractInvoicePeriod>;
  invoicePeriod_not_in?: Maybe<ContractInvoicePeriod[] | ContractInvoicePeriod>;
  chargeable?: Maybe<Boolean>;
  chargeable_not?: Maybe<Boolean>;
  invoicedPrice?: Maybe<Float>;
  invoicedPrice_not?: Maybe<Float>;
  invoicedPrice_in?: Maybe<Float[] | Float>;
  invoicedPrice_not_in?: Maybe<Float[] | Float>;
  invoicedPrice_lt?: Maybe<Float>;
  invoicedPrice_lte?: Maybe<Float>;
  invoicedPrice_gt?: Maybe<Float>;
  invoicedPrice_gte?: Maybe<Float>;
  invoiceInProcess?: Maybe<Float>;
  invoiceInProcess_not?: Maybe<Float>;
  invoiceInProcess_in?: Maybe<Float[] | Float>;
  invoiceInProcess_not_in?: Maybe<Float[] | Float>;
  invoiceInProcess_lt?: Maybe<Float>;
  invoiceInProcess_lte?: Maybe<Float>;
  invoiceInProcess_gt?: Maybe<Float>;
  invoiceInProcess_gte?: Maybe<Float>;
  creditMemoInProcess?: Maybe<Float>;
  creditMemoInProcess_not?: Maybe<Float>;
  creditMemoInProcess_in?: Maybe<Float[] | Float>;
  creditMemoInProcess_not_in?: Maybe<Float[] | Float>;
  creditMemoInProcess_lt?: Maybe<Float>;
  creditMemoInProcess_lte?: Maybe<Float>;
  creditMemoInProcess_gt?: Maybe<Float>;
  creditMemoInProcess_gte?: Maybe<Float>;
  invoicePayment?: Maybe<Float>;
  invoicePayment_not?: Maybe<Float>;
  invoicePayment_in?: Maybe<Float[] | Float>;
  invoicePayment_not_in?: Maybe<Float[] | Float>;
  invoicePayment_lt?: Maybe<Float>;
  invoicePayment_lte?: Maybe<Float>;
  invoicePayment_gt?: Maybe<Float>;
  invoicePayment_gte?: Maybe<Float>;
  globalDimension1Code?: Maybe<String>;
  globalDimension1Code_not?: Maybe<String>;
  globalDimension1Code_in?: Maybe<String[] | String>;
  globalDimension1Code_not_in?: Maybe<String[] | String>;
  globalDimension1Code_lt?: Maybe<String>;
  globalDimension1Code_lte?: Maybe<String>;
  globalDimension1Code_gt?: Maybe<String>;
  globalDimension1Code_gte?: Maybe<String>;
  globalDimension1Code_contains?: Maybe<String>;
  globalDimension1Code_not_contains?: Maybe<String>;
  globalDimension1Code_starts_with?: Maybe<String>;
  globalDimension1Code_not_starts_with?: Maybe<String>;
  globalDimension1Code_ends_with?: Maybe<String>;
  globalDimension1Code_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  billToCustomerCode?: Maybe<String>;
  billToCustomerCode_not?: Maybe<String>;
  billToCustomerCode_in?: Maybe<String[] | String>;
  billToCustomerCode_not_in?: Maybe<String[] | String>;
  billToCustomerCode_lt?: Maybe<String>;
  billToCustomerCode_lte?: Maybe<String>;
  billToCustomerCode_gt?: Maybe<String>;
  billToCustomerCode_gte?: Maybe<String>;
  billToCustomerCode_contains?: Maybe<String>;
  billToCustomerCode_not_contains?: Maybe<String>;
  billToCustomerCode_starts_with?: Maybe<String>;
  billToCustomerCode_not_starts_with?: Maybe<String>;
  billToCustomerCode_ends_with?: Maybe<String>;
  billToCustomerCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<ServiceContractTermWhereInput[] | ServiceContractTermWhereInput>;
  OR?: Maybe<ServiceContractTermWhereInput[] | ServiceContractTermWhereInput>;
  NOT?: Maybe<ServiceContractTermWhereInput[] | ServiceContractTermWhereInput>;
}

export type ServiceOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type ServiceOrderCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ServiceOrderUpdateNotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  linkToken?: Maybe<String>;
}>;

export interface ServiceOrderUpdateNotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  orderOwnerEmail?: Maybe<String>;
  orderOwnerEmail_not?: Maybe<String>;
  orderOwnerEmail_in?: Maybe<String[] | String>;
  orderOwnerEmail_not_in?: Maybe<String[] | String>;
  orderOwnerEmail_lt?: Maybe<String>;
  orderOwnerEmail_lte?: Maybe<String>;
  orderOwnerEmail_gt?: Maybe<String>;
  orderOwnerEmail_gte?: Maybe<String>;
  orderOwnerEmail_contains?: Maybe<String>;
  orderOwnerEmail_not_contains?: Maybe<String>;
  orderOwnerEmail_starts_with?: Maybe<String>;
  orderOwnerEmail_not_starts_with?: Maybe<String>;
  orderOwnerEmail_ends_with?: Maybe<String>;
  orderOwnerEmail_not_ends_with?: Maybe<String>;
  orderOwnerPhone?: Maybe<String>;
  orderOwnerPhone_not?: Maybe<String>;
  orderOwnerPhone_in?: Maybe<String[] | String>;
  orderOwnerPhone_not_in?: Maybe<String[] | String>;
  orderOwnerPhone_lt?: Maybe<String>;
  orderOwnerPhone_lte?: Maybe<String>;
  orderOwnerPhone_gt?: Maybe<String>;
  orderOwnerPhone_gte?: Maybe<String>;
  orderOwnerPhone_contains?: Maybe<String>;
  orderOwnerPhone_not_contains?: Maybe<String>;
  orderOwnerPhone_starts_with?: Maybe<String>;
  orderOwnerPhone_not_starts_with?: Maybe<String>;
  orderOwnerPhone_ends_with?: Maybe<String>;
  orderOwnerPhone_not_ends_with?: Maybe<String>;
  linkToken?: Maybe<String>;
  linkToken_not?: Maybe<String>;
  linkToken_in?: Maybe<String[] | String>;
  linkToken_not_in?: Maybe<String[] | String>;
  linkToken_lt?: Maybe<String>;
  linkToken_lte?: Maybe<String>;
  linkToken_gt?: Maybe<String>;
  linkToken_gte?: Maybe<String>;
  linkToken_contains?: Maybe<String>;
  linkToken_not_contains?: Maybe<String>;
  linkToken_starts_with?: Maybe<String>;
  linkToken_not_starts_with?: Maybe<String>;
  linkToken_ends_with?: Maybe<String>;
  linkToken_not_ends_with?: Maybe<String>;
  smsText?: Maybe<String>;
  smsText_not?: Maybe<String>;
  smsText_in?: Maybe<String[] | String>;
  smsText_not_in?: Maybe<String[] | String>;
  smsText_lt?: Maybe<String>;
  smsText_lte?: Maybe<String>;
  smsText_gt?: Maybe<String>;
  smsText_gte?: Maybe<String>;
  smsText_contains?: Maybe<String>;
  smsText_not_contains?: Maybe<String>;
  smsText_starts_with?: Maybe<String>;
  smsText_not_starts_with?: Maybe<String>;
  smsText_ends_with?: Maybe<String>;
  smsText_not_ends_with?: Maybe<String>;
  stage?: Maybe<String>;
  stage_not?: Maybe<String>;
  stage_in?: Maybe<String[] | String>;
  stage_not_in?: Maybe<String[] | String>;
  stage_lt?: Maybe<String>;
  stage_lte?: Maybe<String>;
  stage_gt?: Maybe<String>;
  stage_gte?: Maybe<String>;
  stage_contains?: Maybe<String>;
  stage_not_contains?: Maybe<String>;
  stage_starts_with?: Maybe<String>;
  stage_not_starts_with?: Maybe<String>;
  stage_ends_with?: Maybe<String>;
  stage_not_ends_with?: Maybe<String>;
  emailHtmlBody?: Maybe<String>;
  emailHtmlBody_not?: Maybe<String>;
  emailHtmlBody_in?: Maybe<String[] | String>;
  emailHtmlBody_not_in?: Maybe<String[] | String>;
  emailHtmlBody_lt?: Maybe<String>;
  emailHtmlBody_lte?: Maybe<String>;
  emailHtmlBody_gt?: Maybe<String>;
  emailHtmlBody_gte?: Maybe<String>;
  emailHtmlBody_contains?: Maybe<String>;
  emailHtmlBody_not_contains?: Maybe<String>;
  emailHtmlBody_starts_with?: Maybe<String>;
  emailHtmlBody_not_starts_with?: Maybe<String>;
  emailHtmlBody_ends_with?: Maybe<String>;
  emailHtmlBody_not_ends_with?: Maybe<String>;
  emailSubject?: Maybe<String>;
  emailSubject_not?: Maybe<String>;
  emailSubject_in?: Maybe<String[] | String>;
  emailSubject_not_in?: Maybe<String[] | String>;
  emailSubject_lt?: Maybe<String>;
  emailSubject_lte?: Maybe<String>;
  emailSubject_gt?: Maybe<String>;
  emailSubject_gte?: Maybe<String>;
  emailSubject_contains?: Maybe<String>;
  emailSubject_not_contains?: Maybe<String>;
  emailSubject_starts_with?: Maybe<String>;
  emailSubject_not_starts_with?: Maybe<String>;
  emailSubject_ends_with?: Maybe<String>;
  emailSubject_not_ends_with?: Maybe<String>;
  companyEmail?: Maybe<String>;
  companyEmail_not?: Maybe<String>;
  companyEmail_in?: Maybe<String[] | String>;
  companyEmail_not_in?: Maybe<String[] | String>;
  companyEmail_lt?: Maybe<String>;
  companyEmail_lte?: Maybe<String>;
  companyEmail_gt?: Maybe<String>;
  companyEmail_gte?: Maybe<String>;
  companyEmail_contains?: Maybe<String>;
  companyEmail_not_contains?: Maybe<String>;
  companyEmail_starts_with?: Maybe<String>;
  companyEmail_not_starts_with?: Maybe<String>;
  companyEmail_ends_with?: Maybe<String>;
  companyEmail_not_ends_with?: Maybe<String>;
  smsDeliveryStatus?: Maybe<Boolean>;
  smsDeliveryStatus_not?: Maybe<Boolean>;
  emailDeliveryStatus?: Maybe<Boolean>;
  emailDeliveryStatus_not?: Maybe<Boolean>;
  linkExpirationDate?: Maybe<DateTimeInput>;
  linkExpirationDate_not?: Maybe<DateTimeInput>;
  linkExpirationDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  linkExpirationDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  linkExpirationDate_lt?: Maybe<DateTimeInput>;
  linkExpirationDate_lte?: Maybe<DateTimeInput>;
  linkExpirationDate_gt?: Maybe<DateTimeInput>;
  linkExpirationDate_gte?: Maybe<DateTimeInput>;
  serviceOrderId?: Maybe<ID_Input>;
  serviceOrderId_not?: Maybe<ID_Input>;
  serviceOrderId_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_not_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_lt?: Maybe<ID_Input>;
  serviceOrderId_lte?: Maybe<ID_Input>;
  serviceOrderId_gt?: Maybe<ID_Input>;
  serviceOrderId_gte?: Maybe<ID_Input>;
  serviceOrderId_contains?: Maybe<ID_Input>;
  serviceOrderId_not_contains?: Maybe<ID_Input>;
  serviceOrderId_starts_with?: Maybe<ID_Input>;
  serviceOrderId_not_starts_with?: Maybe<ID_Input>;
  serviceOrderId_ends_with?: Maybe<ID_Input>;
  serviceOrderId_not_ends_with?: Maybe<ID_Input>;
  serviceOrder?: Maybe<ServiceOrderWhereInput>;
  customerFeedback?: Maybe<CustomerFeedbackWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | ServiceOrderUpdateNotificationWhereInput[]
    | ServiceOrderUpdateNotificationWhereInput
  >;
  OR?: Maybe<
    | ServiceOrderUpdateNotificationWhereInput[]
    | ServiceOrderUpdateNotificationWhereInput
  >;
  NOT?: Maybe<
    | ServiceOrderUpdateNotificationWhereInput[]
    | ServiceOrderUpdateNotificationWhereInput
  >;
}

export type ServiceStatusWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface ServiceStatusWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceStatusWhereInput[] | ServiceStatusWhereInput>;
  OR?: Maybe<ServiceStatusWhereInput[] | ServiceStatusWhereInput>;
  NOT?: Maybe<ServiceStatusWhereInput[] | ServiceStatusWhereInput>;
}

export type ServiceTextWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type WorkOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface ActionCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ActionUpdateInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ActionUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
}

export interface ActivityLogCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutActivityLogsInput>;
}

export interface ServiceOrderCreateOneWithoutActivityLogsInput {
  create?: Maybe<ServiceOrderCreateWithoutActivityLogsInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutActivityLogsInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface WorkOrderCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | WorkOrderCreateWithoutServiceOrderInput[]
    | WorkOrderCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
}

export interface WorkOrderCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  code: String;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  activityLog?: Maybe<ActivityLogCreateOneInput>;
  moment?: Maybe<MomentCreateOneInput>;
  isBlocked?: Maybe<Boolean>;
}

export interface ActivityLogCreateOneInput {
  create?: Maybe<ActivityLogCreateInput>;
  connect?: Maybe<ActivityLogWhereUniqueInput>;
}

export interface MomentCreateOneInput {
  create?: Maybe<MomentCreateInput>;
  connect?: Maybe<MomentWhereUniqueInput>;
}

export interface MomentCreateInput {
  id?: Maybe<ID_Input>;
  code: Int;
  type?: Maybe<MomentEntityType>;
  navisionCode?: Maybe<Int>;
  status?: Maybe<String>;
  actionId?: Maybe<String>;
  hasSoStatusChange?: Maybe<Boolean>;
  hasWoPlanningStatusChange?: Maybe<Boolean>;
  hasScStatusChange?: Maybe<Boolean>;
  isWOPlanningBlocked?: Maybe<Boolean>;
  isSCBlocked?: Maybe<Boolean>;
  isSOBlocked?: Maybe<Boolean>;
  isExportBlocked?: Maybe<Boolean>;
}

export interface ServiceTextCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ServiceTextCreateWithoutServiceOrderInput[]
    | ServiceTextCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<ServiceTextWhereUniqueInput[] | ServiceTextWhereUniqueInput>;
}

export interface ServiceTextCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  code: String;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface CustomerFeedbackCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | CustomerFeedbackCreateWithoutServiceOrderInput[]
    | CustomerFeedbackCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<
    CustomerFeedbackWhereUniqueInput[] | CustomerFeedbackWhereUniqueInput
  >;
}

export interface CustomerFeedbackCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId: ID_Input;
  notificationId: ID_Input;
}

export interface ActivityLogHistoryCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ActivityLogHistoryCreateWithoutServiceOrderInput[]
    | ActivityLogHistoryCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<
    ActivityLogHistoryWhereUniqueInput[] | ActivityLogHistoryWhereUniqueInput
  >;
}

export interface ActivityLogHistoryCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
}

export interface ReporterCreateOneInput {
  create?: Maybe<ReporterCreateInput>;
  connect?: Maybe<ReporterWhereUniqueInput>;
}

export interface ReporterCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  onBehalfOf?: Maybe<String>;
  type?: Maybe<ReporterType>;
  reference?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  workText?: Maybe<String>;
  internalText?: Maybe<String>;
  adviceText?: Maybe<String>;
  description?: Maybe<String>;
  isTrackAndTraceActive?: Maybe<Boolean>;
}

export interface ServiceOrderCommentCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ServiceOrderCommentCreateWithoutServiceOrderInput[]
    | ServiceOrderCommentCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<
    ServiceOrderCommentWhereUniqueInput[] | ServiceOrderCommentWhereUniqueInput
  >;
}

export interface ServiceOrderCommentCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
}

export interface ServiceAppointmentCreateOneWithoutServiceOrdersInput {
  create?: Maybe<ServiceAppointmentCreateWithoutServiceOrdersInput>;
  connect?: Maybe<ServiceAppointmentWhereUniqueInput>;
}

export interface ServiceAppointmentCreateWithoutServiceOrdersInput {
  id?: Maybe<ID_Input>;
  code: String;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentCreateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceContract?: Maybe<
    ServiceContractCreateOneWithoutServiceAppointmentsInput
  >;
}

export interface ServiceAppointmentCreateroofCodesInput {
  set?: Maybe<String[] | String>;
}

export interface ServiceContractCreateOneWithoutServiceAppointmentsInput {
  create?: Maybe<ServiceContractCreateWithoutServiceAppointmentsInput>;
  connect?: Maybe<ServiceContractWhereUniqueInput>;
}

export interface ServiceContractCreateWithoutServiceAppointmentsInput {
  id?: Maybe<ID_Input>;
  code: String;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractCreatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceOrders?: Maybe<ServiceOrderCreateManyInput>;
}

export interface ServiceContractCreatecontactPersonCodesInput {
  set?: Maybe<String[] | String>;
}

export interface ServiceOrderCreateManyInput {
  create?: Maybe<ServiceOrderCreateInput[] | ServiceOrderCreateInput>;
  connect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
}

export interface ServiceOrderCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ActivityLogCreateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ActivityLogCreateWithoutServiceOrderInput[]
    | ActivityLogCreateWithoutServiceOrderInput
  >;
  connect?: Maybe<ActivityLogWhereUniqueInput[] | ActivityLogWhereUniqueInput>;
}

export interface ActivityLogCreateWithoutServiceOrderInput {
  id?: Maybe<ID_Input>;
  code: String;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
}

export interface ActivityLogUpdateInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutActivityLogsInput>;
}

export interface ServiceOrderUpdateOneWithoutActivityLogsInput {
  create?: Maybe<ServiceOrderCreateWithoutActivityLogsInput>;
  update?: Maybe<ServiceOrderUpdateWithoutActivityLogsDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutActivityLogsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutActivityLogsDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface WorkOrderUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | WorkOrderCreateWithoutServiceOrderInput[]
    | WorkOrderCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  connect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  set?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  disconnect?: Maybe<WorkOrderWhereUniqueInput[] | WorkOrderWhereUniqueInput>;
  update?: Maybe<
    | WorkOrderUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | WorkOrderUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | WorkOrderUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | WorkOrderUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  updateMany?: Maybe<
    | WorkOrderUpdateManyWithWhereNestedInput[]
    | WorkOrderUpdateManyWithWhereNestedInput
  >;
}

export interface WorkOrderUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: WorkOrderWhereUniqueInput;
  data: WorkOrderUpdateWithoutServiceOrderDataInput;
}

export interface WorkOrderUpdateWithoutServiceOrderDataInput {
  code?: Maybe<String>;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  activityLog?: Maybe<ActivityLogUpdateOneInput>;
  moment?: Maybe<MomentUpdateOneInput>;
  isBlocked?: Maybe<Boolean>;
}

export interface ActivityLogUpdateOneInput {
  create?: Maybe<ActivityLogCreateInput>;
  update?: Maybe<ActivityLogUpdateDataInput>;
  upsert?: Maybe<ActivityLogUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ActivityLogWhereUniqueInput>;
}

export interface ActivityLogUpdateDataInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutActivityLogsInput>;
}

export interface ActivityLogUpsertNestedInput {
  update: ActivityLogUpdateDataInput;
  create: ActivityLogCreateInput;
}

export interface MomentUpdateOneInput {
  create?: Maybe<MomentCreateInput>;
  update?: Maybe<MomentUpdateDataInput>;
  upsert?: Maybe<MomentUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MomentWhereUniqueInput>;
}

export interface MomentUpdateDataInput {
  code?: Maybe<Int>;
  type?: Maybe<MomentEntityType>;
  navisionCode?: Maybe<Int>;
  status?: Maybe<String>;
  actionId?: Maybe<String>;
  hasSoStatusChange?: Maybe<Boolean>;
  hasWoPlanningStatusChange?: Maybe<Boolean>;
  hasScStatusChange?: Maybe<Boolean>;
  isWOPlanningBlocked?: Maybe<Boolean>;
  isSCBlocked?: Maybe<Boolean>;
  isSOBlocked?: Maybe<Boolean>;
  isExportBlocked?: Maybe<Boolean>;
}

export interface MomentUpsertNestedInput {
  update: MomentUpdateDataInput;
  create: MomentCreateInput;
}

export interface WorkOrderUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: WorkOrderWhereUniqueInput;
  update: WorkOrderUpdateWithoutServiceOrderDataInput;
  create: WorkOrderCreateWithoutServiceOrderInput;
}

export interface WorkOrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceCompanyName_not?: Maybe<String>;
  sourceCompanyName_in?: Maybe<String[] | String>;
  sourceCompanyName_not_in?: Maybe<String[] | String>;
  sourceCompanyName_lt?: Maybe<String>;
  sourceCompanyName_lte?: Maybe<String>;
  sourceCompanyName_gt?: Maybe<String>;
  sourceCompanyName_gte?: Maybe<String>;
  sourceCompanyName_contains?: Maybe<String>;
  sourceCompanyName_not_contains?: Maybe<String>;
  sourceCompanyName_starts_with?: Maybe<String>;
  sourceCompanyName_not_starts_with?: Maybe<String>;
  sourceCompanyName_ends_with?: Maybe<String>;
  sourceCompanyName_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceType_not?: Maybe<String>;
  sourceType_in?: Maybe<String[] | String>;
  sourceType_not_in?: Maybe<String[] | String>;
  sourceType_lt?: Maybe<String>;
  sourceType_lte?: Maybe<String>;
  sourceType_gt?: Maybe<String>;
  sourceType_gte?: Maybe<String>;
  sourceType_contains?: Maybe<String>;
  sourceType_not_contains?: Maybe<String>;
  sourceType_starts_with?: Maybe<String>;
  sourceType_not_starts_with?: Maybe<String>;
  sourceType_ends_with?: Maybe<String>;
  sourceType_not_ends_with?: Maybe<String>;
  sourceCode?: Maybe<String>;
  sourceCode_not?: Maybe<String>;
  sourceCode_in?: Maybe<String[] | String>;
  sourceCode_not_in?: Maybe<String[] | String>;
  sourceCode_lt?: Maybe<String>;
  sourceCode_lte?: Maybe<String>;
  sourceCode_gt?: Maybe<String>;
  sourceCode_gte?: Maybe<String>;
  sourceCode_contains?: Maybe<String>;
  sourceCode_not_contains?: Maybe<String>;
  sourceCode_starts_with?: Maybe<String>;
  sourceCode_not_starts_with?: Maybe<String>;
  sourceCode_ends_with?: Maybe<String>;
  sourceCode_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceType_not?: Maybe<String>;
  resourceType_in?: Maybe<String[] | String>;
  resourceType_not_in?: Maybe<String[] | String>;
  resourceType_lt?: Maybe<String>;
  resourceType_lte?: Maybe<String>;
  resourceType_gt?: Maybe<String>;
  resourceType_gte?: Maybe<String>;
  resourceType_contains?: Maybe<String>;
  resourceType_not_contains?: Maybe<String>;
  resourceType_starts_with?: Maybe<String>;
  resourceType_not_starts_with?: Maybe<String>;
  resourceType_ends_with?: Maybe<String>;
  resourceType_not_ends_with?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCode_not?: Maybe<String>;
  resourceCode_in?: Maybe<String[] | String>;
  resourceCode_not_in?: Maybe<String[] | String>;
  resourceCode_lt?: Maybe<String>;
  resourceCode_lte?: Maybe<String>;
  resourceCode_gt?: Maybe<String>;
  resourceCode_gte?: Maybe<String>;
  resourceCode_contains?: Maybe<String>;
  resourceCode_not_contains?: Maybe<String>;
  resourceCode_starts_with?: Maybe<String>;
  resourceCode_not_starts_with?: Maybe<String>;
  resourceCode_ends_with?: Maybe<String>;
  resourceCode_not_ends_with?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  resourceCompanyName_not?: Maybe<String>;
  resourceCompanyName_in?: Maybe<String[] | String>;
  resourceCompanyName_not_in?: Maybe<String[] | String>;
  resourceCompanyName_lt?: Maybe<String>;
  resourceCompanyName_lte?: Maybe<String>;
  resourceCompanyName_gt?: Maybe<String>;
  resourceCompanyName_gte?: Maybe<String>;
  resourceCompanyName_contains?: Maybe<String>;
  resourceCompanyName_not_contains?: Maybe<String>;
  resourceCompanyName_starts_with?: Maybe<String>;
  resourceCompanyName_not_starts_with?: Maybe<String>;
  resourceCompanyName_ends_with?: Maybe<String>;
  resourceCompanyName_not_ends_with?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  isMainResource_not?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  serviceStatus_not?: Maybe<String>;
  serviceStatus_in?: Maybe<String[] | String>;
  serviceStatus_not_in?: Maybe<String[] | String>;
  serviceStatus_lt?: Maybe<String>;
  serviceStatus_lte?: Maybe<String>;
  serviceStatus_gt?: Maybe<String>;
  serviceStatus_gte?: Maybe<String>;
  serviceStatus_contains?: Maybe<String>;
  serviceStatus_not_contains?: Maybe<String>;
  serviceStatus_starts_with?: Maybe<String>;
  serviceStatus_not_starts_with?: Maybe<String>;
  serviceStatus_ends_with?: Maybe<String>;
  serviceStatus_not_ends_with?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  statusReasonDescription_not?: Maybe<String>;
  statusReasonDescription_in?: Maybe<String[] | String>;
  statusReasonDescription_not_in?: Maybe<String[] | String>;
  statusReasonDescription_lt?: Maybe<String>;
  statusReasonDescription_lte?: Maybe<String>;
  statusReasonDescription_gt?: Maybe<String>;
  statusReasonDescription_gte?: Maybe<String>;
  statusReasonDescription_contains?: Maybe<String>;
  statusReasonDescription_not_contains?: Maybe<String>;
  statusReasonDescription_starts_with?: Maybe<String>;
  statusReasonDescription_not_starts_with?: Maybe<String>;
  statusReasonDescription_ends_with?: Maybe<String>;
  statusReasonDescription_not_ends_with?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  isFinishedService_not?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  firstPossibleStartDate_not?: Maybe<String>;
  firstPossibleStartDate_in?: Maybe<String[] | String>;
  firstPossibleStartDate_not_in?: Maybe<String[] | String>;
  firstPossibleStartDate_lt?: Maybe<String>;
  firstPossibleStartDate_lte?: Maybe<String>;
  firstPossibleStartDate_gt?: Maybe<String>;
  firstPossibleStartDate_gte?: Maybe<String>;
  firstPossibleStartDate_contains?: Maybe<String>;
  firstPossibleStartDate_not_contains?: Maybe<String>;
  firstPossibleStartDate_starts_with?: Maybe<String>;
  firstPossibleStartDate_not_starts_with?: Maybe<String>;
  firstPossibleStartDate_ends_with?: Maybe<String>;
  firstPossibleStartDate_not_ends_with?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate_not?: Maybe<String>;
  lastPossibleStartDate_in?: Maybe<String[] | String>;
  lastPossibleStartDate_not_in?: Maybe<String[] | String>;
  lastPossibleStartDate_lt?: Maybe<String>;
  lastPossibleStartDate_lte?: Maybe<String>;
  lastPossibleStartDate_gt?: Maybe<String>;
  lastPossibleStartDate_gte?: Maybe<String>;
  lastPossibleStartDate_contains?: Maybe<String>;
  lastPossibleStartDate_not_contains?: Maybe<String>;
  lastPossibleStartDate_starts_with?: Maybe<String>;
  lastPossibleStartDate_not_starts_with?: Maybe<String>;
  lastPossibleStartDate_ends_with?: Maybe<String>;
  lastPossibleStartDate_not_ends_with?: Maybe<String>;
  starDate?: Maybe<String>;
  starDate_not?: Maybe<String>;
  starDate_in?: Maybe<String[] | String>;
  starDate_not_in?: Maybe<String[] | String>;
  starDate_lt?: Maybe<String>;
  starDate_lte?: Maybe<String>;
  starDate_gt?: Maybe<String>;
  starDate_gte?: Maybe<String>;
  starDate_contains?: Maybe<String>;
  starDate_not_contains?: Maybe<String>;
  starDate_starts_with?: Maybe<String>;
  starDate_not_starts_with?: Maybe<String>;
  starDate_ends_with?: Maybe<String>;
  starDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  expectedHours_not?: Maybe<Float>;
  expectedHours_in?: Maybe<Float[] | Float>;
  expectedHours_not_in?: Maybe<Float[] | Float>;
  expectedHours_lt?: Maybe<Float>;
  expectedHours_lte?: Maybe<Float>;
  expectedHours_gt?: Maybe<Float>;
  expectedHours_gte?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  durationTime_not?: Maybe<Float>;
  durationTime_in?: Maybe<Float[] | Float>;
  durationTime_not_in?: Maybe<Float[] | Float>;
  durationTime_lt?: Maybe<Float>;
  durationTime_lte?: Maybe<Float>;
  durationTime_gt?: Maybe<Float>;
  durationTime_gte?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isDuringClockTime_not?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isFirmPlanned_not?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  isExportToFSA_not?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  exportToFSADate_not?: Maybe<String>;
  exportToFSADate_in?: Maybe<String[] | String>;
  exportToFSADate_not_in?: Maybe<String[] | String>;
  exportToFSADate_lt?: Maybe<String>;
  exportToFSADate_lte?: Maybe<String>;
  exportToFSADate_gt?: Maybe<String>;
  exportToFSADate_gte?: Maybe<String>;
  exportToFSADate_contains?: Maybe<String>;
  exportToFSADate_not_contains?: Maybe<String>;
  exportToFSADate_starts_with?: Maybe<String>;
  exportToFSADate_not_starts_with?: Maybe<String>;
  exportToFSADate_ends_with?: Maybe<String>;
  exportToFSADate_not_ends_with?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePoint_not?: Maybe<String>;
  actualReferencePoint_in?: Maybe<String[] | String>;
  actualReferencePoint_not_in?: Maybe<String[] | String>;
  actualReferencePoint_lt?: Maybe<String>;
  actualReferencePoint_lte?: Maybe<String>;
  actualReferencePoint_gt?: Maybe<String>;
  actualReferencePoint_gte?: Maybe<String>;
  actualReferencePoint_contains?: Maybe<String>;
  actualReferencePoint_not_contains?: Maybe<String>;
  actualReferencePoint_starts_with?: Maybe<String>;
  actualReferencePoint_not_starts_with?: Maybe<String>;
  actualReferencePoint_ends_with?: Maybe<String>;
  actualReferencePoint_not_ends_with?: Maybe<String>;
  assignedTo?: Maybe<String>;
  assignedTo_not?: Maybe<String>;
  assignedTo_in?: Maybe<String[] | String>;
  assignedTo_not_in?: Maybe<String[] | String>;
  assignedTo_lt?: Maybe<String>;
  assignedTo_lte?: Maybe<String>;
  assignedTo_gt?: Maybe<String>;
  assignedTo_gte?: Maybe<String>;
  assignedTo_contains?: Maybe<String>;
  assignedTo_not_contains?: Maybe<String>;
  assignedTo_starts_with?: Maybe<String>;
  assignedTo_not_starts_with?: Maybe<String>;
  assignedTo_ends_with?: Maybe<String>;
  assignedTo_not_ends_with?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  globalDimensionCode_not?: Maybe<String>;
  globalDimensionCode_in?: Maybe<String[] | String>;
  globalDimensionCode_not_in?: Maybe<String[] | String>;
  globalDimensionCode_lt?: Maybe<String>;
  globalDimensionCode_lte?: Maybe<String>;
  globalDimensionCode_gt?: Maybe<String>;
  globalDimensionCode_gte?: Maybe<String>;
  globalDimensionCode_contains?: Maybe<String>;
  globalDimensionCode_not_contains?: Maybe<String>;
  globalDimensionCode_starts_with?: Maybe<String>;
  globalDimensionCode_not_starts_with?: Maybe<String>;
  globalDimensionCode_ends_with?: Maybe<String>;
  globalDimensionCode_not_ends_with?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  serviceContractCode_not?: Maybe<String>;
  serviceContractCode_in?: Maybe<String[] | String>;
  serviceContractCode_not_in?: Maybe<String[] | String>;
  serviceContractCode_lt?: Maybe<String>;
  serviceContractCode_lte?: Maybe<String>;
  serviceContractCode_gt?: Maybe<String>;
  serviceContractCode_gte?: Maybe<String>;
  serviceContractCode_contains?: Maybe<String>;
  serviceContractCode_not_contains?: Maybe<String>;
  serviceContractCode_starts_with?: Maybe<String>;
  serviceContractCode_not_starts_with?: Maybe<String>;
  serviceContractCode_ends_with?: Maybe<String>;
  serviceContractCode_not_ends_with?: Maybe<String>;
  orderManager?: Maybe<String>;
  orderManager_not?: Maybe<String>;
  orderManager_in?: Maybe<String[] | String>;
  orderManager_not_in?: Maybe<String[] | String>;
  orderManager_lt?: Maybe<String>;
  orderManager_lte?: Maybe<String>;
  orderManager_gt?: Maybe<String>;
  orderManager_gte?: Maybe<String>;
  orderManager_contains?: Maybe<String>;
  orderManager_not_contains?: Maybe<String>;
  orderManager_starts_with?: Maybe<String>;
  orderManager_not_starts_with?: Maybe<String>;
  orderManager_ends_with?: Maybe<String>;
  orderManager_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  jobDescription?: Maybe<String>;
  jobDescription_not?: Maybe<String>;
  jobDescription_in?: Maybe<String[] | String>;
  jobDescription_not_in?: Maybe<String[] | String>;
  jobDescription_lt?: Maybe<String>;
  jobDescription_lte?: Maybe<String>;
  jobDescription_gt?: Maybe<String>;
  jobDescription_gte?: Maybe<String>;
  jobDescription_contains?: Maybe<String>;
  jobDescription_not_contains?: Maybe<String>;
  jobDescription_starts_with?: Maybe<String>;
  jobDescription_not_starts_with?: Maybe<String>;
  jobDescription_ends_with?: Maybe<String>;
  jobDescription_not_ends_with?: Maybe<String>;
  soCode?: Maybe<String>;
  soCode_not?: Maybe<String>;
  soCode_in?: Maybe<String[] | String>;
  soCode_not_in?: Maybe<String[] | String>;
  soCode_lt?: Maybe<String>;
  soCode_lte?: Maybe<String>;
  soCode_gt?: Maybe<String>;
  soCode_gte?: Maybe<String>;
  soCode_contains?: Maybe<String>;
  soCode_not_contains?: Maybe<String>;
  soCode_starts_with?: Maybe<String>;
  soCode_not_starts_with?: Maybe<String>;
  soCode_ends_with?: Maybe<String>;
  soCode_not_ends_with?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soCallerCode_not?: Maybe<String>;
  soCallerCode_in?: Maybe<String[] | String>;
  soCallerCode_not_in?: Maybe<String[] | String>;
  soCallerCode_lt?: Maybe<String>;
  soCallerCode_lte?: Maybe<String>;
  soCallerCode_gt?: Maybe<String>;
  soCallerCode_gte?: Maybe<String>;
  soCallerCode_contains?: Maybe<String>;
  soCallerCode_not_contains?: Maybe<String>;
  soCallerCode_starts_with?: Maybe<String>;
  soCallerCode_not_starts_with?: Maybe<String>;
  soCallerCode_ends_with?: Maybe<String>;
  soCallerCode_not_ends_with?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soOrderType_not?: Maybe<String>;
  soOrderType_in?: Maybe<String[] | String>;
  soOrderType_not_in?: Maybe<String[] | String>;
  soOrderType_lt?: Maybe<String>;
  soOrderType_lte?: Maybe<String>;
  soOrderType_gt?: Maybe<String>;
  soOrderType_gte?: Maybe<String>;
  soOrderType_contains?: Maybe<String>;
  soOrderType_not_contains?: Maybe<String>;
  soOrderType_starts_with?: Maybe<String>;
  soOrderType_not_starts_with?: Maybe<String>;
  soOrderType_ends_with?: Maybe<String>;
  soOrderType_not_ends_with?: Maybe<String>;
  soDescription?: Maybe<String>;
  soDescription_not?: Maybe<String>;
  soDescription_in?: Maybe<String[] | String>;
  soDescription_not_in?: Maybe<String[] | String>;
  soDescription_lt?: Maybe<String>;
  soDescription_lte?: Maybe<String>;
  soDescription_gt?: Maybe<String>;
  soDescription_gte?: Maybe<String>;
  soDescription_contains?: Maybe<String>;
  soDescription_not_contains?: Maybe<String>;
  soDescription_starts_with?: Maybe<String>;
  soDescription_not_starts_with?: Maybe<String>;
  soDescription_ends_with?: Maybe<String>;
  soDescription_not_ends_with?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactCode_not?: Maybe<String>;
  soContactCode_in?: Maybe<String[] | String>;
  soContactCode_not_in?: Maybe<String[] | String>;
  soContactCode_lt?: Maybe<String>;
  soContactCode_lte?: Maybe<String>;
  soContactCode_gt?: Maybe<String>;
  soContactCode_gte?: Maybe<String>;
  soContactCode_contains?: Maybe<String>;
  soContactCode_not_contains?: Maybe<String>;
  soContactCode_starts_with?: Maybe<String>;
  soContactCode_not_starts_with?: Maybe<String>;
  soContactCode_ends_with?: Maybe<String>;
  soContactCode_not_ends_with?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soContactPersonCode_not?: Maybe<String>;
  soContactPersonCode_in?: Maybe<String[] | String>;
  soContactPersonCode_not_in?: Maybe<String[] | String>;
  soContactPersonCode_lt?: Maybe<String>;
  soContactPersonCode_lte?: Maybe<String>;
  soContactPersonCode_gt?: Maybe<String>;
  soContactPersonCode_gte?: Maybe<String>;
  soContactPersonCode_contains?: Maybe<String>;
  soContactPersonCode_not_contains?: Maybe<String>;
  soContactPersonCode_starts_with?: Maybe<String>;
  soContactPersonCode_not_starts_with?: Maybe<String>;
  soContactPersonCode_ends_with?: Maybe<String>;
  soContactPersonCode_not_ends_with?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soCustomerFeature_not?: Maybe<String>;
  soCustomerFeature_in?: Maybe<String[] | String>;
  soCustomerFeature_not_in?: Maybe<String[] | String>;
  soCustomerFeature_lt?: Maybe<String>;
  soCustomerFeature_lte?: Maybe<String>;
  soCustomerFeature_gt?: Maybe<String>;
  soCustomerFeature_gte?: Maybe<String>;
  soCustomerFeature_contains?: Maybe<String>;
  soCustomerFeature_not_contains?: Maybe<String>;
  soCustomerFeature_starts_with?: Maybe<String>;
  soCustomerFeature_not_starts_with?: Maybe<String>;
  soCustomerFeature_ends_with?: Maybe<String>;
  soCustomerFeature_not_ends_with?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soBillingCode_not?: Maybe<String>;
  soBillingCode_in?: Maybe<String[] | String>;
  soBillingCode_not_in?: Maybe<String[] | String>;
  soBillingCode_lt?: Maybe<String>;
  soBillingCode_lte?: Maybe<String>;
  soBillingCode_gt?: Maybe<String>;
  soBillingCode_gte?: Maybe<String>;
  soBillingCode_contains?: Maybe<String>;
  soBillingCode_not_contains?: Maybe<String>;
  soBillingCode_starts_with?: Maybe<String>;
  soBillingCode_not_starts_with?: Maybe<String>;
  soBillingCode_ends_with?: Maybe<String>;
  soBillingCode_not_ends_with?: Maybe<String>;
  soReference?: Maybe<String>;
  soReference_not?: Maybe<String>;
  soReference_in?: Maybe<String[] | String>;
  soReference_not_in?: Maybe<String[] | String>;
  soReference_lt?: Maybe<String>;
  soReference_lte?: Maybe<String>;
  soReference_gt?: Maybe<String>;
  soReference_gte?: Maybe<String>;
  soReference_contains?: Maybe<String>;
  soReference_not_contains?: Maybe<String>;
  soReference_starts_with?: Maybe<String>;
  soReference_not_starts_with?: Maybe<String>;
  soReference_ends_with?: Maybe<String>;
  soReference_not_ends_with?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soCommissionDate_not?: Maybe<String>;
  soCommissionDate_in?: Maybe<String[] | String>;
  soCommissionDate_not_in?: Maybe<String[] | String>;
  soCommissionDate_lt?: Maybe<String>;
  soCommissionDate_lte?: Maybe<String>;
  soCommissionDate_gt?: Maybe<String>;
  soCommissionDate_gte?: Maybe<String>;
  soCommissionDate_contains?: Maybe<String>;
  soCommissionDate_not_contains?: Maybe<String>;
  soCommissionDate_starts_with?: Maybe<String>;
  soCommissionDate_not_starts_with?: Maybe<String>;
  soCommissionDate_ends_with?: Maybe<String>;
  soCommissionDate_not_ends_with?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soServiceLocationCode_not?: Maybe<String>;
  soServiceLocationCode_in?: Maybe<String[] | String>;
  soServiceLocationCode_not_in?: Maybe<String[] | String>;
  soServiceLocationCode_lt?: Maybe<String>;
  soServiceLocationCode_lte?: Maybe<String>;
  soServiceLocationCode_gt?: Maybe<String>;
  soServiceLocationCode_gte?: Maybe<String>;
  soServiceLocationCode_contains?: Maybe<String>;
  soServiceLocationCode_not_contains?: Maybe<String>;
  soServiceLocationCode_starts_with?: Maybe<String>;
  soServiceLocationCode_not_starts_with?: Maybe<String>;
  soServiceLocationCode_ends_with?: Maybe<String>;
  soServiceLocationCode_not_ends_with?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soOrderCodeCustomer_not?: Maybe<String>;
  soOrderCodeCustomer_in?: Maybe<String[] | String>;
  soOrderCodeCustomer_not_in?: Maybe<String[] | String>;
  soOrderCodeCustomer_lt?: Maybe<String>;
  soOrderCodeCustomer_lte?: Maybe<String>;
  soOrderCodeCustomer_gt?: Maybe<String>;
  soOrderCodeCustomer_gte?: Maybe<String>;
  soOrderCodeCustomer_contains?: Maybe<String>;
  soOrderCodeCustomer_not_contains?: Maybe<String>;
  soOrderCodeCustomer_starts_with?: Maybe<String>;
  soOrderCodeCustomer_not_starts_with?: Maybe<String>;
  soOrderCodeCustomer_ends_with?: Maybe<String>;
  soOrderCodeCustomer_not_ends_with?: Maybe<String>;
  soName?: Maybe<String>;
  soName_not?: Maybe<String>;
  soName_in?: Maybe<String[] | String>;
  soName_not_in?: Maybe<String[] | String>;
  soName_lt?: Maybe<String>;
  soName_lte?: Maybe<String>;
  soName_gt?: Maybe<String>;
  soName_gte?: Maybe<String>;
  soName_contains?: Maybe<String>;
  soName_not_contains?: Maybe<String>;
  soName_starts_with?: Maybe<String>;
  soName_not_starts_with?: Maybe<String>;
  soName_ends_with?: Maybe<String>;
  soName_not_ends_with?: Maybe<String>;
  soName2?: Maybe<String>;
  soName2_not?: Maybe<String>;
  soName2_in?: Maybe<String[] | String>;
  soName2_not_in?: Maybe<String[] | String>;
  soName2_lt?: Maybe<String>;
  soName2_lte?: Maybe<String>;
  soName2_gt?: Maybe<String>;
  soName2_gte?: Maybe<String>;
  soName2_contains?: Maybe<String>;
  soName2_not_contains?: Maybe<String>;
  soName2_starts_with?: Maybe<String>;
  soName2_not_starts_with?: Maybe<String>;
  soName2_ends_with?: Maybe<String>;
  soName2_not_ends_with?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soSourceType_not?: Maybe<String>;
  soSourceType_in?: Maybe<String[] | String>;
  soSourceType_not_in?: Maybe<String[] | String>;
  soSourceType_lt?: Maybe<String>;
  soSourceType_lte?: Maybe<String>;
  soSourceType_gt?: Maybe<String>;
  soSourceType_gte?: Maybe<String>;
  soSourceType_contains?: Maybe<String>;
  soSourceType_not_contains?: Maybe<String>;
  soSourceType_starts_with?: Maybe<String>;
  soSourceType_not_starts_with?: Maybe<String>;
  soSourceType_ends_with?: Maybe<String>;
  soSourceType_not_ends_with?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soServiceContractCode_not?: Maybe<String>;
  soServiceContractCode_in?: Maybe<String[] | String>;
  soServiceContractCode_not_in?: Maybe<String[] | String>;
  soServiceContractCode_lt?: Maybe<String>;
  soServiceContractCode_lte?: Maybe<String>;
  soServiceContractCode_gt?: Maybe<String>;
  soServiceContractCode_gte?: Maybe<String>;
  soServiceContractCode_contains?: Maybe<String>;
  soServiceContractCode_not_contains?: Maybe<String>;
  soServiceContractCode_starts_with?: Maybe<String>;
  soServiceContractCode_not_starts_with?: Maybe<String>;
  soServiceContractCode_ends_with?: Maybe<String>;
  soServiceContractCode_not_ends_with?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soGlobalDimensionCode_not?: Maybe<String>;
  soGlobalDimensionCode_in?: Maybe<String[] | String>;
  soGlobalDimensionCode_not_in?: Maybe<String[] | String>;
  soGlobalDimensionCode_lt?: Maybe<String>;
  soGlobalDimensionCode_lte?: Maybe<String>;
  soGlobalDimensionCode_gt?: Maybe<String>;
  soGlobalDimensionCode_gte?: Maybe<String>;
  soGlobalDimensionCode_contains?: Maybe<String>;
  soGlobalDimensionCode_not_contains?: Maybe<String>;
  soGlobalDimensionCode_starts_with?: Maybe<String>;
  soGlobalDimensionCode_not_starts_with?: Maybe<String>;
  soGlobalDimensionCode_ends_with?: Maybe<String>;
  soGlobalDimensionCode_not_ends_with?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soTerritoryCode_not?: Maybe<String>;
  soTerritoryCode_in?: Maybe<String[] | String>;
  soTerritoryCode_not_in?: Maybe<String[] | String>;
  soTerritoryCode_lt?: Maybe<String>;
  soTerritoryCode_lte?: Maybe<String>;
  soTerritoryCode_gt?: Maybe<String>;
  soTerritoryCode_gte?: Maybe<String>;
  soTerritoryCode_contains?: Maybe<String>;
  soTerritoryCode_not_contains?: Maybe<String>;
  soTerritoryCode_starts_with?: Maybe<String>;
  soTerritoryCode_not_starts_with?: Maybe<String>;
  soTerritoryCode_ends_with?: Maybe<String>;
  soTerritoryCode_not_ends_with?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderDate_not?: Maybe<String>;
  soOrderDate_in?: Maybe<String[] | String>;
  soOrderDate_not_in?: Maybe<String[] | String>;
  soOrderDate_lt?: Maybe<String>;
  soOrderDate_lte?: Maybe<String>;
  soOrderDate_gt?: Maybe<String>;
  soOrderDate_gte?: Maybe<String>;
  soOrderDate_contains?: Maybe<String>;
  soOrderDate_not_contains?: Maybe<String>;
  soOrderDate_starts_with?: Maybe<String>;
  soOrderDate_not_starts_with?: Maybe<String>;
  soOrderDate_ends_with?: Maybe<String>;
  soOrderDate_not_ends_with?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soOrderTime_not?: Maybe<String>;
  soOrderTime_in?: Maybe<String[] | String>;
  soOrderTime_not_in?: Maybe<String[] | String>;
  soOrderTime_lt?: Maybe<String>;
  soOrderTime_lte?: Maybe<String>;
  soOrderTime_gt?: Maybe<String>;
  soOrderTime_gte?: Maybe<String>;
  soOrderTime_contains?: Maybe<String>;
  soOrderTime_not_contains?: Maybe<String>;
  soOrderTime_starts_with?: Maybe<String>;
  soOrderTime_not_starts_with?: Maybe<String>;
  soOrderTime_ends_with?: Maybe<String>;
  soOrderTime_not_ends_with?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soBudgetHours_not?: Maybe<Float>;
  soBudgetHours_in?: Maybe<Float[] | Float>;
  soBudgetHours_not_in?: Maybe<Float[] | Float>;
  soBudgetHours_lt?: Maybe<Float>;
  soBudgetHours_lte?: Maybe<Float>;
  soBudgetHours_gt?: Maybe<Float>;
  soBudgetHours_gte?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soExpectedHours_not?: Maybe<Float>;
  soExpectedHours_in?: Maybe<Float[] | Float>;
  soExpectedHours_not_in?: Maybe<Float[] | Float>;
  soExpectedHours_lt?: Maybe<Float>;
  soExpectedHours_lte?: Maybe<Float>;
  soExpectedHours_gt?: Maybe<Float>;
  soExpectedHours_gte?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soDurationTime_not?: Maybe<Float>;
  soDurationTime_in?: Maybe<Float[] | Float>;
  soDurationTime_not_in?: Maybe<Float[] | Float>;
  soDurationTime_lt?: Maybe<Float>;
  soDurationTime_lte?: Maybe<Float>;
  soDurationTime_gt?: Maybe<Float>;
  soDurationTime_gte?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soIsFirmPlanned_not?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarDate_not?: Maybe<String>;
  soStarDate_in?: Maybe<String[] | String>;
  soStarDate_not_in?: Maybe<String[] | String>;
  soStarDate_lt?: Maybe<String>;
  soStarDate_lte?: Maybe<String>;
  soStarDate_gt?: Maybe<String>;
  soStarDate_gte?: Maybe<String>;
  soStarDate_contains?: Maybe<String>;
  soStarDate_not_contains?: Maybe<String>;
  soStarDate_starts_with?: Maybe<String>;
  soStarDate_not_starts_with?: Maybe<String>;
  soStarDate_ends_with?: Maybe<String>;
  soStarDate_not_ends_with?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soStarTime_not?: Maybe<String>;
  soStarTime_in?: Maybe<String[] | String>;
  soStarTime_not_in?: Maybe<String[] | String>;
  soStarTime_lt?: Maybe<String>;
  soStarTime_lte?: Maybe<String>;
  soStarTime_gt?: Maybe<String>;
  soStarTime_gte?: Maybe<String>;
  soStarTime_contains?: Maybe<String>;
  soStarTime_not_contains?: Maybe<String>;
  soStarTime_starts_with?: Maybe<String>;
  soStarTime_not_starts_with?: Maybe<String>;
  soStarTime_ends_with?: Maybe<String>;
  soStarTime_not_ends_with?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndDate_not?: Maybe<String>;
  soEndDate_in?: Maybe<String[] | String>;
  soEndDate_not_in?: Maybe<String[] | String>;
  soEndDate_lt?: Maybe<String>;
  soEndDate_lte?: Maybe<String>;
  soEndDate_gt?: Maybe<String>;
  soEndDate_gte?: Maybe<String>;
  soEndDate_contains?: Maybe<String>;
  soEndDate_not_contains?: Maybe<String>;
  soEndDate_starts_with?: Maybe<String>;
  soEndDate_not_starts_with?: Maybe<String>;
  soEndDate_ends_with?: Maybe<String>;
  soEndDate_not_ends_with?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soEndTime_not?: Maybe<String>;
  soEndTime_in?: Maybe<String[] | String>;
  soEndTime_not_in?: Maybe<String[] | String>;
  soEndTime_lt?: Maybe<String>;
  soEndTime_lte?: Maybe<String>;
  soEndTime_gt?: Maybe<String>;
  soEndTime_gte?: Maybe<String>;
  soEndTime_contains?: Maybe<String>;
  soEndTime_not_contains?: Maybe<String>;
  soEndTime_starts_with?: Maybe<String>;
  soEndTime_not_starts_with?: Maybe<String>;
  soEndTime_ends_with?: Maybe<String>;
  soEndTime_not_ends_with?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soPriority_not?: Maybe<PriorityType>;
  soPriority_in?: Maybe<PriorityType[] | PriorityType>;
  soPriority_not_in?: Maybe<PriorityType[] | PriorityType>;
  soNextDeadline?: Maybe<String>;
  soNextDeadline_not?: Maybe<String>;
  soNextDeadline_in?: Maybe<String[] | String>;
  soNextDeadline_not_in?: Maybe<String[] | String>;
  soNextDeadline_lt?: Maybe<String>;
  soNextDeadline_lte?: Maybe<String>;
  soNextDeadline_gt?: Maybe<String>;
  soNextDeadline_gte?: Maybe<String>;
  soNextDeadline_contains?: Maybe<String>;
  soNextDeadline_not_contains?: Maybe<String>;
  soNextDeadline_starts_with?: Maybe<String>;
  soNextDeadline_not_starts_with?: Maybe<String>;
  soNextDeadline_ends_with?: Maybe<String>;
  soNextDeadline_not_ends_with?: Maybe<String>;
  soStatus?: Maybe<String>;
  soStatus_not?: Maybe<String>;
  soStatus_in?: Maybe<String[] | String>;
  soStatus_not_in?: Maybe<String[] | String>;
  soStatus_lt?: Maybe<String>;
  soStatus_lte?: Maybe<String>;
  soStatus_gt?: Maybe<String>;
  soStatus_gte?: Maybe<String>;
  soStatus_contains?: Maybe<String>;
  soStatus_not_contains?: Maybe<String>;
  soStatus_starts_with?: Maybe<String>;
  soStatus_not_starts_with?: Maybe<String>;
  soStatus_ends_with?: Maybe<String>;
  soStatus_not_ends_with?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soActualReferencePoint_not?: Maybe<String>;
  soActualReferencePoint_in?: Maybe<String[] | String>;
  soActualReferencePoint_not_in?: Maybe<String[] | String>;
  soActualReferencePoint_lt?: Maybe<String>;
  soActualReferencePoint_lte?: Maybe<String>;
  soActualReferencePoint_gt?: Maybe<String>;
  soActualReferencePoint_gte?: Maybe<String>;
  soActualReferencePoint_contains?: Maybe<String>;
  soActualReferencePoint_not_contains?: Maybe<String>;
  soActualReferencePoint_starts_with?: Maybe<String>;
  soActualReferencePoint_not_starts_with?: Maybe<String>;
  soActualReferencePoint_ends_with?: Maybe<String>;
  soActualReferencePoint_not_ends_with?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soOrderManager_not?: Maybe<String>;
  soOrderManager_in?: Maybe<String[] | String>;
  soOrderManager_not_in?: Maybe<String[] | String>;
  soOrderManager_lt?: Maybe<String>;
  soOrderManager_lte?: Maybe<String>;
  soOrderManager_gt?: Maybe<String>;
  soOrderManager_gte?: Maybe<String>;
  soOrderManager_contains?: Maybe<String>;
  soOrderManager_not_contains?: Maybe<String>;
  soOrderManager_starts_with?: Maybe<String>;
  soOrderManager_not_starts_with?: Maybe<String>;
  soOrderManager_ends_with?: Maybe<String>;
  soOrderManager_not_ends_with?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soAssignedTo_not?: Maybe<String>;
  soAssignedTo_in?: Maybe<String[] | String>;
  soAssignedTo_not_in?: Maybe<String[] | String>;
  soAssignedTo_lt?: Maybe<String>;
  soAssignedTo_lte?: Maybe<String>;
  soAssignedTo_gt?: Maybe<String>;
  soAssignedTo_gte?: Maybe<String>;
  soAssignedTo_contains?: Maybe<String>;
  soAssignedTo_not_contains?: Maybe<String>;
  soAssignedTo_starts_with?: Maybe<String>;
  soAssignedTo_not_starts_with?: Maybe<String>;
  soAssignedTo_ends_with?: Maybe<String>;
  soAssignedTo_not_ends_with?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  soEmployeeCode_not?: Maybe<String>;
  soEmployeeCode_in?: Maybe<String[] | String>;
  soEmployeeCode_not_in?: Maybe<String[] | String>;
  soEmployeeCode_lt?: Maybe<String>;
  soEmployeeCode_lte?: Maybe<String>;
  soEmployeeCode_gt?: Maybe<String>;
  soEmployeeCode_gte?: Maybe<String>;
  soEmployeeCode_contains?: Maybe<String>;
  soEmployeeCode_not_contains?: Maybe<String>;
  soEmployeeCode_starts_with?: Maybe<String>;
  soEmployeeCode_not_starts_with?: Maybe<String>;
  soEmployeeCode_ends_with?: Maybe<String>;
  soEmployeeCode_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  detectorType?: Maybe<String>;
  detectorType_not?: Maybe<String>;
  detectorType_in?: Maybe<String[] | String>;
  detectorType_not_in?: Maybe<String[] | String>;
  detectorType_lt?: Maybe<String>;
  detectorType_lte?: Maybe<String>;
  detectorType_gt?: Maybe<String>;
  detectorType_gte?: Maybe<String>;
  detectorType_contains?: Maybe<String>;
  detectorType_not_contains?: Maybe<String>;
  detectorType_starts_with?: Maybe<String>;
  detectorType_not_starts_with?: Maybe<String>;
  detectorType_ends_with?: Maybe<String>;
  detectorType_not_ends_with?: Maybe<String>;
  notInDakota?: Maybe<String>;
  notInDakota_not?: Maybe<String>;
  notInDakota_in?: Maybe<String[] | String>;
  notInDakota_not_in?: Maybe<String[] | String>;
  notInDakota_lt?: Maybe<String>;
  notInDakota_lte?: Maybe<String>;
  notInDakota_gt?: Maybe<String>;
  notInDakota_gte?: Maybe<String>;
  notInDakota_contains?: Maybe<String>;
  notInDakota_not_contains?: Maybe<String>;
  notInDakota_starts_with?: Maybe<String>;
  notInDakota_not_starts_with?: Maybe<String>;
  notInDakota_ends_with?: Maybe<String>;
  notInDakota_not_ends_with?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soServiceType_not?: Maybe<String>;
  soServiceType_in?: Maybe<String[] | String>;
  soServiceType_not_in?: Maybe<String[] | String>;
  soServiceType_lt?: Maybe<String>;
  soServiceType_lte?: Maybe<String>;
  soServiceType_gt?: Maybe<String>;
  soServiceType_gte?: Maybe<String>;
  soServiceType_contains?: Maybe<String>;
  soServiceType_not_contains?: Maybe<String>;
  soServiceType_starts_with?: Maybe<String>;
  soServiceType_not_starts_with?: Maybe<String>;
  soServiceType_ends_with?: Maybe<String>;
  soServiceType_not_ends_with?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soInvoicedPrice_not?: Maybe<Float>;
  soInvoicedPrice_in?: Maybe<Float[] | Float>;
  soInvoicedPrice_not_in?: Maybe<Float[] | Float>;
  soInvoicedPrice_lt?: Maybe<Float>;
  soInvoicedPrice_lte?: Maybe<Float>;
  soInvoicedPrice_gt?: Maybe<Float>;
  soInvoicedPrice_gte?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soServicePackage_not?: Maybe<String>;
  soServicePackage_in?: Maybe<String[] | String>;
  soServicePackage_not_in?: Maybe<String[] | String>;
  soServicePackage_lt?: Maybe<String>;
  soServicePackage_lte?: Maybe<String>;
  soServicePackage_gt?: Maybe<String>;
  soServicePackage_gte?: Maybe<String>;
  soServicePackage_contains?: Maybe<String>;
  soServicePackage_not_contains?: Maybe<String>;
  soServicePackage_starts_with?: Maybe<String>;
  soServicePackage_not_starts_with?: Maybe<String>;
  soServicePackage_ends_with?: Maybe<String>;
  soServicePackage_not_ends_with?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soOrderAmount_not?: Maybe<Int>;
  soOrderAmount_in?: Maybe<Int[] | Int>;
  soOrderAmount_not_in?: Maybe<Int[] | Int>;
  soOrderAmount_lt?: Maybe<Int>;
  soOrderAmount_lte?: Maybe<Int>;
  soOrderAmount_gt?: Maybe<Int>;
  soOrderAmount_gte?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soServiceControlPeriodDate_not?: Maybe<String>;
  soServiceControlPeriodDate_in?: Maybe<String[] | String>;
  soServiceControlPeriodDate_not_in?: Maybe<String[] | String>;
  soServiceControlPeriodDate_lt?: Maybe<String>;
  soServiceControlPeriodDate_lte?: Maybe<String>;
  soServiceControlPeriodDate_gt?: Maybe<String>;
  soServiceControlPeriodDate_gte?: Maybe<String>;
  soServiceControlPeriodDate_contains?: Maybe<String>;
  soServiceControlPeriodDate_not_contains?: Maybe<String>;
  soServiceControlPeriodDate_starts_with?: Maybe<String>;
  soServiceControlPeriodDate_not_starts_with?: Maybe<String>;
  soServiceControlPeriodDate_ends_with?: Maybe<String>;
  soServiceControlPeriodDate_not_ends_with?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soIsRemoteControl_not?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soCountryCode_not?: Maybe<String>;
  soCountryCode_in?: Maybe<String[] | String>;
  soCountryCode_not_in?: Maybe<String[] | String>;
  soCountryCode_lt?: Maybe<String>;
  soCountryCode_lte?: Maybe<String>;
  soCountryCode_gt?: Maybe<String>;
  soCountryCode_gte?: Maybe<String>;
  soCountryCode_contains?: Maybe<String>;
  soCountryCode_not_contains?: Maybe<String>;
  soCountryCode_starts_with?: Maybe<String>;
  soCountryCode_not_starts_with?: Maybe<String>;
  soCountryCode_ends_with?: Maybe<String>;
  soCountryCode_not_ends_with?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemDescription_not?: Maybe<String>;
  soProblemDescription_in?: Maybe<String[] | String>;
  soProblemDescription_not_in?: Maybe<String[] | String>;
  soProblemDescription_lt?: Maybe<String>;
  soProblemDescription_lte?: Maybe<String>;
  soProblemDescription_gt?: Maybe<String>;
  soProblemDescription_gte?: Maybe<String>;
  soProblemDescription_contains?: Maybe<String>;
  soProblemDescription_not_contains?: Maybe<String>;
  soProblemDescription_starts_with?: Maybe<String>;
  soProblemDescription_not_starts_with?: Maybe<String>;
  soProblemDescription_ends_with?: Maybe<String>;
  soProblemDescription_not_ends_with?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemCause_not?: Maybe<String>;
  soProblemCause_in?: Maybe<String[] | String>;
  soProblemCause_not_in?: Maybe<String[] | String>;
  soProblemCause_lt?: Maybe<String>;
  soProblemCause_lte?: Maybe<String>;
  soProblemCause_gt?: Maybe<String>;
  soProblemCause_gte?: Maybe<String>;
  soProblemCause_contains?: Maybe<String>;
  soProblemCause_not_contains?: Maybe<String>;
  soProblemCause_starts_with?: Maybe<String>;
  soProblemCause_not_starts_with?: Maybe<String>;
  soProblemCause_ends_with?: Maybe<String>;
  soProblemCause_not_ends_with?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  soProblemSolution_not?: Maybe<String>;
  soProblemSolution_in?: Maybe<String[] | String>;
  soProblemSolution_not_in?: Maybe<String[] | String>;
  soProblemSolution_lt?: Maybe<String>;
  soProblemSolution_lte?: Maybe<String>;
  soProblemSolution_gt?: Maybe<String>;
  soProblemSolution_gte?: Maybe<String>;
  soProblemSolution_contains?: Maybe<String>;
  soProblemSolution_not_contains?: Maybe<String>;
  soProblemSolution_starts_with?: Maybe<String>;
  soProblemSolution_not_starts_with?: Maybe<String>;
  soProblemSolution_ends_with?: Maybe<String>;
  soProblemSolution_not_ends_with?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  firstDeadline_not?: Maybe<String>;
  firstDeadline_in?: Maybe<String[] | String>;
  firstDeadline_not_in?: Maybe<String[] | String>;
  firstDeadline_lt?: Maybe<String>;
  firstDeadline_lte?: Maybe<String>;
  firstDeadline_gt?: Maybe<String>;
  firstDeadline_gte?: Maybe<String>;
  firstDeadline_contains?: Maybe<String>;
  firstDeadline_not_contains?: Maybe<String>;
  firstDeadline_starts_with?: Maybe<String>;
  firstDeadline_not_starts_with?: Maybe<String>;
  firstDeadline_ends_with?: Maybe<String>;
  firstDeadline_not_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  gdbServiceOrderStartDate_not?: Maybe<String>;
  gdbServiceOrderStartDate_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_lt?: Maybe<String>;
  gdbServiceOrderStartDate_lte?: Maybe<String>;
  gdbServiceOrderStartDate_gt?: Maybe<String>;
  gdbServiceOrderStartDate_gte?: Maybe<String>;
  gdbServiceOrderStartDate_contains?: Maybe<String>;
  gdbServiceOrderStartDate_not_contains?: Maybe<String>;
  gdbServiceOrderStartDate_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_ends_with?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  dateExecuted_not?: Maybe<String>;
  dateExecuted_in?: Maybe<String[] | String>;
  dateExecuted_not_in?: Maybe<String[] | String>;
  dateExecuted_lt?: Maybe<String>;
  dateExecuted_lte?: Maybe<String>;
  dateExecuted_gt?: Maybe<String>;
  dateExecuted_gte?: Maybe<String>;
  dateExecuted_contains?: Maybe<String>;
  dateExecuted_not_contains?: Maybe<String>;
  dateExecuted_starts_with?: Maybe<String>;
  dateExecuted_not_starts_with?: Maybe<String>;
  dateExecuted_ends_with?: Maybe<String>;
  dateExecuted_not_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not?: Maybe<String>;
  gdbServiceOrderInvoicedDate_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_lt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_lte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_ends_with?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  isExportToFSA2_not?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  soExportToFSADate_not?: Maybe<String>;
  soExportToFSADate_in?: Maybe<String[] | String>;
  soExportToFSADate_not_in?: Maybe<String[] | String>;
  soExportToFSADate_lt?: Maybe<String>;
  soExportToFSADate_lte?: Maybe<String>;
  soExportToFSADate_gt?: Maybe<String>;
  soExportToFSADate_gte?: Maybe<String>;
  soExportToFSADate_contains?: Maybe<String>;
  soExportToFSADate_not_contains?: Maybe<String>;
  soExportToFSADate_starts_with?: Maybe<String>;
  soExportToFSADate_not_starts_with?: Maybe<String>;
  soExportToFSADate_ends_with?: Maybe<String>;
  soExportToFSADate_not_ends_with?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  hasSignature_not?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  planAhead_not?: Maybe<String>;
  planAhead_in?: Maybe<String[] | String>;
  planAhead_not_in?: Maybe<String[] | String>;
  planAhead_lt?: Maybe<String>;
  planAhead_lte?: Maybe<String>;
  planAhead_gt?: Maybe<String>;
  planAhead_gte?: Maybe<String>;
  planAhead_contains?: Maybe<String>;
  planAhead_not_contains?: Maybe<String>;
  planAhead_starts_with?: Maybe<String>;
  planAhead_not_starts_with?: Maybe<String>;
  planAhead_ends_with?: Maybe<String>;
  planAhead_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  orderIsSent_not?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  isExportBlocked_not?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  updatedByUserId_not?: Maybe<String>;
  updatedByUserId_in?: Maybe<String[] | String>;
  updatedByUserId_not_in?: Maybe<String[] | String>;
  updatedByUserId_lt?: Maybe<String>;
  updatedByUserId_lte?: Maybe<String>;
  updatedByUserId_gt?: Maybe<String>;
  updatedByUserId_gte?: Maybe<String>;
  updatedByUserId_contains?: Maybe<String>;
  updatedByUserId_not_contains?: Maybe<String>;
  updatedByUserId_starts_with?: Maybe<String>;
  updatedByUserId_not_starts_with?: Maybe<String>;
  updatedByUserId_ends_with?: Maybe<String>;
  updatedByUserId_not_ends_with?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  OR?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
  NOT?: Maybe<WorkOrderScalarWhereInput[] | WorkOrderScalarWhereInput>;
}

export interface WorkOrderUpdateManyWithWhereNestedInput {
  where: WorkOrderScalarWhereInput;
  data: WorkOrderUpdateManyDataInput;
}

export interface WorkOrderUpdateManyDataInput {
  code?: Maybe<String>;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceTextUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ServiceTextCreateWithoutServiceOrderInput[]
    | ServiceTextCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<ServiceTextWhereUniqueInput[] | ServiceTextWhereUniqueInput>;
  connect?: Maybe<ServiceTextWhereUniqueInput[] | ServiceTextWhereUniqueInput>;
  set?: Maybe<ServiceTextWhereUniqueInput[] | ServiceTextWhereUniqueInput>;
  disconnect?: Maybe<
    ServiceTextWhereUniqueInput[] | ServiceTextWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceTextUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | ServiceTextUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | ServiceTextUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | ServiceTextUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<
    ServiceTextScalarWhereInput[] | ServiceTextScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceTextUpdateManyWithWhereNestedInput[]
    | ServiceTextUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceTextUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: ServiceTextWhereUniqueInput;
  data: ServiceTextUpdateWithoutServiceOrderDataInput;
}

export interface ServiceTextUpdateWithoutServiceOrderDataInput {
  code?: Maybe<String>;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface ServiceTextUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: ServiceTextWhereUniqueInput;
  update: ServiceTextUpdateWithoutServiceOrderDataInput;
  create: ServiceTextCreateWithoutServiceOrderInput;
}

export interface ServiceTextScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  tableName?: Maybe<String>;
  tableName_not?: Maybe<String>;
  tableName_in?: Maybe<String[] | String>;
  tableName_not_in?: Maybe<String[] | String>;
  tableName_lt?: Maybe<String>;
  tableName_lte?: Maybe<String>;
  tableName_gt?: Maybe<String>;
  tableName_gte?: Maybe<String>;
  tableName_contains?: Maybe<String>;
  tableName_not_contains?: Maybe<String>;
  tableName_starts_with?: Maybe<String>;
  tableName_not_starts_with?: Maybe<String>;
  tableName_ends_with?: Maybe<String>;
  tableName_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  lineNumber_not?: Maybe<Int>;
  lineNumber_in?: Maybe<Int[] | Int>;
  lineNumber_not_in?: Maybe<Int[] | Int>;
  lineNumber_lt?: Maybe<Int>;
  lineNumber_lte?: Maybe<Int>;
  lineNumber_gt?: Maybe<Int>;
  lineNumber_gte?: Maybe<Int>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceTextScalarWhereInput[] | ServiceTextScalarWhereInput>;
  OR?: Maybe<ServiceTextScalarWhereInput[] | ServiceTextScalarWhereInput>;
  NOT?: Maybe<ServiceTextScalarWhereInput[] | ServiceTextScalarWhereInput>;
}

export interface ServiceTextUpdateManyWithWhereNestedInput {
  where: ServiceTextScalarWhereInput;
  data: ServiceTextUpdateManyDataInput;
}

export interface ServiceTextUpdateManyDataInput {
  code?: Maybe<String>;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface CustomerFeedbackUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | CustomerFeedbackCreateWithoutServiceOrderInput[]
    | CustomerFeedbackCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<
    CustomerFeedbackWhereUniqueInput[] | CustomerFeedbackWhereUniqueInput
  >;
  connect?: Maybe<
    CustomerFeedbackWhereUniqueInput[] | CustomerFeedbackWhereUniqueInput
  >;
  set?: Maybe<
    CustomerFeedbackWhereUniqueInput[] | CustomerFeedbackWhereUniqueInput
  >;
  disconnect?: Maybe<
    CustomerFeedbackWhereUniqueInput[] | CustomerFeedbackWhereUniqueInput
  >;
  update?: Maybe<
    | CustomerFeedbackUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | CustomerFeedbackUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | CustomerFeedbackUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | CustomerFeedbackUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<
    CustomerFeedbackScalarWhereInput[] | CustomerFeedbackScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomerFeedbackUpdateManyWithWhereNestedInput[]
    | CustomerFeedbackUpdateManyWithWhereNestedInput
  >;
}

export interface CustomerFeedbackUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: CustomerFeedbackWhereUniqueInput;
  data: CustomerFeedbackUpdateWithoutServiceOrderDataInput;
}

export interface CustomerFeedbackUpdateWithoutServiceOrderDataInput {
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
}

export interface CustomerFeedbackUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: CustomerFeedbackWhereUniqueInput;
  update: CustomerFeedbackUpdateWithoutServiceOrderDataInput;
  create: CustomerFeedbackCreateWithoutServiceOrderInput;
}

export interface CustomerFeedbackScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  stage?: Maybe<String>;
  stage_not?: Maybe<String>;
  stage_in?: Maybe<String[] | String>;
  stage_not_in?: Maybe<String[] | String>;
  stage_lt?: Maybe<String>;
  stage_lte?: Maybe<String>;
  stage_gt?: Maybe<String>;
  stage_gte?: Maybe<String>;
  stage_contains?: Maybe<String>;
  stage_not_contains?: Maybe<String>;
  stage_starts_with?: Maybe<String>;
  stage_not_starts_with?: Maybe<String>;
  stage_ends_with?: Maybe<String>;
  stage_not_ends_with?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  skipped_not?: Maybe<Boolean>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  serviceOrderId?: Maybe<ID_Input>;
  serviceOrderId_not?: Maybe<ID_Input>;
  serviceOrderId_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_not_in?: Maybe<ID_Input[] | ID_Input>;
  serviceOrderId_lt?: Maybe<ID_Input>;
  serviceOrderId_lte?: Maybe<ID_Input>;
  serviceOrderId_gt?: Maybe<ID_Input>;
  serviceOrderId_gte?: Maybe<ID_Input>;
  serviceOrderId_contains?: Maybe<ID_Input>;
  serviceOrderId_not_contains?: Maybe<ID_Input>;
  serviceOrderId_starts_with?: Maybe<ID_Input>;
  serviceOrderId_not_starts_with?: Maybe<ID_Input>;
  serviceOrderId_ends_with?: Maybe<ID_Input>;
  serviceOrderId_not_ends_with?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
  notificationId_not?: Maybe<ID_Input>;
  notificationId_in?: Maybe<ID_Input[] | ID_Input>;
  notificationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  notificationId_lt?: Maybe<ID_Input>;
  notificationId_lte?: Maybe<ID_Input>;
  notificationId_gt?: Maybe<ID_Input>;
  notificationId_gte?: Maybe<ID_Input>;
  notificationId_contains?: Maybe<ID_Input>;
  notificationId_not_contains?: Maybe<ID_Input>;
  notificationId_starts_with?: Maybe<ID_Input>;
  notificationId_not_starts_with?: Maybe<ID_Input>;
  notificationId_ends_with?: Maybe<ID_Input>;
  notificationId_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    CustomerFeedbackScalarWhereInput[] | CustomerFeedbackScalarWhereInput
  >;
  OR?: Maybe<
    CustomerFeedbackScalarWhereInput[] | CustomerFeedbackScalarWhereInput
  >;
  NOT?: Maybe<
    CustomerFeedbackScalarWhereInput[] | CustomerFeedbackScalarWhereInput
  >;
}

export interface CustomerFeedbackUpdateManyWithWhereNestedInput {
  where: CustomerFeedbackScalarWhereInput;
  data: CustomerFeedbackUpdateManyDataInput;
}

export interface CustomerFeedbackUpdateManyDataInput {
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
}

export interface ActivityLogHistoryUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ActivityLogHistoryCreateWithoutServiceOrderInput[]
    | ActivityLogHistoryCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<
    ActivityLogHistoryWhereUniqueInput[] | ActivityLogHistoryWhereUniqueInput
  >;
  connect?: Maybe<
    ActivityLogHistoryWhereUniqueInput[] | ActivityLogHistoryWhereUniqueInput
  >;
  set?: Maybe<
    ActivityLogHistoryWhereUniqueInput[] | ActivityLogHistoryWhereUniqueInput
  >;
  disconnect?: Maybe<
    ActivityLogHistoryWhereUniqueInput[] | ActivityLogHistoryWhereUniqueInput
  >;
  update?: Maybe<
    | ActivityLogHistoryUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | ActivityLogHistoryUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | ActivityLogHistoryUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | ActivityLogHistoryUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<
    ActivityLogHistoryScalarWhereInput[] | ActivityLogHistoryScalarWhereInput
  >;
  updateMany?: Maybe<
    | ActivityLogHistoryUpdateManyWithWhereNestedInput[]
    | ActivityLogHistoryUpdateManyWithWhereNestedInput
  >;
}

export interface ActivityLogHistoryUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: ActivityLogHistoryWhereUniqueInput;
  data: ActivityLogHistoryUpdateWithoutServiceOrderDataInput;
}

export interface ActivityLogHistoryUpdateWithoutServiceOrderDataInput {
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
}

export interface ActivityLogHistoryUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: ActivityLogHistoryWhereUniqueInput;
  update: ActivityLogHistoryUpdateWithoutServiceOrderDataInput;
  create: ActivityLogHistoryCreateWithoutServiceOrderInput;
}

export interface ActivityLogHistoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  registerDate_not?: Maybe<DateTimeInput>;
  registerDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registerDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registerDate_lt?: Maybe<DateTimeInput>;
  registerDate_lte?: Maybe<DateTimeInput>;
  registerDate_gt?: Maybe<DateTimeInput>;
  registerDate_gte?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ActivityLogHistoryScalarWhereInput[] | ActivityLogHistoryScalarWhereInput
  >;
  OR?: Maybe<
    ActivityLogHistoryScalarWhereInput[] | ActivityLogHistoryScalarWhereInput
  >;
  NOT?: Maybe<
    ActivityLogHistoryScalarWhereInput[] | ActivityLogHistoryScalarWhereInput
  >;
}

export interface ActivityLogHistoryUpdateManyWithWhereNestedInput {
  where: ActivityLogHistoryScalarWhereInput;
  data: ActivityLogHistoryUpdateManyDataInput;
}

export interface ActivityLogHistoryUpdateManyDataInput {
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
}

export interface ReporterUpdateOneInput {
  create?: Maybe<ReporterCreateInput>;
  update?: Maybe<ReporterUpdateDataInput>;
  upsert?: Maybe<ReporterUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReporterWhereUniqueInput>;
}

export interface ReporterUpdateDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  onBehalfOf?: Maybe<String>;
  type?: Maybe<ReporterType>;
  reference?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  workText?: Maybe<String>;
  internalText?: Maybe<String>;
  adviceText?: Maybe<String>;
  description?: Maybe<String>;
  isTrackAndTraceActive?: Maybe<Boolean>;
}

export interface ReporterUpsertNestedInput {
  update: ReporterUpdateDataInput;
  create: ReporterCreateInput;
}

export interface ServiceOrderCommentUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ServiceOrderCommentCreateWithoutServiceOrderInput[]
    | ServiceOrderCommentCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<
    ServiceOrderCommentWhereUniqueInput[] | ServiceOrderCommentWhereUniqueInput
  >;
  connect?: Maybe<
    ServiceOrderCommentWhereUniqueInput[] | ServiceOrderCommentWhereUniqueInput
  >;
  set?: Maybe<
    ServiceOrderCommentWhereUniqueInput[] | ServiceOrderCommentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ServiceOrderCommentWhereUniqueInput[] | ServiceOrderCommentWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceOrderCommentUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | ServiceOrderCommentUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | ServiceOrderCommentUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | ServiceOrderCommentUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<
    ServiceOrderCommentScalarWhereInput[] | ServiceOrderCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceOrderCommentUpdateManyWithWhereNestedInput[]
    | ServiceOrderCommentUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceOrderCommentUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: ServiceOrderCommentWhereUniqueInput;
  data: ServiceOrderCommentUpdateWithoutServiceOrderDataInput;
}

export interface ServiceOrderCommentUpdateWithoutServiceOrderDataInput {
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
}

export interface ServiceOrderCommentUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: ServiceOrderCommentWhereUniqueInput;
  update: ServiceOrderCommentUpdateWithoutServiceOrderDataInput;
  create: ServiceOrderCommentCreateWithoutServiceOrderInput;
}

export interface ServiceOrderCommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  orderCommentType_not?: Maybe<ServiceOrderCommentType>;
  orderCommentType_in?: Maybe<
    ServiceOrderCommentType[] | ServiceOrderCommentType
  >;
  orderCommentType_not_in?: Maybe<
    ServiceOrderCommentType[] | ServiceOrderCommentType
  >;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  authorCode?: Maybe<String>;
  authorCode_not?: Maybe<String>;
  authorCode_in?: Maybe<String[] | String>;
  authorCode_not_in?: Maybe<String[] | String>;
  authorCode_lt?: Maybe<String>;
  authorCode_lte?: Maybe<String>;
  authorCode_gt?: Maybe<String>;
  authorCode_gte?: Maybe<String>;
  authorCode_contains?: Maybe<String>;
  authorCode_not_contains?: Maybe<String>;
  authorCode_starts_with?: Maybe<String>;
  authorCode_not_starts_with?: Maybe<String>;
  authorCode_ends_with?: Maybe<String>;
  authorCode_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ServiceOrderCommentScalarWhereInput[] | ServiceOrderCommentScalarWhereInput
  >;
  OR?: Maybe<
    ServiceOrderCommentScalarWhereInput[] | ServiceOrderCommentScalarWhereInput
  >;
  NOT?: Maybe<
    ServiceOrderCommentScalarWhereInput[] | ServiceOrderCommentScalarWhereInput
  >;
}

export interface ServiceOrderCommentUpdateManyWithWhereNestedInput {
  where: ServiceOrderCommentScalarWhereInput;
  data: ServiceOrderCommentUpdateManyDataInput;
}

export interface ServiceOrderCommentUpdateManyDataInput {
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
}

export interface ServiceAppointmentUpdateOneWithoutServiceOrdersInput {
  create?: Maybe<ServiceAppointmentCreateWithoutServiceOrdersInput>;
  update?: Maybe<ServiceAppointmentUpdateWithoutServiceOrdersDataInput>;
  upsert?: Maybe<ServiceAppointmentUpsertWithoutServiceOrdersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceAppointmentWhereUniqueInput>;
}

export interface ServiceAppointmentUpdateWithoutServiceOrdersDataInput {
  code?: Maybe<String>;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentUpdateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceContract?: Maybe<
    ServiceContractUpdateOneWithoutServiceAppointmentsInput
  >;
}

export interface ServiceAppointmentUpdateroofCodesInput {
  set?: Maybe<String[] | String>;
}

export interface ServiceContractUpdateOneWithoutServiceAppointmentsInput {
  create?: Maybe<ServiceContractCreateWithoutServiceAppointmentsInput>;
  update?: Maybe<ServiceContractUpdateWithoutServiceAppointmentsDataInput>;
  upsert?: Maybe<ServiceContractUpsertWithoutServiceAppointmentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceContractWhereUniqueInput>;
}

export interface ServiceContractUpdateWithoutServiceAppointmentsDataInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractUpdatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceOrders?: Maybe<ServiceOrderUpdateManyInput>;
}

export interface ServiceContractUpdatecontactPersonCodesInput {
  set?: Maybe<String[] | String>;
}

export interface ServiceOrderUpdateManyInput {
  create?: Maybe<ServiceOrderCreateInput[] | ServiceOrderCreateInput>;
  update?: Maybe<
    | ServiceOrderUpdateWithWhereUniqueNestedInput[]
    | ServiceOrderUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ServiceOrderUpsertWithWhereUniqueNestedInput[]
    | ServiceOrderUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput>;
  connect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
  set?: Maybe<ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput>;
  disconnect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ServiceOrderScalarWhereInput[] | ServiceOrderScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceOrderUpdateManyWithWhereNestedInput[]
    | ServiceOrderUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceOrderUpdateWithWhereUniqueNestedInput {
  where: ServiceOrderWhereUniqueInput;
  data: ServiceOrderUpdateDataInput;
}

export interface ServiceOrderUpdateDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ActivityLogUpdateManyWithoutServiceOrderInput {
  create?: Maybe<
    | ActivityLogCreateWithoutServiceOrderInput[]
    | ActivityLogCreateWithoutServiceOrderInput
  >;
  delete?: Maybe<ActivityLogWhereUniqueInput[] | ActivityLogWhereUniqueInput>;
  connect?: Maybe<ActivityLogWhereUniqueInput[] | ActivityLogWhereUniqueInput>;
  set?: Maybe<ActivityLogWhereUniqueInput[] | ActivityLogWhereUniqueInput>;
  disconnect?: Maybe<
    ActivityLogWhereUniqueInput[] | ActivityLogWhereUniqueInput
  >;
  update?: Maybe<
    | ActivityLogUpdateWithWhereUniqueWithoutServiceOrderInput[]
    | ActivityLogUpdateWithWhereUniqueWithoutServiceOrderInput
  >;
  upsert?: Maybe<
    | ActivityLogUpsertWithWhereUniqueWithoutServiceOrderInput[]
    | ActivityLogUpsertWithWhereUniqueWithoutServiceOrderInput
  >;
  deleteMany?: Maybe<
    ActivityLogScalarWhereInput[] | ActivityLogScalarWhereInput
  >;
  updateMany?: Maybe<
    | ActivityLogUpdateManyWithWhereNestedInput[]
    | ActivityLogUpdateManyWithWhereNestedInput
  >;
}

export interface ActivityLogUpdateWithWhereUniqueWithoutServiceOrderInput {
  where: ActivityLogWhereUniqueInput;
  data: ActivityLogUpdateWithoutServiceOrderDataInput;
}

export interface ActivityLogUpdateWithoutServiceOrderDataInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
}

export interface ActivityLogUpsertWithWhereUniqueWithoutServiceOrderInput {
  where: ActivityLogWhereUniqueInput;
  update: ActivityLogUpdateWithoutServiceOrderDataInput;
  create: ActivityLogCreateWithoutServiceOrderInput;
}

export interface ActivityLogScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  apply?: Maybe<String>;
  apply_not?: Maybe<String>;
  apply_in?: Maybe<String[] | String>;
  apply_not_in?: Maybe<String[] | String>;
  apply_lt?: Maybe<String>;
  apply_lte?: Maybe<String>;
  apply_gt?: Maybe<String>;
  apply_gte?: Maybe<String>;
  apply_contains?: Maybe<String>;
  apply_not_contains?: Maybe<String>;
  apply_starts_with?: Maybe<String>;
  apply_not_starts_with?: Maybe<String>;
  apply_ends_with?: Maybe<String>;
  apply_not_ends_with?: Maybe<String>;
  colour?: Maybe<String>;
  colour_not?: Maybe<String>;
  colour_in?: Maybe<String[] | String>;
  colour_not_in?: Maybe<String[] | String>;
  colour_lt?: Maybe<String>;
  colour_lte?: Maybe<String>;
  colour_gt?: Maybe<String>;
  colour_gte?: Maybe<String>;
  colour_contains?: Maybe<String>;
  colour_not_contains?: Maybe<String>;
  colour_starts_with?: Maybe<String>;
  colour_not_starts_with?: Maybe<String>;
  colour_ends_with?: Maybe<String>;
  colour_not_ends_with?: Maybe<String>;
  eventType?: Maybe<String>;
  eventType_not?: Maybe<String>;
  eventType_in?: Maybe<String[] | String>;
  eventType_not_in?: Maybe<String[] | String>;
  eventType_lt?: Maybe<String>;
  eventType_lte?: Maybe<String>;
  eventType_gt?: Maybe<String>;
  eventType_gte?: Maybe<String>;
  eventType_contains?: Maybe<String>;
  eventType_not_contains?: Maybe<String>;
  eventType_starts_with?: Maybe<String>;
  eventType_not_starts_with?: Maybe<String>;
  eventType_ends_with?: Maybe<String>;
  eventType_not_ends_with?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchQuote_not?: Maybe<String>;
  statusPurchQuote_in?: Maybe<String[] | String>;
  statusPurchQuote_not_in?: Maybe<String[] | String>;
  statusPurchQuote_lt?: Maybe<String>;
  statusPurchQuote_lte?: Maybe<String>;
  statusPurchQuote_gt?: Maybe<String>;
  statusPurchQuote_gte?: Maybe<String>;
  statusPurchQuote_contains?: Maybe<String>;
  statusPurchQuote_not_contains?: Maybe<String>;
  statusPurchQuote_starts_with?: Maybe<String>;
  statusPurchQuote_not_starts_with?: Maybe<String>;
  statusPurchQuote_ends_with?: Maybe<String>;
  statusPurchQuote_not_ends_with?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusPurchOrder_not?: Maybe<String>;
  statusPurchOrder_in?: Maybe<String[] | String>;
  statusPurchOrder_not_in?: Maybe<String[] | String>;
  statusPurchOrder_lt?: Maybe<String>;
  statusPurchOrder_lte?: Maybe<String>;
  statusPurchOrder_gt?: Maybe<String>;
  statusPurchOrder_gte?: Maybe<String>;
  statusPurchOrder_contains?: Maybe<String>;
  statusPurchOrder_not_contains?: Maybe<String>;
  statusPurchOrder_starts_with?: Maybe<String>;
  statusPurchOrder_not_starts_with?: Maybe<String>;
  statusPurchOrder_ends_with?: Maybe<String>;
  statusPurchOrder_not_ends_with?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceCall_not?: Maybe<String>;
  statusServiceCall_in?: Maybe<String[] | String>;
  statusServiceCall_not_in?: Maybe<String[] | String>;
  statusServiceCall_lt?: Maybe<String>;
  statusServiceCall_lte?: Maybe<String>;
  statusServiceCall_gt?: Maybe<String>;
  statusServiceCall_gte?: Maybe<String>;
  statusServiceCall_contains?: Maybe<String>;
  statusServiceCall_not_contains?: Maybe<String>;
  statusServiceCall_starts_with?: Maybe<String>;
  statusServiceCall_not_starts_with?: Maybe<String>;
  statusServiceCall_ends_with?: Maybe<String>;
  statusServiceCall_not_ends_with?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  statusServiceOrder_not?: Maybe<String>;
  statusServiceOrder_in?: Maybe<String[] | String>;
  statusServiceOrder_not_in?: Maybe<String[] | String>;
  statusServiceOrder_lt?: Maybe<String>;
  statusServiceOrder_lte?: Maybe<String>;
  statusServiceOrder_gt?: Maybe<String>;
  statusServiceOrder_gte?: Maybe<String>;
  statusServiceOrder_contains?: Maybe<String>;
  statusServiceOrder_not_contains?: Maybe<String>;
  statusServiceOrder_starts_with?: Maybe<String>;
  statusServiceOrder_not_starts_with?: Maybe<String>;
  statusServiceOrder_ends_with?: Maybe<String>;
  statusServiceOrder_not_ends_with?: Maybe<String>;
  fieldService?: Maybe<String>;
  fieldService_not?: Maybe<String>;
  fieldService_in?: Maybe<String[] | String>;
  fieldService_not_in?: Maybe<String[] | String>;
  fieldService_lt?: Maybe<String>;
  fieldService_lte?: Maybe<String>;
  fieldService_gt?: Maybe<String>;
  fieldService_gte?: Maybe<String>;
  fieldService_contains?: Maybe<String>;
  fieldService_not_contains?: Maybe<String>;
  fieldService_starts_with?: Maybe<String>;
  fieldService_not_starts_with?: Maybe<String>;
  fieldService_ends_with?: Maybe<String>;
  fieldService_not_ends_with?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  blockModifyServiceOrder_not?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  skipExportToFSA_not?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendStatusUpdateMail_not?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  sendMailWorkSheet_not?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  publishOnServicePOrtal_not?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  sendMainToSubcontractor_not?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOStartTime_not?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  updateWOEndTime_not?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
  naForActualReferencePoint_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityLogScalarWhereInput[] | ActivityLogScalarWhereInput>;
  OR?: Maybe<ActivityLogScalarWhereInput[] | ActivityLogScalarWhereInput>;
  NOT?: Maybe<ActivityLogScalarWhereInput[] | ActivityLogScalarWhereInput>;
}

export interface ActivityLogUpdateManyWithWhereNestedInput {
  where: ActivityLogScalarWhereInput;
  data: ActivityLogUpdateManyDataInput;
}

export interface ActivityLogUpdateManyDataInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithWhereUniqueNestedInput {
  where: ServiceOrderWhereUniqueInput;
  update: ServiceOrderUpdateDataInput;
  create: ServiceOrderCreateInput;
}

export interface ServiceOrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  globalId?: Maybe<String>;
  globalId_not?: Maybe<String>;
  globalId_in?: Maybe<String[] | String>;
  globalId_not_in?: Maybe<String[] | String>;
  globalId_lt?: Maybe<String>;
  globalId_lte?: Maybe<String>;
  globalId_gt?: Maybe<String>;
  globalId_gte?: Maybe<String>;
  globalId_contains?: Maybe<String>;
  globalId_not_contains?: Maybe<String>;
  globalId_starts_with?: Maybe<String>;
  globalId_not_starts_with?: Maybe<String>;
  globalId_ends_with?: Maybe<String>;
  globalId_not_ends_with?: Maybe<String>;
  conceptId?: Maybe<String>;
  conceptId_not?: Maybe<String>;
  conceptId_in?: Maybe<String[] | String>;
  conceptId_not_in?: Maybe<String[] | String>;
  conceptId_lt?: Maybe<String>;
  conceptId_lte?: Maybe<String>;
  conceptId_gt?: Maybe<String>;
  conceptId_gte?: Maybe<String>;
  conceptId_contains?: Maybe<String>;
  conceptId_not_contains?: Maybe<String>;
  conceptId_starts_with?: Maybe<String>;
  conceptId_not_starts_with?: Maybe<String>;
  conceptId_ends_with?: Maybe<String>;
  conceptId_not_ends_with?: Maybe<String>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  callerCode?: Maybe<String>;
  callerCode_not?: Maybe<String>;
  callerCode_in?: Maybe<String[] | String>;
  callerCode_not_in?: Maybe<String[] | String>;
  callerCode_lt?: Maybe<String>;
  callerCode_lte?: Maybe<String>;
  callerCode_gt?: Maybe<String>;
  callerCode_gte?: Maybe<String>;
  callerCode_contains?: Maybe<String>;
  callerCode_not_contains?: Maybe<String>;
  callerCode_starts_with?: Maybe<String>;
  callerCode_not_starts_with?: Maybe<String>;
  callerCode_ends_with?: Maybe<String>;
  callerCode_not_ends_with?: Maybe<String>;
  orderType?: Maybe<String>;
  orderType_not?: Maybe<String>;
  orderType_in?: Maybe<String[] | String>;
  orderType_not_in?: Maybe<String[] | String>;
  orderType_lt?: Maybe<String>;
  orderType_lte?: Maybe<String>;
  orderType_gt?: Maybe<String>;
  orderType_gte?: Maybe<String>;
  orderType_contains?: Maybe<String>;
  orderType_not_contains?: Maybe<String>;
  orderType_starts_with?: Maybe<String>;
  orderType_not_starts_with?: Maybe<String>;
  orderType_ends_with?: Maybe<String>;
  orderType_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  ownerCode?: Maybe<String>;
  ownerCode_not?: Maybe<String>;
  ownerCode_in?: Maybe<String[] | String>;
  ownerCode_not_in?: Maybe<String[] | String>;
  ownerCode_lt?: Maybe<String>;
  ownerCode_lte?: Maybe<String>;
  ownerCode_gt?: Maybe<String>;
  ownerCode_gte?: Maybe<String>;
  ownerCode_contains?: Maybe<String>;
  ownerCode_not_contains?: Maybe<String>;
  ownerCode_starts_with?: Maybe<String>;
  ownerCode_not_starts_with?: Maybe<String>;
  ownerCode_ends_with?: Maybe<String>;
  ownerCode_not_ends_with?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerCode_not?: Maybe<String>;
  customerCode_in?: Maybe<String[] | String>;
  customerCode_not_in?: Maybe<String[] | String>;
  customerCode_lt?: Maybe<String>;
  customerCode_lte?: Maybe<String>;
  customerCode_gt?: Maybe<String>;
  customerCode_gte?: Maybe<String>;
  customerCode_contains?: Maybe<String>;
  customerCode_not_contains?: Maybe<String>;
  customerCode_starts_with?: Maybe<String>;
  customerCode_not_starts_with?: Maybe<String>;
  customerCode_ends_with?: Maybe<String>;
  customerCode_not_ends_with?: Maybe<String>;
  customerName?: Maybe<String>;
  customerName_not?: Maybe<String>;
  customerName_in?: Maybe<String[] | String>;
  customerName_not_in?: Maybe<String[] | String>;
  customerName_lt?: Maybe<String>;
  customerName_lte?: Maybe<String>;
  customerName_gt?: Maybe<String>;
  customerName_gte?: Maybe<String>;
  customerName_contains?: Maybe<String>;
  customerName_not_contains?: Maybe<String>;
  customerName_starts_with?: Maybe<String>;
  customerName_not_starts_with?: Maybe<String>;
  customerName_ends_with?: Maybe<String>;
  customerName_not_ends_with?: Maybe<String>;
  billingCode?: Maybe<String>;
  billingCode_not?: Maybe<String>;
  billingCode_in?: Maybe<String[] | String>;
  billingCode_not_in?: Maybe<String[] | String>;
  billingCode_lt?: Maybe<String>;
  billingCode_lte?: Maybe<String>;
  billingCode_gt?: Maybe<String>;
  billingCode_gte?: Maybe<String>;
  billingCode_contains?: Maybe<String>;
  billingCode_not_contains?: Maybe<String>;
  billingCode_starts_with?: Maybe<String>;
  billingCode_not_starts_with?: Maybe<String>;
  billingCode_ends_with?: Maybe<String>;
  billingCode_not_ends_with?: Maybe<String>;
  customerFeature?: Maybe<String>;
  customerFeature_not?: Maybe<String>;
  customerFeature_in?: Maybe<String[] | String>;
  customerFeature_not_in?: Maybe<String[] | String>;
  customerFeature_lt?: Maybe<String>;
  customerFeature_lte?: Maybe<String>;
  customerFeature_gt?: Maybe<String>;
  customerFeature_gte?: Maybe<String>;
  customerFeature_contains?: Maybe<String>;
  customerFeature_not_contains?: Maybe<String>;
  customerFeature_starts_with?: Maybe<String>;
  customerFeature_not_starts_with?: Maybe<String>;
  customerFeature_ends_with?: Maybe<String>;
  customerFeature_not_ends_with?: Maybe<String>;
  reference?: Maybe<String>;
  reference_not?: Maybe<String>;
  reference_in?: Maybe<String[] | String>;
  reference_not_in?: Maybe<String[] | String>;
  reference_lt?: Maybe<String>;
  reference_lte?: Maybe<String>;
  reference_gt?: Maybe<String>;
  reference_gte?: Maybe<String>;
  reference_contains?: Maybe<String>;
  reference_not_contains?: Maybe<String>;
  reference_starts_with?: Maybe<String>;
  reference_not_starts_with?: Maybe<String>;
  reference_ends_with?: Maybe<String>;
  reference_not_ends_with?: Maybe<String>;
  commissionDate?: Maybe<String>;
  commissionDate_not?: Maybe<String>;
  commissionDate_in?: Maybe<String[] | String>;
  commissionDate_not_in?: Maybe<String[] | String>;
  commissionDate_lt?: Maybe<String>;
  commissionDate_lte?: Maybe<String>;
  commissionDate_gt?: Maybe<String>;
  commissionDate_gte?: Maybe<String>;
  commissionDate_contains?: Maybe<String>;
  commissionDate_not_contains?: Maybe<String>;
  commissionDate_starts_with?: Maybe<String>;
  commissionDate_not_starts_with?: Maybe<String>;
  commissionDate_ends_with?: Maybe<String>;
  commissionDate_not_ends_with?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  serviceLocationCode_not?: Maybe<String>;
  serviceLocationCode_in?: Maybe<String[] | String>;
  serviceLocationCode_not_in?: Maybe<String[] | String>;
  serviceLocationCode_lt?: Maybe<String>;
  serviceLocationCode_lte?: Maybe<String>;
  serviceLocationCode_gt?: Maybe<String>;
  serviceLocationCode_gte?: Maybe<String>;
  serviceLocationCode_contains?: Maybe<String>;
  serviceLocationCode_not_contains?: Maybe<String>;
  serviceLocationCode_starts_with?: Maybe<String>;
  serviceLocationCode_not_starts_with?: Maybe<String>;
  serviceLocationCode_ends_with?: Maybe<String>;
  serviceLocationCode_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceType_not?: Maybe<String>;
  sourceType_in?: Maybe<String[] | String>;
  sourceType_not_in?: Maybe<String[] | String>;
  sourceType_lt?: Maybe<String>;
  sourceType_lte?: Maybe<String>;
  sourceType_gt?: Maybe<String>;
  sourceType_gte?: Maybe<String>;
  sourceType_contains?: Maybe<String>;
  sourceType_not_contains?: Maybe<String>;
  sourceType_starts_with?: Maybe<String>;
  sourceType_not_starts_with?: Maybe<String>;
  sourceType_ends_with?: Maybe<String>;
  sourceType_not_ends_with?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  globalDimensionCode_not?: Maybe<String>;
  globalDimensionCode_in?: Maybe<String[] | String>;
  globalDimensionCode_not_in?: Maybe<String[] | String>;
  globalDimensionCode_lt?: Maybe<String>;
  globalDimensionCode_lte?: Maybe<String>;
  globalDimensionCode_gt?: Maybe<String>;
  globalDimensionCode_gte?: Maybe<String>;
  globalDimensionCode_contains?: Maybe<String>;
  globalDimensionCode_not_contains?: Maybe<String>;
  globalDimensionCode_starts_with?: Maybe<String>;
  globalDimensionCode_not_starts_with?: Maybe<String>;
  globalDimensionCode_ends_with?: Maybe<String>;
  globalDimensionCode_not_ends_with?: Maybe<String>;
  territoryCode?: Maybe<String>;
  territoryCode_not?: Maybe<String>;
  territoryCode_in?: Maybe<String[] | String>;
  territoryCode_not_in?: Maybe<String[] | String>;
  territoryCode_lt?: Maybe<String>;
  territoryCode_lte?: Maybe<String>;
  territoryCode_gt?: Maybe<String>;
  territoryCode_gte?: Maybe<String>;
  territoryCode_contains?: Maybe<String>;
  territoryCode_not_contains?: Maybe<String>;
  territoryCode_starts_with?: Maybe<String>;
  territoryCode_not_starts_with?: Maybe<String>;
  territoryCode_ends_with?: Maybe<String>;
  territoryCode_not_ends_with?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderDate_not?: Maybe<String>;
  orderDate_in?: Maybe<String[] | String>;
  orderDate_not_in?: Maybe<String[] | String>;
  orderDate_lt?: Maybe<String>;
  orderDate_lte?: Maybe<String>;
  orderDate_gt?: Maybe<String>;
  orderDate_gte?: Maybe<String>;
  orderDate_contains?: Maybe<String>;
  orderDate_not_contains?: Maybe<String>;
  orderDate_starts_with?: Maybe<String>;
  orderDate_not_starts_with?: Maybe<String>;
  orderDate_ends_with?: Maybe<String>;
  orderDate_not_ends_with?: Maybe<String>;
  orderTime?: Maybe<String>;
  orderTime_not?: Maybe<String>;
  orderTime_in?: Maybe<String[] | String>;
  orderTime_not_in?: Maybe<String[] | String>;
  orderTime_lt?: Maybe<String>;
  orderTime_lte?: Maybe<String>;
  orderTime_gt?: Maybe<String>;
  orderTime_gte?: Maybe<String>;
  orderTime_contains?: Maybe<String>;
  orderTime_not_contains?: Maybe<String>;
  orderTime_starts_with?: Maybe<String>;
  orderTime_not_starts_with?: Maybe<String>;
  orderTime_ends_with?: Maybe<String>;
  orderTime_not_ends_with?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  budgetHours_not?: Maybe<Float>;
  budgetHours_in?: Maybe<Float[] | Float>;
  budgetHours_not_in?: Maybe<Float[] | Float>;
  budgetHours_lt?: Maybe<Float>;
  budgetHours_lte?: Maybe<Float>;
  budgetHours_gt?: Maybe<Float>;
  budgetHours_gte?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  expectedHours_not?: Maybe<Float>;
  expectedHours_in?: Maybe<Float[] | Float>;
  expectedHours_not_in?: Maybe<Float[] | Float>;
  expectedHours_lt?: Maybe<Float>;
  expectedHours_lte?: Maybe<Float>;
  expectedHours_gt?: Maybe<Float>;
  expectedHours_gte?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  durationTime_not?: Maybe<Float>;
  durationTime_in?: Maybe<Float[] | Float>;
  durationTime_not_in?: Maybe<Float[] | Float>;
  durationTime_lt?: Maybe<Float>;
  durationTime_lte?: Maybe<Float>;
  durationTime_gt?: Maybe<Float>;
  durationTime_gte?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  isFirmPlanned_not?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  priority_not?: Maybe<PriorityType>;
  priority_in?: Maybe<PriorityType[] | PriorityType>;
  priority_not_in?: Maybe<PriorityType[] | PriorityType>;
  nextDeadline?: Maybe<String>;
  nextDeadline_not?: Maybe<String>;
  nextDeadline_in?: Maybe<String[] | String>;
  nextDeadline_not_in?: Maybe<String[] | String>;
  nextDeadline_lt?: Maybe<String>;
  nextDeadline_lte?: Maybe<String>;
  nextDeadline_gt?: Maybe<String>;
  nextDeadline_gte?: Maybe<String>;
  nextDeadline_contains?: Maybe<String>;
  nextDeadline_not_contains?: Maybe<String>;
  nextDeadline_starts_with?: Maybe<String>;
  nextDeadline_not_starts_with?: Maybe<String>;
  nextDeadline_ends_with?: Maybe<String>;
  nextDeadline_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePoint_not?: Maybe<String>;
  actualReferencePoint_in?: Maybe<String[] | String>;
  actualReferencePoint_not_in?: Maybe<String[] | String>;
  actualReferencePoint_lt?: Maybe<String>;
  actualReferencePoint_lte?: Maybe<String>;
  actualReferencePoint_gt?: Maybe<String>;
  actualReferencePoint_gte?: Maybe<String>;
  actualReferencePoint_contains?: Maybe<String>;
  actualReferencePoint_not_contains?: Maybe<String>;
  actualReferencePoint_starts_with?: Maybe<String>;
  actualReferencePoint_not_starts_with?: Maybe<String>;
  actualReferencePoint_ends_with?: Maybe<String>;
  actualReferencePoint_not_ends_with?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  actualReferencePointDescription_not?: Maybe<String>;
  actualReferencePointDescription_in?: Maybe<String[] | String>;
  actualReferencePointDescription_not_in?: Maybe<String[] | String>;
  actualReferencePointDescription_lt?: Maybe<String>;
  actualReferencePointDescription_lte?: Maybe<String>;
  actualReferencePointDescription_gt?: Maybe<String>;
  actualReferencePointDescription_gte?: Maybe<String>;
  actualReferencePointDescription_contains?: Maybe<String>;
  actualReferencePointDescription_not_contains?: Maybe<String>;
  actualReferencePointDescription_starts_with?: Maybe<String>;
  actualReferencePointDescription_not_starts_with?: Maybe<String>;
  actualReferencePointDescription_ends_with?: Maybe<String>;
  actualReferencePointDescription_not_ends_with?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  employeeName?: Maybe<String>;
  employeeName_not?: Maybe<String>;
  employeeName_in?: Maybe<String[] | String>;
  employeeName_not_in?: Maybe<String[] | String>;
  employeeName_lt?: Maybe<String>;
  employeeName_lte?: Maybe<String>;
  employeeName_gt?: Maybe<String>;
  employeeName_gte?: Maybe<String>;
  employeeName_contains?: Maybe<String>;
  employeeName_not_contains?: Maybe<String>;
  employeeName_starts_with?: Maybe<String>;
  employeeName_not_starts_with?: Maybe<String>;
  employeeName_ends_with?: Maybe<String>;
  employeeName_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  detectorType?: Maybe<String>;
  detectorType_not?: Maybe<String>;
  detectorType_in?: Maybe<String[] | String>;
  detectorType_not_in?: Maybe<String[] | String>;
  detectorType_lt?: Maybe<String>;
  detectorType_lte?: Maybe<String>;
  detectorType_gt?: Maybe<String>;
  detectorType_gte?: Maybe<String>;
  detectorType_contains?: Maybe<String>;
  detectorType_not_contains?: Maybe<String>;
  detectorType_starts_with?: Maybe<String>;
  detectorType_not_starts_with?: Maybe<String>;
  detectorType_ends_with?: Maybe<String>;
  detectorType_not_ends_with?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  notInDakota_not?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace_not?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  gdbServiceOrderKTO_not?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  ktoFiture_not?: Maybe<Float>;
  ktoFiture_in?: Maybe<Float[] | Float>;
  ktoFiture_not_in?: Maybe<Float[] | Float>;
  ktoFiture_lt?: Maybe<Float>;
  ktoFiture_lte?: Maybe<Float>;
  ktoFiture_gt?: Maybe<Float>;
  ktoFiture_gte?: Maybe<Float>;
  serviceType?: Maybe<String>;
  serviceType_not?: Maybe<String>;
  serviceType_in?: Maybe<String[] | String>;
  serviceType_not_in?: Maybe<String[] | String>;
  serviceType_lt?: Maybe<String>;
  serviceType_lte?: Maybe<String>;
  serviceType_gt?: Maybe<String>;
  serviceType_gte?: Maybe<String>;
  serviceType_contains?: Maybe<String>;
  serviceType_not_contains?: Maybe<String>;
  serviceType_starts_with?: Maybe<String>;
  serviceType_not_starts_with?: Maybe<String>;
  serviceType_ends_with?: Maybe<String>;
  serviceType_not_ends_with?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  invoicedPrice_not?: Maybe<Float>;
  invoicedPrice_in?: Maybe<Float[] | Float>;
  invoicedPrice_not_in?: Maybe<Float[] | Float>;
  invoicedPrice_lt?: Maybe<Float>;
  invoicedPrice_lte?: Maybe<Float>;
  invoicedPrice_gt?: Maybe<Float>;
  invoicedPrice_gte?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  orderAmount_not?: Maybe<Float>;
  orderAmount_in?: Maybe<Float[] | Float>;
  orderAmount_not_in?: Maybe<Float[] | Float>;
  orderAmount_lt?: Maybe<Float>;
  orderAmount_lte?: Maybe<Float>;
  orderAmount_gt?: Maybe<Float>;
  orderAmount_gte?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  serviceControlPeriodDate_not?: Maybe<String>;
  serviceControlPeriodDate_in?: Maybe<String[] | String>;
  serviceControlPeriodDate_not_in?: Maybe<String[] | String>;
  serviceControlPeriodDate_lt?: Maybe<String>;
  serviceControlPeriodDate_lte?: Maybe<String>;
  serviceControlPeriodDate_gt?: Maybe<String>;
  serviceControlPeriodDate_gte?: Maybe<String>;
  serviceControlPeriodDate_contains?: Maybe<String>;
  serviceControlPeriodDate_not_contains?: Maybe<String>;
  serviceControlPeriodDate_starts_with?: Maybe<String>;
  serviceControlPeriodDate_not_starts_with?: Maybe<String>;
  serviceControlPeriodDate_ends_with?: Maybe<String>;
  serviceControlPeriodDate_not_ends_with?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  isRemoteControl_not?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  firstDeadline_not?: Maybe<String>;
  firstDeadline_in?: Maybe<String[] | String>;
  firstDeadline_not_in?: Maybe<String[] | String>;
  firstDeadline_lt?: Maybe<String>;
  firstDeadline_lte?: Maybe<String>;
  firstDeadline_gt?: Maybe<String>;
  firstDeadline_gte?: Maybe<String>;
  firstDeadline_contains?: Maybe<String>;
  firstDeadline_not_contains?: Maybe<String>;
  firstDeadline_starts_with?: Maybe<String>;
  firstDeadline_not_starts_with?: Maybe<String>;
  firstDeadline_ends_with?: Maybe<String>;
  firstDeadline_not_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  gdbServiceOrderStartDate_not?: Maybe<String>;
  gdbServiceOrderStartDate_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderStartDate_lt?: Maybe<String>;
  gdbServiceOrderStartDate_lte?: Maybe<String>;
  gdbServiceOrderStartDate_gt?: Maybe<String>;
  gdbServiceOrderStartDate_gte?: Maybe<String>;
  gdbServiceOrderStartDate_contains?: Maybe<String>;
  gdbServiceOrderStartDate_not_contains?: Maybe<String>;
  gdbServiceOrderStartDate_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderStartDate_ends_with?: Maybe<String>;
  gdbServiceOrderStartDate_not_ends_with?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  dateExecuted_not?: Maybe<String>;
  dateExecuted_in?: Maybe<String[] | String>;
  dateExecuted_not_in?: Maybe<String[] | String>;
  dateExecuted_lt?: Maybe<String>;
  dateExecuted_lte?: Maybe<String>;
  dateExecuted_gt?: Maybe<String>;
  dateExecuted_gte?: Maybe<String>;
  dateExecuted_contains?: Maybe<String>;
  dateExecuted_not_contains?: Maybe<String>;
  dateExecuted_starts_with?: Maybe<String>;
  dateExecuted_not_starts_with?: Maybe<String>;
  dateExecuted_ends_with?: Maybe<String>;
  dateExecuted_not_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not?: Maybe<String>;
  gdbServiceOrderInvoicedDate_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_not_in?: Maybe<String[] | String>;
  gdbServiceOrderInvoicedDate_lt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_lte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gt?: Maybe<String>;
  gdbServiceOrderInvoicedDate_gte?: Maybe<String>;
  gdbServiceOrderInvoicedDate_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_contains?: Maybe<String>;
  gdbServiceOrderInvoicedDate_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_starts_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_ends_with?: Maybe<String>;
  gdbServiceOrderInvoicedDate_not_ends_with?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  isExportToFSA2_not?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  exportToFSADate_not?: Maybe<String>;
  exportToFSADate_in?: Maybe<String[] | String>;
  exportToFSADate_not_in?: Maybe<String[] | String>;
  exportToFSADate_lt?: Maybe<String>;
  exportToFSADate_lte?: Maybe<String>;
  exportToFSADate_gt?: Maybe<String>;
  exportToFSADate_gte?: Maybe<String>;
  exportToFSADate_contains?: Maybe<String>;
  exportToFSADate_not_contains?: Maybe<String>;
  exportToFSADate_starts_with?: Maybe<String>;
  exportToFSADate_not_starts_with?: Maybe<String>;
  exportToFSADate_ends_with?: Maybe<String>;
  exportToFSADate_not_ends_with?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  isSignatureHasValue_not?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  signedBy_not?: Maybe<String>;
  signedBy_in?: Maybe<String[] | String>;
  signedBy_not_in?: Maybe<String[] | String>;
  signedBy_lt?: Maybe<String>;
  signedBy_lte?: Maybe<String>;
  signedBy_gt?: Maybe<String>;
  signedBy_gte?: Maybe<String>;
  signedBy_contains?: Maybe<String>;
  signedBy_not_contains?: Maybe<String>;
  signedBy_starts_with?: Maybe<String>;
  signedBy_not_starts_with?: Maybe<String>;
  signedBy_ends_with?: Maybe<String>;
  signedBy_not_ends_with?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isSendReport_not?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  isFinishedFieldService_not?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  cratedBy_not?: Maybe<String>;
  cratedBy_in?: Maybe<String[] | String>;
  cratedBy_not_in?: Maybe<String[] | String>;
  cratedBy_lt?: Maybe<String>;
  cratedBy_lte?: Maybe<String>;
  cratedBy_gt?: Maybe<String>;
  cratedBy_gte?: Maybe<String>;
  cratedBy_contains?: Maybe<String>;
  cratedBy_not_contains?: Maybe<String>;
  cratedBy_starts_with?: Maybe<String>;
  cratedBy_not_starts_with?: Maybe<String>;
  cratedBy_ends_with?: Maybe<String>;
  cratedBy_not_ends_with?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  creationDate_not?: Maybe<DateTimeInput>;
  creationDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  creationDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  creationDate_lt?: Maybe<DateTimeInput>;
  creationDate_lte?: Maybe<DateTimeInput>;
  creationDate_gt?: Maybe<DateTimeInput>;
  creationDate_gte?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updateDate_not?: Maybe<String>;
  updateDate_in?: Maybe<String[] | String>;
  updateDate_not_in?: Maybe<String[] | String>;
  updateDate_lt?: Maybe<String>;
  updateDate_lte?: Maybe<String>;
  updateDate_gt?: Maybe<String>;
  updateDate_gte?: Maybe<String>;
  updateDate_contains?: Maybe<String>;
  updateDate_not_contains?: Maybe<String>;
  updateDate_starts_with?: Maybe<String>;
  updateDate_not_starts_with?: Maybe<String>;
  updateDate_ends_with?: Maybe<String>;
  updateDate_not_ends_with?: Maybe<String>;
  updatedBy?: Maybe<String>;
  updatedBy_not?: Maybe<String>;
  updatedBy_in?: Maybe<String[] | String>;
  updatedBy_not_in?: Maybe<String[] | String>;
  updatedBy_lt?: Maybe<String>;
  updatedBy_lte?: Maybe<String>;
  updatedBy_gt?: Maybe<String>;
  updatedBy_gte?: Maybe<String>;
  updatedBy_contains?: Maybe<String>;
  updatedBy_not_contains?: Maybe<String>;
  updatedBy_starts_with?: Maybe<String>;
  updatedBy_not_starts_with?: Maybe<String>;
  updatedBy_ends_with?: Maybe<String>;
  updatedBy_not_ends_with?: Maybe<String>;
  customerRemark?: Maybe<String>;
  customerRemark_not?: Maybe<String>;
  customerRemark_in?: Maybe<String[] | String>;
  customerRemark_not_in?: Maybe<String[] | String>;
  customerRemark_lt?: Maybe<String>;
  customerRemark_lte?: Maybe<String>;
  customerRemark_gt?: Maybe<String>;
  customerRemark_gte?: Maybe<String>;
  customerRemark_contains?: Maybe<String>;
  customerRemark_not_contains?: Maybe<String>;
  customerRemark_starts_with?: Maybe<String>;
  customerRemark_not_starts_with?: Maybe<String>;
  customerRemark_ends_with?: Maybe<String>;
  customerRemark_not_ends_with?: Maybe<String>;
  internalRemark?: Maybe<String>;
  internalRemark_not?: Maybe<String>;
  internalRemark_in?: Maybe<String[] | String>;
  internalRemark_not_in?: Maybe<String[] | String>;
  internalRemark_lt?: Maybe<String>;
  internalRemark_lte?: Maybe<String>;
  internalRemark_gt?: Maybe<String>;
  internalRemark_gte?: Maybe<String>;
  internalRemark_contains?: Maybe<String>;
  internalRemark_not_contains?: Maybe<String>;
  internalRemark_starts_with?: Maybe<String>;
  internalRemark_not_starts_with?: Maybe<String>;
  internalRemark_ends_with?: Maybe<String>;
  internalRemark_not_ends_with?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  correctiveMaintenanceRemark_not?: Maybe<String>;
  correctiveMaintenanceRemark_in?: Maybe<String[] | String>;
  correctiveMaintenanceRemark_not_in?: Maybe<String[] | String>;
  correctiveMaintenanceRemark_lt?: Maybe<String>;
  correctiveMaintenanceRemark_lte?: Maybe<String>;
  correctiveMaintenanceRemark_gt?: Maybe<String>;
  correctiveMaintenanceRemark_gte?: Maybe<String>;
  correctiveMaintenanceRemark_contains?: Maybe<String>;
  correctiveMaintenanceRemark_not_contains?: Maybe<String>;
  correctiveMaintenanceRemark_starts_with?: Maybe<String>;
  correctiveMaintenanceRemark_not_starts_with?: Maybe<String>;
  correctiveMaintenanceRemark_ends_with?: Maybe<String>;
  correctiveMaintenanceRemark_not_ends_with?: Maybe<String>;
  agreementDate?: Maybe<String>;
  agreementDate_not?: Maybe<String>;
  agreementDate_in?: Maybe<String[] | String>;
  agreementDate_not_in?: Maybe<String[] | String>;
  agreementDate_lt?: Maybe<String>;
  agreementDate_lte?: Maybe<String>;
  agreementDate_gt?: Maybe<String>;
  agreementDate_gte?: Maybe<String>;
  agreementDate_contains?: Maybe<String>;
  agreementDate_not_contains?: Maybe<String>;
  agreementDate_starts_with?: Maybe<String>;
  agreementDate_not_starts_with?: Maybe<String>;
  agreementDate_ends_with?: Maybe<String>;
  agreementDate_not_ends_with?: Maybe<String>;
  signature?: Maybe<String>;
  signature_not?: Maybe<String>;
  signature_in?: Maybe<String[] | String>;
  signature_not_in?: Maybe<String[] | String>;
  signature_lt?: Maybe<String>;
  signature_lte?: Maybe<String>;
  signature_gt?: Maybe<String>;
  signature_gte?: Maybe<String>;
  signature_contains?: Maybe<String>;
  signature_not_contains?: Maybe<String>;
  signature_starts_with?: Maybe<String>;
  signature_not_starts_with?: Maybe<String>;
  signature_ends_with?: Maybe<String>;
  signature_not_ends_with?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCode_not?: Maybe<String>;
  contactPersonCode_in?: Maybe<String[] | String>;
  contactPersonCode_not_in?: Maybe<String[] | String>;
  contactPersonCode_lt?: Maybe<String>;
  contactPersonCode_lte?: Maybe<String>;
  contactPersonCode_gt?: Maybe<String>;
  contactPersonCode_gte?: Maybe<String>;
  contactPersonCode_contains?: Maybe<String>;
  contactPersonCode_not_contains?: Maybe<String>;
  contactPersonCode_starts_with?: Maybe<String>;
  contactPersonCode_not_starts_with?: Maybe<String>;
  contactPersonCode_ends_with?: Maybe<String>;
  contactPersonCode_not_ends_with?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  contactPersonGender_not?: Maybe<String>;
  contactPersonGender_in?: Maybe<String[] | String>;
  contactPersonGender_not_in?: Maybe<String[] | String>;
  contactPersonGender_lt?: Maybe<String>;
  contactPersonGender_lte?: Maybe<String>;
  contactPersonGender_gt?: Maybe<String>;
  contactPersonGender_gte?: Maybe<String>;
  contactPersonGender_contains?: Maybe<String>;
  contactPersonGender_not_contains?: Maybe<String>;
  contactPersonGender_starts_with?: Maybe<String>;
  contactPersonGender_not_starts_with?: Maybe<String>;
  contactPersonGender_ends_with?: Maybe<String>;
  contactPersonGender_not_ends_with?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  orderCodeCustomer_not?: Maybe<String>;
  orderCodeCustomer_in?: Maybe<String[] | String>;
  orderCodeCustomer_not_in?: Maybe<String[] | String>;
  orderCodeCustomer_lt?: Maybe<String>;
  orderCodeCustomer_lte?: Maybe<String>;
  orderCodeCustomer_gt?: Maybe<String>;
  orderCodeCustomer_gte?: Maybe<String>;
  orderCodeCustomer_contains?: Maybe<String>;
  orderCodeCustomer_not_contains?: Maybe<String>;
  orderCodeCustomer_starts_with?: Maybe<String>;
  orderCodeCustomer_not_starts_with?: Maybe<String>;
  orderCodeCustomer_ends_with?: Maybe<String>;
  orderCodeCustomer_not_ends_with?: Maybe<String>;
  countryCode?: Maybe<String>;
  countryCode_not?: Maybe<String>;
  countryCode_in?: Maybe<String[] | String>;
  countryCode_not_in?: Maybe<String[] | String>;
  countryCode_lt?: Maybe<String>;
  countryCode_lte?: Maybe<String>;
  countryCode_gt?: Maybe<String>;
  countryCode_gte?: Maybe<String>;
  countryCode_contains?: Maybe<String>;
  countryCode_not_contains?: Maybe<String>;
  countryCode_starts_with?: Maybe<String>;
  countryCode_not_starts_with?: Maybe<String>;
  countryCode_ends_with?: Maybe<String>;
  countryCode_not_ends_with?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  serviceContractCode_not?: Maybe<String>;
  serviceContractCode_in?: Maybe<String[] | String>;
  serviceContractCode_not_in?: Maybe<String[] | String>;
  serviceContractCode_lt?: Maybe<String>;
  serviceContractCode_lte?: Maybe<String>;
  serviceContractCode_gt?: Maybe<String>;
  serviceContractCode_gte?: Maybe<String>;
  serviceContractCode_contains?: Maybe<String>;
  serviceContractCode_not_contains?: Maybe<String>;
  serviceContractCode_starts_with?: Maybe<String>;
  serviceContractCode_not_starts_with?: Maybe<String>;
  serviceContractCode_ends_with?: Maybe<String>;
  serviceContractCode_not_ends_with?: Maybe<String>;
  orderManager?: Maybe<String>;
  orderManager_not?: Maybe<String>;
  orderManager_in?: Maybe<String[] | String>;
  orderManager_not_in?: Maybe<String[] | String>;
  orderManager_lt?: Maybe<String>;
  orderManager_lte?: Maybe<String>;
  orderManager_gt?: Maybe<String>;
  orderManager_gte?: Maybe<String>;
  orderManager_contains?: Maybe<String>;
  orderManager_not_contains?: Maybe<String>;
  orderManager_starts_with?: Maybe<String>;
  orderManager_not_starts_with?: Maybe<String>;
  orderManager_ends_with?: Maybe<String>;
  orderManager_not_ends_with?: Maybe<String>;
  assignedTo?: Maybe<String>;
  assignedTo_not?: Maybe<String>;
  assignedTo_in?: Maybe<String[] | String>;
  assignedTo_not_in?: Maybe<String[] | String>;
  assignedTo_lt?: Maybe<String>;
  assignedTo_lte?: Maybe<String>;
  assignedTo_gt?: Maybe<String>;
  assignedTo_gte?: Maybe<String>;
  assignedTo_contains?: Maybe<String>;
  assignedTo_not_contains?: Maybe<String>;
  assignedTo_starts_with?: Maybe<String>;
  assignedTo_not_starts_with?: Maybe<String>;
  assignedTo_ends_with?: Maybe<String>;
  assignedTo_not_ends_with?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  servicePackage_not?: Maybe<Float>;
  servicePackage_in?: Maybe<Float[] | Float>;
  servicePackage_not_in?: Maybe<Float[] | Float>;
  servicePackage_lt?: Maybe<Float>;
  servicePackage_lte?: Maybe<Float>;
  servicePackage_gt?: Maybe<Float>;
  servicePackage_gte?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemDescription_not?: Maybe<String>;
  problemDescription_in?: Maybe<String[] | String>;
  problemDescription_not_in?: Maybe<String[] | String>;
  problemDescription_lt?: Maybe<String>;
  problemDescription_lte?: Maybe<String>;
  problemDescription_gt?: Maybe<String>;
  problemDescription_gte?: Maybe<String>;
  problemDescription_contains?: Maybe<String>;
  problemDescription_not_contains?: Maybe<String>;
  problemDescription_starts_with?: Maybe<String>;
  problemDescription_not_starts_with?: Maybe<String>;
  problemDescription_ends_with?: Maybe<String>;
  problemDescription_not_ends_with?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemCause_not?: Maybe<String>;
  problemCause_in?: Maybe<String[] | String>;
  problemCause_not_in?: Maybe<String[] | String>;
  problemCause_lt?: Maybe<String>;
  problemCause_lte?: Maybe<String>;
  problemCause_gt?: Maybe<String>;
  problemCause_gte?: Maybe<String>;
  problemCause_contains?: Maybe<String>;
  problemCause_not_contains?: Maybe<String>;
  problemCause_starts_with?: Maybe<String>;
  problemCause_not_starts_with?: Maybe<String>;
  problemCause_ends_with?: Maybe<String>;
  problemCause_not_ends_with?: Maybe<String>;
  problemSolution?: Maybe<String>;
  problemSolution_not?: Maybe<String>;
  problemSolution_in?: Maybe<String[] | String>;
  problemSolution_not_in?: Maybe<String[] | String>;
  problemSolution_lt?: Maybe<String>;
  problemSolution_lte?: Maybe<String>;
  problemSolution_gt?: Maybe<String>;
  problemSolution_gte?: Maybe<String>;
  problemSolution_contains?: Maybe<String>;
  problemSolution_not_contains?: Maybe<String>;
  problemSolution_starts_with?: Maybe<String>;
  problemSolution_not_starts_with?: Maybe<String>;
  problemSolution_ends_with?: Maybe<String>;
  problemSolution_not_ends_with?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  baseServiceOrderCode_not?: Maybe<String>;
  baseServiceOrderCode_in?: Maybe<String[] | String>;
  baseServiceOrderCode_not_in?: Maybe<String[] | String>;
  baseServiceOrderCode_lt?: Maybe<String>;
  baseServiceOrderCode_lte?: Maybe<String>;
  baseServiceOrderCode_gt?: Maybe<String>;
  baseServiceOrderCode_gte?: Maybe<String>;
  baseServiceOrderCode_contains?: Maybe<String>;
  baseServiceOrderCode_not_contains?: Maybe<String>;
  baseServiceOrderCode_starts_with?: Maybe<String>;
  baseServiceOrderCode_not_starts_with?: Maybe<String>;
  baseServiceOrderCode_ends_with?: Maybe<String>;
  baseServiceOrderCode_not_ends_with?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  isBaseServiceOrder_not?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder_not?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  actualHours_not?: Maybe<Float>;
  actualHours_in?: Maybe<Float[] | Float>;
  actualHours_not_in?: Maybe<Float[] | Float>;
  actualHours_lt?: Maybe<Float>;
  actualHours_lte?: Maybe<Float>;
  actualHours_gt?: Maybe<Float>;
  actualHours_gte?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  orderNumber?: Maybe<String>;
  orderNumber_not?: Maybe<String>;
  orderNumber_in?: Maybe<String[] | String>;
  orderNumber_not_in?: Maybe<String[] | String>;
  orderNumber_lt?: Maybe<String>;
  orderNumber_lte?: Maybe<String>;
  orderNumber_gt?: Maybe<String>;
  orderNumber_gte?: Maybe<String>;
  orderNumber_contains?: Maybe<String>;
  orderNumber_not_contains?: Maybe<String>;
  orderNumber_starts_with?: Maybe<String>;
  orderNumber_not_starts_with?: Maybe<String>;
  orderNumber_ends_with?: Maybe<String>;
  orderNumber_not_ends_with?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  isExportedLocked_not?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexId_not?: Maybe<ID_Input>;
  complexId_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_not_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_lt?: Maybe<ID_Input>;
  complexId_lte?: Maybe<ID_Input>;
  complexId_gt?: Maybe<ID_Input>;
  complexId_gte?: Maybe<ID_Input>;
  complexId_contains?: Maybe<ID_Input>;
  complexId_not_contains?: Maybe<ID_Input>;
  complexId_starts_with?: Maybe<ID_Input>;
  complexId_not_starts_with?: Maybe<ID_Input>;
  complexId_ends_with?: Maybe<ID_Input>;
  complexId_not_ends_with?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexCode_not?: Maybe<String>;
  complexCode_in?: Maybe<String[] | String>;
  complexCode_not_in?: Maybe<String[] | String>;
  complexCode_lt?: Maybe<String>;
  complexCode_lte?: Maybe<String>;
  complexCode_gt?: Maybe<String>;
  complexCode_gte?: Maybe<String>;
  complexCode_contains?: Maybe<String>;
  complexCode_not_contains?: Maybe<String>;
  complexCode_starts_with?: Maybe<String>;
  complexCode_not_starts_with?: Maybe<String>;
  complexCode_ends_with?: Maybe<String>;
  complexCode_not_ends_with?: Maybe<String>;
  complexName?: Maybe<String>;
  complexName_not?: Maybe<String>;
  complexName_in?: Maybe<String[] | String>;
  complexName_not_in?: Maybe<String[] | String>;
  complexName_lt?: Maybe<String>;
  complexName_lte?: Maybe<String>;
  complexName_gt?: Maybe<String>;
  complexName_gte?: Maybe<String>;
  complexName_contains?: Maybe<String>;
  complexName_not_contains?: Maybe<String>;
  complexName_starts_with?: Maybe<String>;
  complexName_not_starts_with?: Maybe<String>;
  complexName_ends_with?: Maybe<String>;
  complexName_not_ends_with?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexCode_not?: Maybe<String>;
  subComplexCode_in?: Maybe<String[] | String>;
  subComplexCode_not_in?: Maybe<String[] | String>;
  subComplexCode_lt?: Maybe<String>;
  subComplexCode_lte?: Maybe<String>;
  subComplexCode_gt?: Maybe<String>;
  subComplexCode_gte?: Maybe<String>;
  subComplexCode_contains?: Maybe<String>;
  subComplexCode_not_contains?: Maybe<String>;
  subComplexCode_starts_with?: Maybe<String>;
  subComplexCode_not_starts_with?: Maybe<String>;
  subComplexCode_ends_with?: Maybe<String>;
  subComplexCode_not_ends_with?: Maybe<String>;
  subComplexName?: Maybe<String>;
  subComplexName_not?: Maybe<String>;
  subComplexName_in?: Maybe<String[] | String>;
  subComplexName_not_in?: Maybe<String[] | String>;
  subComplexName_lt?: Maybe<String>;
  subComplexName_lte?: Maybe<String>;
  subComplexName_gt?: Maybe<String>;
  subComplexName_gte?: Maybe<String>;
  subComplexName_contains?: Maybe<String>;
  subComplexName_not_contains?: Maybe<String>;
  subComplexName_starts_with?: Maybe<String>;
  subComplexName_not_starts_with?: Maybe<String>;
  subComplexName_ends_with?: Maybe<String>;
  subComplexName_not_ends_with?: Maybe<String>;
  roofCode?: Maybe<String>;
  roofCode_not?: Maybe<String>;
  roofCode_in?: Maybe<String[] | String>;
  roofCode_not_in?: Maybe<String[] | String>;
  roofCode_lt?: Maybe<String>;
  roofCode_lte?: Maybe<String>;
  roofCode_gt?: Maybe<String>;
  roofCode_gte?: Maybe<String>;
  roofCode_contains?: Maybe<String>;
  roofCode_not_contains?: Maybe<String>;
  roofCode_starts_with?: Maybe<String>;
  roofCode_not_starts_with?: Maybe<String>;
  roofCode_ends_with?: Maybe<String>;
  roofCode_not_ends_with?: Maybe<String>;
  workType?: Maybe<String>;
  workType_not?: Maybe<String>;
  workType_in?: Maybe<String[] | String>;
  workType_not_in?: Maybe<String[] | String>;
  workType_lt?: Maybe<String>;
  workType_lte?: Maybe<String>;
  workType_gt?: Maybe<String>;
  workType_gte?: Maybe<String>;
  workType_contains?: Maybe<String>;
  workType_not_contains?: Maybe<String>;
  workType_starts_with?: Maybe<String>;
  workType_not_starts_with?: Maybe<String>;
  workType_ends_with?: Maybe<String>;
  workType_not_ends_with?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  statusReasonDescription_not?: Maybe<String>;
  statusReasonDescription_in?: Maybe<String[] | String>;
  statusReasonDescription_not_in?: Maybe<String[] | String>;
  statusReasonDescription_lt?: Maybe<String>;
  statusReasonDescription_lte?: Maybe<String>;
  statusReasonDescription_gt?: Maybe<String>;
  statusReasonDescription_gte?: Maybe<String>;
  statusReasonDescription_contains?: Maybe<String>;
  statusReasonDescription_not_contains?: Maybe<String>;
  statusReasonDescription_starts_with?: Maybe<String>;
  statusReasonDescription_not_starts_with?: Maybe<String>;
  statusReasonDescription_ends_with?: Maybe<String>;
  statusReasonDescription_not_ends_with?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  readyDateNew_not?: Maybe<String>;
  readyDateNew_in?: Maybe<String[] | String>;
  readyDateNew_not_in?: Maybe<String[] | String>;
  readyDateNew_lt?: Maybe<String>;
  readyDateNew_lte?: Maybe<String>;
  readyDateNew_gt?: Maybe<String>;
  readyDateNew_gte?: Maybe<String>;
  readyDateNew_contains?: Maybe<String>;
  readyDateNew_not_contains?: Maybe<String>;
  readyDateNew_starts_with?: Maybe<String>;
  readyDateNew_not_starts_with?: Maybe<String>;
  readyDateNew_ends_with?: Maybe<String>;
  readyDateNew_not_ends_with?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartner_not?: Maybe<String>;
  roofPartner_in?: Maybe<String[] | String>;
  roofPartner_not_in?: Maybe<String[] | String>;
  roofPartner_lt?: Maybe<String>;
  roofPartner_lte?: Maybe<String>;
  roofPartner_gt?: Maybe<String>;
  roofPartner_gte?: Maybe<String>;
  roofPartner_contains?: Maybe<String>;
  roofPartner_not_contains?: Maybe<String>;
  roofPartner_starts_with?: Maybe<String>;
  roofPartner_not_starts_with?: Maybe<String>;
  roofPartner_ends_with?: Maybe<String>;
  roofPartner_not_ends_with?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofPartnerName_not?: Maybe<String>;
  roofPartnerName_in?: Maybe<String[] | String>;
  roofPartnerName_not_in?: Maybe<String[] | String>;
  roofPartnerName_lt?: Maybe<String>;
  roofPartnerName_lte?: Maybe<String>;
  roofPartnerName_gt?: Maybe<String>;
  roofPartnerName_gte?: Maybe<String>;
  roofPartnerName_contains?: Maybe<String>;
  roofPartnerName_not_contains?: Maybe<String>;
  roofPartnerName_starts_with?: Maybe<String>;
  roofPartnerName_not_starts_with?: Maybe<String>;
  roofPartnerName_ends_with?: Maybe<String>;
  roofPartnerName_not_ends_with?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofWarranty_not?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  roofIsAGutter_not?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  amountOfMeasures_not?: Maybe<Int>;
  amountOfMeasures_in?: Maybe<Int[] | Int>;
  amountOfMeasures_not_in?: Maybe<Int[] | Int>;
  amountOfMeasures_lt?: Maybe<Int>;
  amountOfMeasures_lte?: Maybe<Int>;
  amountOfMeasures_gt?: Maybe<Int>;
  amountOfMeasures_gte?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  roofingPartDescription_not?: Maybe<String>;
  roofingPartDescription_in?: Maybe<String[] | String>;
  roofingPartDescription_not_in?: Maybe<String[] | String>;
  roofingPartDescription_lt?: Maybe<String>;
  roofingPartDescription_lte?: Maybe<String>;
  roofingPartDescription_gt?: Maybe<String>;
  roofingPartDescription_gte?: Maybe<String>;
  roofingPartDescription_contains?: Maybe<String>;
  roofingPartDescription_not_contains?: Maybe<String>;
  roofingPartDescription_starts_with?: Maybe<String>;
  roofingPartDescription_not_starts_with?: Maybe<String>;
  roofingPartDescription_ends_with?: Maybe<String>;
  roofingPartDescription_not_ends_with?: Maybe<String>;
  cause?: Maybe<String>;
  cause_not?: Maybe<String>;
  cause_in?: Maybe<String[] | String>;
  cause_not_in?: Maybe<String[] | String>;
  cause_lt?: Maybe<String>;
  cause_lte?: Maybe<String>;
  cause_gt?: Maybe<String>;
  cause_gte?: Maybe<String>;
  cause_contains?: Maybe<String>;
  cause_not_contains?: Maybe<String>;
  cause_starts_with?: Maybe<String>;
  cause_not_starts_with?: Maybe<String>;
  cause_ends_with?: Maybe<String>;
  cause_not_ends_with?: Maybe<String>;
  measureDescription?: Maybe<String>;
  measureDescription_not?: Maybe<String>;
  measureDescription_in?: Maybe<String[] | String>;
  measureDescription_not_in?: Maybe<String[] | String>;
  measureDescription_lt?: Maybe<String>;
  measureDescription_lte?: Maybe<String>;
  measureDescription_gt?: Maybe<String>;
  measureDescription_gte?: Maybe<String>;
  measureDescription_contains?: Maybe<String>;
  measureDescription_not_contains?: Maybe<String>;
  measureDescription_starts_with?: Maybe<String>;
  measureDescription_not_starts_with?: Maybe<String>;
  measureDescription_ends_with?: Maybe<String>;
  measureDescription_not_ends_with?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  consequentialDamageIndoor_not?: Maybe<String>;
  consequentialDamageIndoor_in?: Maybe<String[] | String>;
  consequentialDamageIndoor_not_in?: Maybe<String[] | String>;
  consequentialDamageIndoor_lt?: Maybe<String>;
  consequentialDamageIndoor_lte?: Maybe<String>;
  consequentialDamageIndoor_gt?: Maybe<String>;
  consequentialDamageIndoor_gte?: Maybe<String>;
  consequentialDamageIndoor_contains?: Maybe<String>;
  consequentialDamageIndoor_not_contains?: Maybe<String>;
  consequentialDamageIndoor_starts_with?: Maybe<String>;
  consequentialDamageIndoor_not_starts_with?: Maybe<String>;
  consequentialDamageIndoor_ends_with?: Maybe<String>;
  consequentialDamageIndoor_not_ends_with?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  roofTypeCode_not?: Maybe<String>;
  roofTypeCode_in?: Maybe<String[] | String>;
  roofTypeCode_not_in?: Maybe<String[] | String>;
  roofTypeCode_lt?: Maybe<String>;
  roofTypeCode_lte?: Maybe<String>;
  roofTypeCode_gt?: Maybe<String>;
  roofTypeCode_gte?: Maybe<String>;
  roofTypeCode_contains?: Maybe<String>;
  roofTypeCode_not_contains?: Maybe<String>;
  roofTypeCode_starts_with?: Maybe<String>;
  roofTypeCode_not_starts_with?: Maybe<String>;
  roofTypeCode_ends_with?: Maybe<String>;
  roofTypeCode_not_ends_with?: Maybe<String>;
  condition?: Maybe<Int>;
  condition_not?: Maybe<Int>;
  condition_in?: Maybe<Int[] | Int>;
  condition_not_in?: Maybe<Int[] | Int>;
  condition_lt?: Maybe<Int>;
  condition_lte?: Maybe<Int>;
  condition_gt?: Maybe<Int>;
  condition_gte?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCategories_not?: Maybe<String>;
  roofingPartCategories_in?: Maybe<String[] | String>;
  roofingPartCategories_not_in?: Maybe<String[] | String>;
  roofingPartCategories_lt?: Maybe<String>;
  roofingPartCategories_lte?: Maybe<String>;
  roofingPartCategories_gt?: Maybe<String>;
  roofingPartCategories_gte?: Maybe<String>;
  roofingPartCategories_contains?: Maybe<String>;
  roofingPartCategories_not_contains?: Maybe<String>;
  roofingPartCategories_starts_with?: Maybe<String>;
  roofingPartCategories_not_starts_with?: Maybe<String>;
  roofingPartCategories_ends_with?: Maybe<String>;
  roofingPartCategories_not_ends_with?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  roofingPartCodes_not?: Maybe<String>;
  roofingPartCodes_in?: Maybe<String[] | String>;
  roofingPartCodes_not_in?: Maybe<String[] | String>;
  roofingPartCodes_lt?: Maybe<String>;
  roofingPartCodes_lte?: Maybe<String>;
  roofingPartCodes_gt?: Maybe<String>;
  roofingPartCodes_gte?: Maybe<String>;
  roofingPartCodes_contains?: Maybe<String>;
  roofingPartCodes_not_contains?: Maybe<String>;
  roofingPartCodes_starts_with?: Maybe<String>;
  roofingPartCodes_not_starts_with?: Maybe<String>;
  roofingPartCodes_ends_with?: Maybe<String>;
  roofingPartCodes_not_ends_with?: Maybe<String>;
  contractCode?: Maybe<String>;
  contractCode_not?: Maybe<String>;
  contractCode_in?: Maybe<String[] | String>;
  contractCode_not_in?: Maybe<String[] | String>;
  contractCode_lt?: Maybe<String>;
  contractCode_lte?: Maybe<String>;
  contractCode_gt?: Maybe<String>;
  contractCode_gte?: Maybe<String>;
  contractCode_contains?: Maybe<String>;
  contractCode_not_contains?: Maybe<String>;
  contractCode_starts_with?: Maybe<String>;
  contractCode_not_starts_with?: Maybe<String>;
  contractCode_ends_with?: Maybe<String>;
  contractCode_not_ends_with?: Maybe<String>;
  invoiceType?: Maybe<String>;
  invoiceType_not?: Maybe<String>;
  invoiceType_in?: Maybe<String[] | String>;
  invoiceType_not_in?: Maybe<String[] | String>;
  invoiceType_lt?: Maybe<String>;
  invoiceType_lte?: Maybe<String>;
  invoiceType_gt?: Maybe<String>;
  invoiceType_gte?: Maybe<String>;
  invoiceType_contains?: Maybe<String>;
  invoiceType_not_contains?: Maybe<String>;
  invoiceType_starts_with?: Maybe<String>;
  invoiceType_not_starts_with?: Maybe<String>;
  invoiceType_ends_with?: Maybe<String>;
  invoiceType_not_ends_with?: Maybe<String>;
  billingAddress?: Maybe<String>;
  billingAddress_not?: Maybe<String>;
  billingAddress_in?: Maybe<String[] | String>;
  billingAddress_not_in?: Maybe<String[] | String>;
  billingAddress_lt?: Maybe<String>;
  billingAddress_lte?: Maybe<String>;
  billingAddress_gt?: Maybe<String>;
  billingAddress_gte?: Maybe<String>;
  billingAddress_contains?: Maybe<String>;
  billingAddress_not_contains?: Maybe<String>;
  billingAddress_starts_with?: Maybe<String>;
  billingAddress_not_starts_with?: Maybe<String>;
  billingAddress_ends_with?: Maybe<String>;
  billingAddress_not_ends_with?: Maybe<String>;
  roofNumber?: Maybe<String>;
  roofNumber_not?: Maybe<String>;
  roofNumber_in?: Maybe<String[] | String>;
  roofNumber_not_in?: Maybe<String[] | String>;
  roofNumber_lt?: Maybe<String>;
  roofNumber_lte?: Maybe<String>;
  roofNumber_gt?: Maybe<String>;
  roofNumber_gte?: Maybe<String>;
  roofNumber_contains?: Maybe<String>;
  roofNumber_not_contains?: Maybe<String>;
  roofNumber_starts_with?: Maybe<String>;
  roofNumber_not_starts_with?: Maybe<String>;
  roofNumber_ends_with?: Maybe<String>;
  roofNumber_not_ends_with?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
  isBlocked_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ServiceOrderScalarWhereInput[] | ServiceOrderScalarWhereInput>;
  OR?: Maybe<ServiceOrderScalarWhereInput[] | ServiceOrderScalarWhereInput>;
  NOT?: Maybe<ServiceOrderScalarWhereInput[] | ServiceOrderScalarWhereInput>;
}

export interface ServiceOrderUpdateManyWithWhereNestedInput {
  where: ServiceOrderScalarWhereInput;
  data: ServiceOrderUpdateManyDataInput;
}

export interface ServiceOrderUpdateManyDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceContractUpsertWithoutServiceAppointmentsInput {
  update: ServiceContractUpdateWithoutServiceAppointmentsDataInput;
  create: ServiceContractCreateWithoutServiceAppointmentsInput;
}

export interface ServiceAppointmentUpsertWithoutServiceOrdersInput {
  update: ServiceAppointmentUpdateWithoutServiceOrdersDataInput;
  create: ServiceAppointmentCreateWithoutServiceOrdersInput;
}

export interface ServiceOrderUpsertWithoutActivityLogsInput {
  update: ServiceOrderUpdateWithoutActivityLogsDataInput;
  create: ServiceOrderCreateWithoutActivityLogsInput;
}

export interface ActivityLogUpdateManyMutationInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  apply?: Maybe<String>;
  colour?: Maybe<String>;
  eventType?: Maybe<String>;
  statusPurchQuote?: Maybe<String>;
  statusPurchOrder?: Maybe<String>;
  statusServiceCall?: Maybe<String>;
  statusServiceOrder?: Maybe<String>;
  fieldService?: Maybe<String>;
  blockModifyServiceOrder?: Maybe<Boolean>;
  skipExportToFSA?: Maybe<Boolean>;
  sendStatusUpdateMail?: Maybe<Boolean>;
  sendMailWorkSheet?: Maybe<Boolean>;
  publishOnServicePOrtal?: Maybe<Boolean>;
  sendMainToSubcontractor?: Maybe<Boolean>;
  updateWOStartTime?: Maybe<Boolean>;
  updateWOEndTime?: Maybe<Boolean>;
  naForActualReferencePoint?: Maybe<Boolean>;
}

export interface ActivityLogHistoryCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutActivityLogHistoriesInput>;
}

export interface ServiceOrderCreateOneWithoutActivityLogHistoriesInput {
  create?: Maybe<ServiceOrderCreateWithoutActivityLogHistoriesInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutActivityLogHistoriesInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ActivityLogHistoryUpdateInput {
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutActivityLogHistoriesInput>;
}

export interface ServiceOrderUpdateOneWithoutActivityLogHistoriesInput {
  create?: Maybe<ServiceOrderCreateWithoutActivityLogHistoriesInput>;
  update?: Maybe<ServiceOrderUpdateWithoutActivityLogHistoriesDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutActivityLogHistoriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutActivityLogHistoriesDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithoutActivityLogHistoriesInput {
  update: ServiceOrderUpdateWithoutActivityLogHistoriesDataInput;
  create: ServiceOrderCreateWithoutActivityLogHistoriesInput;
}

export interface ActivityLogHistoryUpdateManyMutationInput {
  type?: Maybe<String>;
  code?: Maybe<String>;
  registerDate?: Maybe<DateTimeInput>;
  employeeCode?: Maybe<String>;
}

export interface CustomerFeedbackCreateInput {
  id?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId: ID_Input;
  notificationId: ID_Input;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutCustomerFeedbacksInput>;
}

export interface ServiceOrderCreateOneWithoutCustomerFeedbacksInput {
  create?: Maybe<ServiceOrderCreateWithoutCustomerFeedbacksInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutCustomerFeedbacksInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface CustomerFeedbackUpdateInput {
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutCustomerFeedbacksInput>;
}

export interface ServiceOrderUpdateOneWithoutCustomerFeedbacksInput {
  create?: Maybe<ServiceOrderCreateWithoutCustomerFeedbacksInput>;
  update?: Maybe<ServiceOrderUpdateWithoutCustomerFeedbacksDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutCustomerFeedbacksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutCustomerFeedbacksDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithoutCustomerFeedbacksInput {
  update: ServiceOrderUpdateWithoutCustomerFeedbacksDataInput;
  create: ServiceOrderCreateWithoutCustomerFeedbacksInput;
}

export interface CustomerFeedbackUpdateManyMutationInput {
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  actionId: String;
  type?: Maybe<EventType>;
  order?: Maybe<Int>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  actionId?: Maybe<String>;
  type?: Maybe<EventType>;
  order?: Maybe<Int>;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
  actionId?: Maybe<String>;
  type?: Maybe<EventType>;
  order?: Maybe<Int>;
}

export interface FaqCreateInput {
  id?: Maybe<ID_Input>;
  question?: Maybe<String>;
  answer?: Maybe<String>;
  header?: Maybe<String>;
  projectNumber: String;
}

export interface FaqUpdateInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
  header?: Maybe<String>;
  projectNumber?: Maybe<String>;
}

export interface FaqUpdateManyMutationInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
  header?: Maybe<String>;
  projectNumber?: Maybe<String>;
}

export interface KimInformationCreateInput {
  id?: Maybe<ID_Input>;
  projectNumber: String;
  projectLeader?: Maybe<String>;
  projectLeaderPhoto?: Maybe<String>;
  foreman?: Maybe<String>;
  foremanPhoto?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  startDate?: Maybe<String>;
  schedule?: Maybe<String>;
  deliveryDate?: Maybe<String>;
  noiseAndDrilling?: Maybe<String>;
  noiseAndGravel?: Maybe<String>;
  noiseAndDemolition?: Maybe<String>;
  vibrationDemolition?: Maybe<String>;
  dustAndWipe?: Maybe<String>;
  dustAndDemolish?: Maybe<String>;
  smellAndBitumen?: Maybe<String>;
  smellAndCoatings?: Maybe<String>;
  crane?: Maybe<String>;
  container?: Maybe<String>;
  constructionSite?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface KimInformationUpdateInput {
  projectNumber?: Maybe<String>;
  projectLeader?: Maybe<String>;
  projectLeaderPhoto?: Maybe<String>;
  foreman?: Maybe<String>;
  foremanPhoto?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  startDate?: Maybe<String>;
  schedule?: Maybe<String>;
  deliveryDate?: Maybe<String>;
  noiseAndDrilling?: Maybe<String>;
  noiseAndGravel?: Maybe<String>;
  noiseAndDemolition?: Maybe<String>;
  vibrationDemolition?: Maybe<String>;
  dustAndWipe?: Maybe<String>;
  dustAndDemolish?: Maybe<String>;
  smellAndBitumen?: Maybe<String>;
  smellAndCoatings?: Maybe<String>;
  crane?: Maybe<String>;
  container?: Maybe<String>;
  constructionSite?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface KimInformationUpdateManyMutationInput {
  projectNumber?: Maybe<String>;
  projectLeader?: Maybe<String>;
  projectLeaderPhoto?: Maybe<String>;
  foreman?: Maybe<String>;
  foremanPhoto?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  startDate?: Maybe<String>;
  schedule?: Maybe<String>;
  deliveryDate?: Maybe<String>;
  noiseAndDrilling?: Maybe<String>;
  noiseAndGravel?: Maybe<String>;
  noiseAndDemolition?: Maybe<String>;
  vibrationDemolition?: Maybe<String>;
  dustAndWipe?: Maybe<String>;
  dustAndDemolish?: Maybe<String>;
  smellAndBitumen?: Maybe<String>;
  smellAndCoatings?: Maybe<String>;
  crane?: Maybe<String>;
  container?: Maybe<String>;
  constructionSite?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface MomentUpdateInput {
  code?: Maybe<Int>;
  type?: Maybe<MomentEntityType>;
  navisionCode?: Maybe<Int>;
  status?: Maybe<String>;
  actionId?: Maybe<String>;
  hasSoStatusChange?: Maybe<Boolean>;
  hasWoPlanningStatusChange?: Maybe<Boolean>;
  hasScStatusChange?: Maybe<Boolean>;
  isWOPlanningBlocked?: Maybe<Boolean>;
  isSCBlocked?: Maybe<Boolean>;
  isSOBlocked?: Maybe<Boolean>;
  isExportBlocked?: Maybe<Boolean>;
}

export interface MomentUpdateManyMutationInput {
  code?: Maybe<Int>;
  type?: Maybe<MomentEntityType>;
  navisionCode?: Maybe<Int>;
  status?: Maybe<String>;
  actionId?: Maybe<String>;
  hasSoStatusChange?: Maybe<Boolean>;
  hasWoPlanningStatusChange?: Maybe<Boolean>;
  hasScStatusChange?: Maybe<Boolean>;
  isWOPlanningBlocked?: Maybe<Boolean>;
  isSCBlocked?: Maybe<Boolean>;
  isSOBlocked?: Maybe<Boolean>;
  isExportBlocked?: Maybe<Boolean>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  projectNumber: String;
  location?: Maybe<String>;
  employeeCode?: Maybe<String>;
  ownerCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  mainProject?: Maybe<String>;
  description?: Maybe<String>;
  contractValue?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  postalCode?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  team?: Maybe<String>;
  status?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  commissionDate?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  workType?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
  kimInformation?: Maybe<KimInformationCreateOneInput>;
  subProjects?: Maybe<ProjectCreateManyInput>;
}

export interface KimInformationCreateOneInput {
  create?: Maybe<KimInformationCreateInput>;
  connect?: Maybe<KimInformationWhereUniqueInput>;
}

export interface ProjectCreateManyInput {
  create?: Maybe<ProjectCreateInput[] | ProjectCreateInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface ProjectUpdateInput {
  projectNumber?: Maybe<String>;
  location?: Maybe<String>;
  employeeCode?: Maybe<String>;
  ownerCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  mainProject?: Maybe<String>;
  description?: Maybe<String>;
  contractValue?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  postalCode?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  team?: Maybe<String>;
  status?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  commissionDate?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  workType?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
  kimInformation?: Maybe<KimInformationUpdateOneInput>;
  subProjects?: Maybe<ProjectUpdateManyInput>;
}

export interface KimInformationUpdateOneInput {
  create?: Maybe<KimInformationCreateInput>;
  update?: Maybe<KimInformationUpdateDataInput>;
  upsert?: Maybe<KimInformationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<KimInformationWhereUniqueInput>;
}

export interface KimInformationUpdateDataInput {
  projectNumber?: Maybe<String>;
  projectLeader?: Maybe<String>;
  projectLeaderPhoto?: Maybe<String>;
  foreman?: Maybe<String>;
  foremanPhoto?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  startDate?: Maybe<String>;
  schedule?: Maybe<String>;
  deliveryDate?: Maybe<String>;
  noiseAndDrilling?: Maybe<String>;
  noiseAndGravel?: Maybe<String>;
  noiseAndDemolition?: Maybe<String>;
  vibrationDemolition?: Maybe<String>;
  dustAndWipe?: Maybe<String>;
  dustAndDemolish?: Maybe<String>;
  smellAndBitumen?: Maybe<String>;
  smellAndCoatings?: Maybe<String>;
  crane?: Maybe<String>;
  container?: Maybe<String>;
  constructionSite?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface KimInformationUpsertNestedInput {
  update: KimInformationUpdateDataInput;
  create: KimInformationCreateInput;
}

export interface ProjectUpdateManyInput {
  create?: Maybe<ProjectCreateInput[] | ProjectCreateInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueNestedInput[]
    | ProjectUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueNestedInput[]
    | ProjectUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateDataInput;
}

export interface ProjectUpdateDataInput {
  projectNumber?: Maybe<String>;
  location?: Maybe<String>;
  employeeCode?: Maybe<String>;
  ownerCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  mainProject?: Maybe<String>;
  description?: Maybe<String>;
  contractValue?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  postalCode?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  team?: Maybe<String>;
  status?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  commissionDate?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  workType?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
  kimInformation?: Maybe<KimInformationUpdateOneInput>;
  subProjects?: Maybe<ProjectUpdateManyInput>;
}

export interface ProjectUpsertWithWhereUniqueNestedInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateDataInput;
  create: ProjectCreateInput;
}

export interface ProjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  projectNumber?: Maybe<String>;
  projectNumber_not?: Maybe<String>;
  projectNumber_in?: Maybe<String[] | String>;
  projectNumber_not_in?: Maybe<String[] | String>;
  projectNumber_lt?: Maybe<String>;
  projectNumber_lte?: Maybe<String>;
  projectNumber_gt?: Maybe<String>;
  projectNumber_gte?: Maybe<String>;
  projectNumber_contains?: Maybe<String>;
  projectNumber_not_contains?: Maybe<String>;
  projectNumber_starts_with?: Maybe<String>;
  projectNumber_not_starts_with?: Maybe<String>;
  projectNumber_ends_with?: Maybe<String>;
  projectNumber_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeCode_not?: Maybe<String>;
  employeeCode_in?: Maybe<String[] | String>;
  employeeCode_not_in?: Maybe<String[] | String>;
  employeeCode_lt?: Maybe<String>;
  employeeCode_lte?: Maybe<String>;
  employeeCode_gt?: Maybe<String>;
  employeeCode_gte?: Maybe<String>;
  employeeCode_contains?: Maybe<String>;
  employeeCode_not_contains?: Maybe<String>;
  employeeCode_starts_with?: Maybe<String>;
  employeeCode_not_starts_with?: Maybe<String>;
  employeeCode_ends_with?: Maybe<String>;
  employeeCode_not_ends_with?: Maybe<String>;
  ownerCode?: Maybe<String>;
  ownerCode_not?: Maybe<String>;
  ownerCode_in?: Maybe<String[] | String>;
  ownerCode_not_in?: Maybe<String[] | String>;
  ownerCode_lt?: Maybe<String>;
  ownerCode_lte?: Maybe<String>;
  ownerCode_gt?: Maybe<String>;
  ownerCode_gte?: Maybe<String>;
  ownerCode_contains?: Maybe<String>;
  ownerCode_not_contains?: Maybe<String>;
  ownerCode_starts_with?: Maybe<String>;
  ownerCode_not_starts_with?: Maybe<String>;
  ownerCode_ends_with?: Maybe<String>;
  ownerCode_not_ends_with?: Maybe<String>;
  employeeName?: Maybe<String>;
  employeeName_not?: Maybe<String>;
  employeeName_in?: Maybe<String[] | String>;
  employeeName_not_in?: Maybe<String[] | String>;
  employeeName_lt?: Maybe<String>;
  employeeName_lte?: Maybe<String>;
  employeeName_gt?: Maybe<String>;
  employeeName_gte?: Maybe<String>;
  employeeName_contains?: Maybe<String>;
  employeeName_not_contains?: Maybe<String>;
  employeeName_starts_with?: Maybe<String>;
  employeeName_not_starts_with?: Maybe<String>;
  employeeName_ends_with?: Maybe<String>;
  employeeName_not_ends_with?: Maybe<String>;
  mainProject?: Maybe<String>;
  mainProject_not?: Maybe<String>;
  mainProject_in?: Maybe<String[] | String>;
  mainProject_not_in?: Maybe<String[] | String>;
  mainProject_lt?: Maybe<String>;
  mainProject_lte?: Maybe<String>;
  mainProject_gt?: Maybe<String>;
  mainProject_gte?: Maybe<String>;
  mainProject_contains?: Maybe<String>;
  mainProject_not_contains?: Maybe<String>;
  mainProject_starts_with?: Maybe<String>;
  mainProject_not_starts_with?: Maybe<String>;
  mainProject_ends_with?: Maybe<String>;
  mainProject_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  contractValue?: Maybe<Float>;
  contractValue_not?: Maybe<Float>;
  contractValue_in?: Maybe<Float[] | Float>;
  contractValue_not_in?: Maybe<Float[] | Float>;
  contractValue_lt?: Maybe<Float>;
  contractValue_lte?: Maybe<Float>;
  contractValue_gt?: Maybe<Float>;
  contractValue_gte?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  additionalTotalAmount_not?: Maybe<Float>;
  additionalTotalAmount_in?: Maybe<Float[] | Float>;
  additionalTotalAmount_not_in?: Maybe<Float[] | Float>;
  additionalTotalAmount_lt?: Maybe<Float>;
  additionalTotalAmount_lte?: Maybe<Float>;
  additionalTotalAmount_gt?: Maybe<Float>;
  additionalTotalAmount_gte?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDone_not?: Maybe<Int>;
  percentageDone_in?: Maybe<Int[] | Int>;
  percentageDone_not_in?: Maybe<Int[] | Int>;
  percentageDone_lt?: Maybe<Int>;
  percentageDone_lte?: Maybe<Int>;
  percentageDone_gt?: Maybe<Int>;
  percentageDone_gte?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneDate_not?: Maybe<String>;
  percentageDoneDate_in?: Maybe<String[] | String>;
  percentageDoneDate_not_in?: Maybe<String[] | String>;
  percentageDoneDate_lt?: Maybe<String>;
  percentageDoneDate_lte?: Maybe<String>;
  percentageDoneDate_gt?: Maybe<String>;
  percentageDoneDate_gte?: Maybe<String>;
  percentageDoneDate_contains?: Maybe<String>;
  percentageDoneDate_not_contains?: Maybe<String>;
  percentageDoneDate_starts_with?: Maybe<String>;
  percentageDoneDate_not_starts_with?: Maybe<String>;
  percentageDoneDate_ends_with?: Maybe<String>;
  percentageDoneDate_not_ends_with?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  percentageDoneMinValue_not?: Maybe<Int>;
  percentageDoneMinValue_in?: Maybe<Int[] | Int>;
  percentageDoneMinValue_not_in?: Maybe<Int[] | Int>;
  percentageDoneMinValue_lt?: Maybe<Int>;
  percentageDoneMinValue_lte?: Maybe<Int>;
  percentageDoneMinValue_gt?: Maybe<Int>;
  percentageDoneMinValue_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexExists_not?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexId_not?: Maybe<ID_Input>;
  complexId_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_not_in?: Maybe<ID_Input[] | ID_Input>;
  complexId_lt?: Maybe<ID_Input>;
  complexId_lte?: Maybe<ID_Input>;
  complexId_gt?: Maybe<ID_Input>;
  complexId_gte?: Maybe<ID_Input>;
  complexId_contains?: Maybe<ID_Input>;
  complexId_not_contains?: Maybe<ID_Input>;
  complexId_starts_with?: Maybe<ID_Input>;
  complexId_not_starts_with?: Maybe<ID_Input>;
  complexId_ends_with?: Maybe<ID_Input>;
  complexId_not_ends_with?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexCode_not?: Maybe<String>;
  complexCode_in?: Maybe<String[] | String>;
  complexCode_not_in?: Maybe<String[] | String>;
  complexCode_lt?: Maybe<String>;
  complexCode_lte?: Maybe<String>;
  complexCode_gt?: Maybe<String>;
  complexCode_gte?: Maybe<String>;
  complexCode_contains?: Maybe<String>;
  complexCode_not_contains?: Maybe<String>;
  complexCode_starts_with?: Maybe<String>;
  complexCode_not_starts_with?: Maybe<String>;
  complexCode_ends_with?: Maybe<String>;
  complexCode_not_ends_with?: Maybe<String>;
  complexName?: Maybe<String>;
  complexName_not?: Maybe<String>;
  complexName_in?: Maybe<String[] | String>;
  complexName_not_in?: Maybe<String[] | String>;
  complexName_lt?: Maybe<String>;
  complexName_lte?: Maybe<String>;
  complexName_gt?: Maybe<String>;
  complexName_gte?: Maybe<String>;
  complexName_contains?: Maybe<String>;
  complexName_not_contains?: Maybe<String>;
  complexName_starts_with?: Maybe<String>;
  complexName_not_starts_with?: Maybe<String>;
  complexName_ends_with?: Maybe<String>;
  complexName_not_ends_with?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoNo_not?: Maybe<String>;
  complexPhotoNo_in?: Maybe<String[] | String>;
  complexPhotoNo_not_in?: Maybe<String[] | String>;
  complexPhotoNo_lt?: Maybe<String>;
  complexPhotoNo_lte?: Maybe<String>;
  complexPhotoNo_gt?: Maybe<String>;
  complexPhotoNo_gte?: Maybe<String>;
  complexPhotoNo_contains?: Maybe<String>;
  complexPhotoNo_not_contains?: Maybe<String>;
  complexPhotoNo_starts_with?: Maybe<String>;
  complexPhotoNo_not_starts_with?: Maybe<String>;
  complexPhotoNo_ends_with?: Maybe<String>;
  complexPhotoNo_not_ends_with?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  complexPhotoUrl_not?: Maybe<String>;
  complexPhotoUrl_in?: Maybe<String[] | String>;
  complexPhotoUrl_not_in?: Maybe<String[] | String>;
  complexPhotoUrl_lt?: Maybe<String>;
  complexPhotoUrl_lte?: Maybe<String>;
  complexPhotoUrl_gt?: Maybe<String>;
  complexPhotoUrl_gte?: Maybe<String>;
  complexPhotoUrl_contains?: Maybe<String>;
  complexPhotoUrl_not_contains?: Maybe<String>;
  complexPhotoUrl_starts_with?: Maybe<String>;
  complexPhotoUrl_not_starts_with?: Maybe<String>;
  complexPhotoUrl_ends_with?: Maybe<String>;
  complexPhotoUrl_not_ends_with?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  amountSpent_not?: Maybe<Float>;
  amountSpent_in?: Maybe<Float[] | Float>;
  amountSpent_not_in?: Maybe<Float[] | Float>;
  amountSpent_lt?: Maybe<Float>;
  amountSpent_lte?: Maybe<Float>;
  amountSpent_gt?: Maybe<Float>;
  amountSpent_gte?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  spentVsBudgetted_not?: Maybe<Int>;
  spentVsBudgetted_in?: Maybe<Int[] | Int>;
  spentVsBudgetted_not_in?: Maybe<Int[] | Int>;
  spentVsBudgetted_lt?: Maybe<Int>;
  spentVsBudgetted_lte?: Maybe<Int>;
  spentVsBudgetted_gt?: Maybe<Int>;
  spentVsBudgetted_gte?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  amountOnReceipt_not?: Maybe<Float>;
  amountOnReceipt_in?: Maybe<Float[] | Float>;
  amountOnReceipt_not_in?: Maybe<Float[] | Float>;
  amountOnReceipt_lt?: Maybe<Float>;
  amountOnReceipt_lte?: Maybe<Float>;
  amountOnReceipt_gt?: Maybe<Float>;
  amountOnReceipt_gte?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  receiptIsNecessary_not?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  invoiced_not?: Maybe<Float>;
  invoiced_in?: Maybe<Float[] | Float>;
  invoiced_not_in?: Maybe<Float[] | Float>;
  invoiced_lt?: Maybe<Float>;
  invoiced_lte?: Maybe<Float>;
  invoiced_gt?: Maybe<Float>;
  invoiced_gte?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsNecessary_not?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsNecessary_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  qualityMeasurementIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary_not?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary_in?: Maybe<ReportIsNecessary[] | ReportIsNecessary>;
  progressReportIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary_not?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary_in?: Maybe<ReportIsNecessary[] | ReportIsNecessary>;
  deliveryReportIsNecessary_not_in?: Maybe<
    ReportIsNecessary[] | ReportIsNecessary
  >;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  qualityMeasurementIsComplete_not?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  progressReportIsComplete_not?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete_not?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkDescription1_not?: Maybe<String>;
  additionalWorkDescription1_in?: Maybe<String[] | String>;
  additionalWorkDescription1_not_in?: Maybe<String[] | String>;
  additionalWorkDescription1_lt?: Maybe<String>;
  additionalWorkDescription1_lte?: Maybe<String>;
  additionalWorkDescription1_gt?: Maybe<String>;
  additionalWorkDescription1_gte?: Maybe<String>;
  additionalWorkDescription1_contains?: Maybe<String>;
  additionalWorkDescription1_not_contains?: Maybe<String>;
  additionalWorkDescription1_starts_with?: Maybe<String>;
  additionalWorkDescription1_not_starts_with?: Maybe<String>;
  additionalWorkDescription1_ends_with?: Maybe<String>;
  additionalWorkDescription1_not_ends_with?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkAmount1_not?: Maybe<Float>;
  additionalWorkAmount1_in?: Maybe<Float[] | Float>;
  additionalWorkAmount1_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount1_lt?: Maybe<Float>;
  additionalWorkAmount1_lte?: Maybe<Float>;
  additionalWorkAmount1_gt?: Maybe<Float>;
  additionalWorkAmount1_gte?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkDescription2_not?: Maybe<String>;
  additionalWorkDescription2_in?: Maybe<String[] | String>;
  additionalWorkDescription2_not_in?: Maybe<String[] | String>;
  additionalWorkDescription2_lt?: Maybe<String>;
  additionalWorkDescription2_lte?: Maybe<String>;
  additionalWorkDescription2_gt?: Maybe<String>;
  additionalWorkDescription2_gte?: Maybe<String>;
  additionalWorkDescription2_contains?: Maybe<String>;
  additionalWorkDescription2_not_contains?: Maybe<String>;
  additionalWorkDescription2_starts_with?: Maybe<String>;
  additionalWorkDescription2_not_starts_with?: Maybe<String>;
  additionalWorkDescription2_ends_with?: Maybe<String>;
  additionalWorkDescription2_not_ends_with?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkAmount2_not?: Maybe<Float>;
  additionalWorkAmount2_in?: Maybe<Float[] | Float>;
  additionalWorkAmount2_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount2_lt?: Maybe<Float>;
  additionalWorkAmount2_lte?: Maybe<Float>;
  additionalWorkAmount2_gt?: Maybe<Float>;
  additionalWorkAmount2_gte?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkDescription3_not?: Maybe<String>;
  additionalWorkDescription3_in?: Maybe<String[] | String>;
  additionalWorkDescription3_not_in?: Maybe<String[] | String>;
  additionalWorkDescription3_lt?: Maybe<String>;
  additionalWorkDescription3_lte?: Maybe<String>;
  additionalWorkDescription3_gt?: Maybe<String>;
  additionalWorkDescription3_gte?: Maybe<String>;
  additionalWorkDescription3_contains?: Maybe<String>;
  additionalWorkDescription3_not_contains?: Maybe<String>;
  additionalWorkDescription3_starts_with?: Maybe<String>;
  additionalWorkDescription3_not_starts_with?: Maybe<String>;
  additionalWorkDescription3_ends_with?: Maybe<String>;
  additionalWorkDescription3_not_ends_with?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkAmount3_not?: Maybe<Float>;
  additionalWorkAmount3_in?: Maybe<Float[] | Float>;
  additionalWorkAmount3_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount3_lt?: Maybe<Float>;
  additionalWorkAmount3_lte?: Maybe<Float>;
  additionalWorkAmount3_gt?: Maybe<Float>;
  additionalWorkAmount3_gte?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkDescription4_not?: Maybe<String>;
  additionalWorkDescription4_in?: Maybe<String[] | String>;
  additionalWorkDescription4_not_in?: Maybe<String[] | String>;
  additionalWorkDescription4_lt?: Maybe<String>;
  additionalWorkDescription4_lte?: Maybe<String>;
  additionalWorkDescription4_gt?: Maybe<String>;
  additionalWorkDescription4_gte?: Maybe<String>;
  additionalWorkDescription4_contains?: Maybe<String>;
  additionalWorkDescription4_not_contains?: Maybe<String>;
  additionalWorkDescription4_starts_with?: Maybe<String>;
  additionalWorkDescription4_not_starts_with?: Maybe<String>;
  additionalWorkDescription4_ends_with?: Maybe<String>;
  additionalWorkDescription4_not_ends_with?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkAmount4_not?: Maybe<Float>;
  additionalWorkAmount4_in?: Maybe<Float[] | Float>;
  additionalWorkAmount4_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount4_lt?: Maybe<Float>;
  additionalWorkAmount4_lte?: Maybe<Float>;
  additionalWorkAmount4_gt?: Maybe<Float>;
  additionalWorkAmount4_gte?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkDescription5_not?: Maybe<String>;
  additionalWorkDescription5_in?: Maybe<String[] | String>;
  additionalWorkDescription5_not_in?: Maybe<String[] | String>;
  additionalWorkDescription5_lt?: Maybe<String>;
  additionalWorkDescription5_lte?: Maybe<String>;
  additionalWorkDescription5_gt?: Maybe<String>;
  additionalWorkDescription5_gte?: Maybe<String>;
  additionalWorkDescription5_contains?: Maybe<String>;
  additionalWorkDescription5_not_contains?: Maybe<String>;
  additionalWorkDescription5_starts_with?: Maybe<String>;
  additionalWorkDescription5_not_starts_with?: Maybe<String>;
  additionalWorkDescription5_ends_with?: Maybe<String>;
  additionalWorkDescription5_not_ends_with?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkAmount5_not?: Maybe<Float>;
  additionalWorkAmount5_in?: Maybe<Float[] | Float>;
  additionalWorkAmount5_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount5_lt?: Maybe<Float>;
  additionalWorkAmount5_lte?: Maybe<Float>;
  additionalWorkAmount5_gt?: Maybe<Float>;
  additionalWorkAmount5_gte?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkDescription6_not?: Maybe<String>;
  additionalWorkDescription6_in?: Maybe<String[] | String>;
  additionalWorkDescription6_not_in?: Maybe<String[] | String>;
  additionalWorkDescription6_lt?: Maybe<String>;
  additionalWorkDescription6_lte?: Maybe<String>;
  additionalWorkDescription6_gt?: Maybe<String>;
  additionalWorkDescription6_gte?: Maybe<String>;
  additionalWorkDescription6_contains?: Maybe<String>;
  additionalWorkDescription6_not_contains?: Maybe<String>;
  additionalWorkDescription6_starts_with?: Maybe<String>;
  additionalWorkDescription6_not_starts_with?: Maybe<String>;
  additionalWorkDescription6_ends_with?: Maybe<String>;
  additionalWorkDescription6_not_ends_with?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  additionalWorkAmount6_not?: Maybe<Float>;
  additionalWorkAmount6_in?: Maybe<Float[] | Float>;
  additionalWorkAmount6_not_in?: Maybe<Float[] | Float>;
  additionalWorkAmount6_lt?: Maybe<Float>;
  additionalWorkAmount6_lte?: Maybe<Float>;
  additionalWorkAmount6_gt?: Maybe<Float>;
  additionalWorkAmount6_gte?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentNo_not?: Maybe<String>;
  qualityMeasurementDocumentNo_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentNo_not_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentNo_lt?: Maybe<String>;
  qualityMeasurementDocumentNo_lte?: Maybe<String>;
  qualityMeasurementDocumentNo_gt?: Maybe<String>;
  qualityMeasurementDocumentNo_gte?: Maybe<String>;
  qualityMeasurementDocumentNo_contains?: Maybe<String>;
  qualityMeasurementDocumentNo_not_contains?: Maybe<String>;
  qualityMeasurementDocumentNo_starts_with?: Maybe<String>;
  qualityMeasurementDocumentNo_not_starts_with?: Maybe<String>;
  qualityMeasurementDocumentNo_ends_with?: Maybe<String>;
  qualityMeasurementDocumentNo_not_ends_with?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  progressReportDocumentNo_not?: Maybe<String>;
  progressReportDocumentNo_in?: Maybe<String[] | String>;
  progressReportDocumentNo_not_in?: Maybe<String[] | String>;
  progressReportDocumentNo_lt?: Maybe<String>;
  progressReportDocumentNo_lte?: Maybe<String>;
  progressReportDocumentNo_gt?: Maybe<String>;
  progressReportDocumentNo_gte?: Maybe<String>;
  progressReportDocumentNo_contains?: Maybe<String>;
  progressReportDocumentNo_not_contains?: Maybe<String>;
  progressReportDocumentNo_starts_with?: Maybe<String>;
  progressReportDocumentNo_not_starts_with?: Maybe<String>;
  progressReportDocumentNo_ends_with?: Maybe<String>;
  progressReportDocumentNo_not_ends_with?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo_not?: Maybe<String>;
  deliveryReportDocumentNo_in?: Maybe<String[] | String>;
  deliveryReportDocumentNo_not_in?: Maybe<String[] | String>;
  deliveryReportDocumentNo_lt?: Maybe<String>;
  deliveryReportDocumentNo_lte?: Maybe<String>;
  deliveryReportDocumentNo_gt?: Maybe<String>;
  deliveryReportDocumentNo_gte?: Maybe<String>;
  deliveryReportDocumentNo_contains?: Maybe<String>;
  deliveryReportDocumentNo_not_contains?: Maybe<String>;
  deliveryReportDocumentNo_starts_with?: Maybe<String>;
  deliveryReportDocumentNo_not_starts_with?: Maybe<String>;
  deliveryReportDocumentNo_ends_with?: Maybe<String>;
  deliveryReportDocumentNo_not_ends_with?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo_not?: Maybe<String>;
  visitReportDocumentNo_in?: Maybe<String[] | String>;
  visitReportDocumentNo_not_in?: Maybe<String[] | String>;
  visitReportDocumentNo_lt?: Maybe<String>;
  visitReportDocumentNo_lte?: Maybe<String>;
  visitReportDocumentNo_gt?: Maybe<String>;
  visitReportDocumentNo_gte?: Maybe<String>;
  visitReportDocumentNo_contains?: Maybe<String>;
  visitReportDocumentNo_not_contains?: Maybe<String>;
  visitReportDocumentNo_starts_with?: Maybe<String>;
  visitReportDocumentNo_not_starts_with?: Maybe<String>;
  visitReportDocumentNo_ends_with?: Maybe<String>;
  visitReportDocumentNo_not_ends_with?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo_not?: Maybe<String>;
  incidentReportDocumentNo_in?: Maybe<String[] | String>;
  incidentReportDocumentNo_not_in?: Maybe<String[] | String>;
  incidentReportDocumentNo_lt?: Maybe<String>;
  incidentReportDocumentNo_lte?: Maybe<String>;
  incidentReportDocumentNo_gt?: Maybe<String>;
  incidentReportDocumentNo_gte?: Maybe<String>;
  incidentReportDocumentNo_contains?: Maybe<String>;
  incidentReportDocumentNo_not_contains?: Maybe<String>;
  incidentReportDocumentNo_starts_with?: Maybe<String>;
  incidentReportDocumentNo_not_starts_with?: Maybe<String>;
  incidentReportDocumentNo_ends_with?: Maybe<String>;
  incidentReportDocumentNo_not_ends_with?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  deviationFormDocumentNo_not?: Maybe<String>;
  deviationFormDocumentNo_in?: Maybe<String[] | String>;
  deviationFormDocumentNo_not_in?: Maybe<String[] | String>;
  deviationFormDocumentNo_lt?: Maybe<String>;
  deviationFormDocumentNo_lte?: Maybe<String>;
  deviationFormDocumentNo_gt?: Maybe<String>;
  deviationFormDocumentNo_gte?: Maybe<String>;
  deviationFormDocumentNo_contains?: Maybe<String>;
  deviationFormDocumentNo_not_contains?: Maybe<String>;
  deviationFormDocumentNo_starts_with?: Maybe<String>;
  deviationFormDocumentNo_not_starts_with?: Maybe<String>;
  deviationFormDocumentNo_ends_with?: Maybe<String>;
  deviationFormDocumentNo_not_ends_with?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  qualityMeasurementDocumentUrl_not?: Maybe<String>;
  qualityMeasurementDocumentUrl_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentUrl_not_in?: Maybe<String[] | String>;
  qualityMeasurementDocumentUrl_lt?: Maybe<String>;
  qualityMeasurementDocumentUrl_lte?: Maybe<String>;
  qualityMeasurementDocumentUrl_gt?: Maybe<String>;
  qualityMeasurementDocumentUrl_gte?: Maybe<String>;
  qualityMeasurementDocumentUrl_contains?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_contains?: Maybe<String>;
  qualityMeasurementDocumentUrl_starts_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_starts_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_ends_with?: Maybe<String>;
  qualityMeasurementDocumentUrl_not_ends_with?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl_not?: Maybe<String>;
  progressReportDocumentUrl_in?: Maybe<String[] | String>;
  progressReportDocumentUrl_not_in?: Maybe<String[] | String>;
  progressReportDocumentUrl_lt?: Maybe<String>;
  progressReportDocumentUrl_lte?: Maybe<String>;
  progressReportDocumentUrl_gt?: Maybe<String>;
  progressReportDocumentUrl_gte?: Maybe<String>;
  progressReportDocumentUrl_contains?: Maybe<String>;
  progressReportDocumentUrl_not_contains?: Maybe<String>;
  progressReportDocumentUrl_starts_with?: Maybe<String>;
  progressReportDocumentUrl_not_starts_with?: Maybe<String>;
  progressReportDocumentUrl_ends_with?: Maybe<String>;
  progressReportDocumentUrl_not_ends_with?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl_not?: Maybe<String>;
  deliveryReportDocumentUrl_in?: Maybe<String[] | String>;
  deliveryReportDocumentUrl_not_in?: Maybe<String[] | String>;
  deliveryReportDocumentUrl_lt?: Maybe<String>;
  deliveryReportDocumentUrl_lte?: Maybe<String>;
  deliveryReportDocumentUrl_gt?: Maybe<String>;
  deliveryReportDocumentUrl_gte?: Maybe<String>;
  deliveryReportDocumentUrl_contains?: Maybe<String>;
  deliveryReportDocumentUrl_not_contains?: Maybe<String>;
  deliveryReportDocumentUrl_starts_with?: Maybe<String>;
  deliveryReportDocumentUrl_not_starts_with?: Maybe<String>;
  deliveryReportDocumentUrl_ends_with?: Maybe<String>;
  deliveryReportDocumentUrl_not_ends_with?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl_not?: Maybe<String>;
  visitReportDocumentUrl_in?: Maybe<String[] | String>;
  visitReportDocumentUrl_not_in?: Maybe<String[] | String>;
  visitReportDocumentUrl_lt?: Maybe<String>;
  visitReportDocumentUrl_lte?: Maybe<String>;
  visitReportDocumentUrl_gt?: Maybe<String>;
  visitReportDocumentUrl_gte?: Maybe<String>;
  visitReportDocumentUrl_contains?: Maybe<String>;
  visitReportDocumentUrl_not_contains?: Maybe<String>;
  visitReportDocumentUrl_starts_with?: Maybe<String>;
  visitReportDocumentUrl_not_starts_with?: Maybe<String>;
  visitReportDocumentUrl_ends_with?: Maybe<String>;
  visitReportDocumentUrl_not_ends_with?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl_not?: Maybe<String>;
  incidentReportDocumentUrl_in?: Maybe<String[] | String>;
  incidentReportDocumentUrl_not_in?: Maybe<String[] | String>;
  incidentReportDocumentUrl_lt?: Maybe<String>;
  incidentReportDocumentUrl_lte?: Maybe<String>;
  incidentReportDocumentUrl_gt?: Maybe<String>;
  incidentReportDocumentUrl_gte?: Maybe<String>;
  incidentReportDocumentUrl_contains?: Maybe<String>;
  incidentReportDocumentUrl_not_contains?: Maybe<String>;
  incidentReportDocumentUrl_starts_with?: Maybe<String>;
  incidentReportDocumentUrl_not_starts_with?: Maybe<String>;
  incidentReportDocumentUrl_ends_with?: Maybe<String>;
  incidentReportDocumentUrl_not_ends_with?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl_not?: Maybe<String>;
  deviationFormDocumentUrl_in?: Maybe<String[] | String>;
  deviationFormDocumentUrl_not_in?: Maybe<String[] | String>;
  deviationFormDocumentUrl_lt?: Maybe<String>;
  deviationFormDocumentUrl_lte?: Maybe<String>;
  deviationFormDocumentUrl_gt?: Maybe<String>;
  deviationFormDocumentUrl_gte?: Maybe<String>;
  deviationFormDocumentUrl_contains?: Maybe<String>;
  deviationFormDocumentUrl_not_contains?: Maybe<String>;
  deviationFormDocumentUrl_starts_with?: Maybe<String>;
  deviationFormDocumentUrl_not_starts_with?: Maybe<String>;
  deviationFormDocumentUrl_ends_with?: Maybe<String>;
  deviationFormDocumentUrl_not_ends_with?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  isMainProject_not?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedStartDate_not?: Maybe<String>;
  expectedStartDate_in?: Maybe<String[] | String>;
  expectedStartDate_not_in?: Maybe<String[] | String>;
  expectedStartDate_lt?: Maybe<String>;
  expectedStartDate_lte?: Maybe<String>;
  expectedStartDate_gt?: Maybe<String>;
  expectedStartDate_gte?: Maybe<String>;
  expectedStartDate_contains?: Maybe<String>;
  expectedStartDate_not_contains?: Maybe<String>;
  expectedStartDate_starts_with?: Maybe<String>;
  expectedStartDate_not_starts_with?: Maybe<String>;
  expectedStartDate_ends_with?: Maybe<String>;
  expectedStartDate_not_ends_with?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  expectedEndDate_not?: Maybe<String>;
  expectedEndDate_in?: Maybe<String[] | String>;
  expectedEndDate_not_in?: Maybe<String[] | String>;
  expectedEndDate_lt?: Maybe<String>;
  expectedEndDate_lte?: Maybe<String>;
  expectedEndDate_gt?: Maybe<String>;
  expectedEndDate_gte?: Maybe<String>;
  expectedEndDate_contains?: Maybe<String>;
  expectedEndDate_not_contains?: Maybe<String>;
  expectedEndDate_starts_with?: Maybe<String>;
  expectedEndDate_not_starts_with?: Maybe<String>;
  expectedEndDate_ends_with?: Maybe<String>;
  expectedEndDate_not_ends_with?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  budgetHours_not?: Maybe<Int>;
  budgetHours_in?: Maybe<Int[] | Int>;
  budgetHours_not_in?: Maybe<Int[] | Int>;
  budgetHours_lt?: Maybe<Int>;
  budgetHours_lte?: Maybe<Int>;
  budgetHours_gt?: Maybe<Int>;
  budgetHours_gte?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfDays_not?: Maybe<Int>;
  numberOfDays_in?: Maybe<Int[] | Int>;
  numberOfDays_not_in?: Maybe<Int[] | Int>;
  numberOfDays_lt?: Maybe<Int>;
  numberOfDays_lte?: Maybe<Int>;
  numberOfDays_gt?: Maybe<Int>;
  numberOfDays_gte?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  numberOfHourlyWorkBudget_not?: Maybe<Int>;
  numberOfHourlyWorkBudget_in?: Maybe<Int[] | Int>;
  numberOfHourlyWorkBudget_not_in?: Maybe<Int[] | Int>;
  numberOfHourlyWorkBudget_lt?: Maybe<Int>;
  numberOfHourlyWorkBudget_lte?: Maybe<Int>;
  numberOfHourlyWorkBudget_gt?: Maybe<Int>;
  numberOfHourlyWorkBudget_gte?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  subcontractorName_not?: Maybe<String>;
  subcontractorName_in?: Maybe<String[] | String>;
  subcontractorName_not_in?: Maybe<String[] | String>;
  subcontractorName_lt?: Maybe<String>;
  subcontractorName_lte?: Maybe<String>;
  subcontractorName_gt?: Maybe<String>;
  subcontractorName_gte?: Maybe<String>;
  subcontractorName_contains?: Maybe<String>;
  subcontractorName_not_contains?: Maybe<String>;
  subcontractorName_starts_with?: Maybe<String>;
  subcontractorName_not_starts_with?: Maybe<String>;
  subcontractorName_ends_with?: Maybe<String>;
  subcontractorName_not_ends_with?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectMemo_not?: Maybe<String>;
  projectMemo_in?: Maybe<String[] | String>;
  projectMemo_not_in?: Maybe<String[] | String>;
  projectMemo_lt?: Maybe<String>;
  projectMemo_lte?: Maybe<String>;
  projectMemo_gt?: Maybe<String>;
  projectMemo_gte?: Maybe<String>;
  projectMemo_contains?: Maybe<String>;
  projectMemo_not_contains?: Maybe<String>;
  projectMemo_starts_with?: Maybe<String>;
  projectMemo_not_starts_with?: Maybe<String>;
  projectMemo_ends_with?: Maybe<String>;
  projectMemo_not_ends_with?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  projectType_not?: Maybe<ProjectType>;
  projectType_in?: Maybe<ProjectType[] | ProjectType>;
  projectType_not_in?: Maybe<ProjectType[] | ProjectType>;
  postalCode?: Maybe<String>;
  postalCode_not?: Maybe<String>;
  postalCode_in?: Maybe<String[] | String>;
  postalCode_not_in?: Maybe<String[] | String>;
  postalCode_lt?: Maybe<String>;
  postalCode_lte?: Maybe<String>;
  postalCode_gt?: Maybe<String>;
  postalCode_gte?: Maybe<String>;
  postalCode_contains?: Maybe<String>;
  postalCode_not_contains?: Maybe<String>;
  postalCode_starts_with?: Maybe<String>;
  postalCode_not_starts_with?: Maybe<String>;
  postalCode_ends_with?: Maybe<String>;
  postalCode_not_ends_with?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  salesPersonCode_not?: Maybe<String>;
  salesPersonCode_in?: Maybe<String[] | String>;
  salesPersonCode_not_in?: Maybe<String[] | String>;
  salesPersonCode_lt?: Maybe<String>;
  salesPersonCode_lte?: Maybe<String>;
  salesPersonCode_gt?: Maybe<String>;
  salesPersonCode_gte?: Maybe<String>;
  salesPersonCode_contains?: Maybe<String>;
  salesPersonCode_not_contains?: Maybe<String>;
  salesPersonCode_starts_with?: Maybe<String>;
  salesPersonCode_not_starts_with?: Maybe<String>;
  salesPersonCode_ends_with?: Maybe<String>;
  salesPersonCode_not_ends_with?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  estimatorCode_not?: Maybe<String>;
  estimatorCode_in?: Maybe<String[] | String>;
  estimatorCode_not_in?: Maybe<String[] | String>;
  estimatorCode_lt?: Maybe<String>;
  estimatorCode_lte?: Maybe<String>;
  estimatorCode_gt?: Maybe<String>;
  estimatorCode_gte?: Maybe<String>;
  estimatorCode_contains?: Maybe<String>;
  estimatorCode_not_contains?: Maybe<String>;
  estimatorCode_starts_with?: Maybe<String>;
  estimatorCode_not_starts_with?: Maybe<String>;
  estimatorCode_ends_with?: Maybe<String>;
  estimatorCode_not_ends_with?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  projectManagerCode_not?: Maybe<String>;
  projectManagerCode_in?: Maybe<String[] | String>;
  projectManagerCode_not_in?: Maybe<String[] | String>;
  projectManagerCode_lt?: Maybe<String>;
  projectManagerCode_lte?: Maybe<String>;
  projectManagerCode_gt?: Maybe<String>;
  projectManagerCode_gte?: Maybe<String>;
  projectManagerCode_contains?: Maybe<String>;
  projectManagerCode_not_contains?: Maybe<String>;
  projectManagerCode_starts_with?: Maybe<String>;
  projectManagerCode_not_starts_with?: Maybe<String>;
  projectManagerCode_ends_with?: Maybe<String>;
  projectManagerCode_not_ends_with?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  siteManagerCode_not?: Maybe<String>;
  siteManagerCode_in?: Maybe<String[] | String>;
  siteManagerCode_not_in?: Maybe<String[] | String>;
  siteManagerCode_lt?: Maybe<String>;
  siteManagerCode_lte?: Maybe<String>;
  siteManagerCode_gt?: Maybe<String>;
  siteManagerCode_gte?: Maybe<String>;
  siteManagerCode_contains?: Maybe<String>;
  siteManagerCode_not_contains?: Maybe<String>;
  siteManagerCode_starts_with?: Maybe<String>;
  siteManagerCode_not_starts_with?: Maybe<String>;
  siteManagerCode_ends_with?: Maybe<String>;
  siteManagerCode_not_ends_with?: Maybe<String>;
  team?: Maybe<String>;
  team_not?: Maybe<String>;
  team_in?: Maybe<String[] | String>;
  team_not_in?: Maybe<String[] | String>;
  team_lt?: Maybe<String>;
  team_lte?: Maybe<String>;
  team_gt?: Maybe<String>;
  team_gte?: Maybe<String>;
  team_contains?: Maybe<String>;
  team_not_contains?: Maybe<String>;
  team_starts_with?: Maybe<String>;
  team_not_starts_with?: Maybe<String>;
  team_ends_with?: Maybe<String>;
  team_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  statusModificationDate_not?: Maybe<String>;
  statusModificationDate_in?: Maybe<String[] | String>;
  statusModificationDate_not_in?: Maybe<String[] | String>;
  statusModificationDate_lt?: Maybe<String>;
  statusModificationDate_lte?: Maybe<String>;
  statusModificationDate_gt?: Maybe<String>;
  statusModificationDate_gte?: Maybe<String>;
  statusModificationDate_contains?: Maybe<String>;
  statusModificationDate_not_contains?: Maybe<String>;
  statusModificationDate_starts_with?: Maybe<String>;
  statusModificationDate_not_starts_with?: Maybe<String>;
  statusModificationDate_ends_with?: Maybe<String>;
  statusModificationDate_not_ends_with?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  billToCustomerNo_not?: Maybe<String>;
  billToCustomerNo_in?: Maybe<String[] | String>;
  billToCustomerNo_not_in?: Maybe<String[] | String>;
  billToCustomerNo_lt?: Maybe<String>;
  billToCustomerNo_lte?: Maybe<String>;
  billToCustomerNo_gt?: Maybe<String>;
  billToCustomerNo_gte?: Maybe<String>;
  billToCustomerNo_contains?: Maybe<String>;
  billToCustomerNo_not_contains?: Maybe<String>;
  billToCustomerNo_starts_with?: Maybe<String>;
  billToCustomerNo_not_starts_with?: Maybe<String>;
  billToCustomerNo_ends_with?: Maybe<String>;
  billToCustomerNo_not_ends_with?: Maybe<String>;
  commissionDate?: Maybe<String>;
  commissionDate_not?: Maybe<String>;
  commissionDate_in?: Maybe<String[] | String>;
  commissionDate_not_in?: Maybe<String[] | String>;
  commissionDate_lt?: Maybe<String>;
  commissionDate_lte?: Maybe<String>;
  commissionDate_gt?: Maybe<String>;
  commissionDate_gte?: Maybe<String>;
  commissionDate_contains?: Maybe<String>;
  commissionDate_not_contains?: Maybe<String>;
  commissionDate_starts_with?: Maybe<String>;
  commissionDate_not_starts_with?: Maybe<String>;
  commissionDate_ends_with?: Maybe<String>;
  commissionDate_not_ends_with?: Maybe<String>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  warrantyEndDate_not?: Maybe<String>;
  warrantyEndDate_in?: Maybe<String[] | String>;
  warrantyEndDate_not_in?: Maybe<String[] | String>;
  warrantyEndDate_lt?: Maybe<String>;
  warrantyEndDate_lte?: Maybe<String>;
  warrantyEndDate_gt?: Maybe<String>;
  warrantyEndDate_gte?: Maybe<String>;
  warrantyEndDate_contains?: Maybe<String>;
  warrantyEndDate_not_contains?: Maybe<String>;
  warrantyEndDate_starts_with?: Maybe<String>;
  warrantyEndDate_not_starts_with?: Maybe<String>;
  warrantyEndDate_ends_with?: Maybe<String>;
  warrantyEndDate_not_ends_with?: Maybe<String>;
  workType?: Maybe<String>;
  workType_not?: Maybe<String>;
  workType_in?: Maybe<String[] | String>;
  workType_not_in?: Maybe<String[] | String>;
  workType_lt?: Maybe<String>;
  workType_lte?: Maybe<String>;
  workType_gt?: Maybe<String>;
  workType_gte?: Maybe<String>;
  workType_contains?: Maybe<String>;
  workType_not_contains?: Maybe<String>;
  workType_starts_with?: Maybe<String>;
  workType_not_starts_with?: Maybe<String>;
  workType_ends_with?: Maybe<String>;
  workType_not_ends_with?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  roofingPartnerName_not?: Maybe<String>;
  roofingPartnerName_in?: Maybe<String[] | String>;
  roofingPartnerName_not_in?: Maybe<String[] | String>;
  roofingPartnerName_lt?: Maybe<String>;
  roofingPartnerName_lte?: Maybe<String>;
  roofingPartnerName_gt?: Maybe<String>;
  roofingPartnerName_gte?: Maybe<String>;
  roofingPartnerName_contains?: Maybe<String>;
  roofingPartnerName_not_contains?: Maybe<String>;
  roofingPartnerName_starts_with?: Maybe<String>;
  roofingPartnerName_not_starts_with?: Maybe<String>;
  roofingPartnerName_ends_with?: Maybe<String>;
  roofingPartnerName_not_ends_with?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
  isAppProject_not?: Maybe<Boolean>;
  AND?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  OR?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  NOT?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectUpdateManyDataInput {
  projectNumber?: Maybe<String>;
  location?: Maybe<String>;
  employeeCode?: Maybe<String>;
  ownerCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  mainProject?: Maybe<String>;
  description?: Maybe<String>;
  contractValue?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  postalCode?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  team?: Maybe<String>;
  status?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  commissionDate?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  workType?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
}

export interface ProjectUpdateManyMutationInput {
  projectNumber?: Maybe<String>;
  location?: Maybe<String>;
  employeeCode?: Maybe<String>;
  ownerCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  mainProject?: Maybe<String>;
  description?: Maybe<String>;
  contractValue?: Maybe<Float>;
  additionalTotalAmount?: Maybe<Float>;
  percentageDone?: Maybe<Int>;
  percentageDoneDate?: Maybe<String>;
  percentageDoneMinValue?: Maybe<Int>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  complexExists?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  complexPhotoNo?: Maybe<String>;
  complexPhotoUrl?: Maybe<String>;
  amountSpent?: Maybe<Float>;
  spentVsBudgetted?: Maybe<Int>;
  amountOnReceipt?: Maybe<Float>;
  receiptIsNecessary?: Maybe<Boolean>;
  invoiced?: Maybe<Float>;
  qualityMeasurementIsNecessary?: Maybe<ReportIsNecessary>;
  progressReportIsNecessary?: Maybe<ReportIsNecessary>;
  deliveryReportIsNecessary?: Maybe<ReportIsNecessary>;
  qualityMeasurementIsComplete?: Maybe<Boolean>;
  progressReportIsComplete?: Maybe<Boolean>;
  deliveryReportIsComplete?: Maybe<Boolean>;
  additionalWorkDescription1?: Maybe<String>;
  additionalWorkAmount1?: Maybe<Float>;
  additionalWorkDescription2?: Maybe<String>;
  additionalWorkAmount2?: Maybe<Float>;
  additionalWorkDescription3?: Maybe<String>;
  additionalWorkAmount3?: Maybe<Float>;
  additionalWorkDescription4?: Maybe<String>;
  additionalWorkAmount4?: Maybe<Float>;
  additionalWorkDescription5?: Maybe<String>;
  additionalWorkAmount5?: Maybe<Float>;
  additionalWorkDescription6?: Maybe<String>;
  additionalWorkAmount6?: Maybe<Float>;
  qualityMeasurementDocumentNo?: Maybe<String>;
  progressReportDocumentNo?: Maybe<String>;
  deliveryReportDocumentNo?: Maybe<String>;
  visitReportDocumentNo?: Maybe<String>;
  incidentReportDocumentNo?: Maybe<String>;
  deviationFormDocumentNo?: Maybe<String>;
  qualityMeasurementDocumentUrl?: Maybe<String>;
  progressReportDocumentUrl?: Maybe<String>;
  deliveryReportDocumentUrl?: Maybe<String>;
  visitReportDocumentUrl?: Maybe<String>;
  incidentReportDocumentUrl?: Maybe<String>;
  deviationFormDocumentUrl?: Maybe<String>;
  isMainProject?: Maybe<Boolean>;
  expectedStartDate?: Maybe<String>;
  expectedEndDate?: Maybe<String>;
  budgetHours?: Maybe<Int>;
  numberOfDays?: Maybe<Int>;
  numberOfHourlyWorkBudget?: Maybe<Int>;
  subcontractorName?: Maybe<String>;
  projectMemo?: Maybe<String>;
  projectType?: Maybe<ProjectType>;
  postalCode?: Maybe<String>;
  salesPersonCode?: Maybe<String>;
  estimatorCode?: Maybe<String>;
  projectManagerCode?: Maybe<String>;
  siteManagerCode?: Maybe<String>;
  team?: Maybe<String>;
  status?: Maybe<String>;
  statusModificationDate?: Maybe<String>;
  billToCustomerNo?: Maybe<String>;
  commissionDate?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  warrantyEndDate?: Maybe<String>;
  workType?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  isAppProject?: Maybe<Boolean>;
}

export interface ReporterUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  onBehalfOf?: Maybe<String>;
  type?: Maybe<ReporterType>;
  reference?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  workText?: Maybe<String>;
  internalText?: Maybe<String>;
  adviceText?: Maybe<String>;
  description?: Maybe<String>;
  isTrackAndTraceActive?: Maybe<Boolean>;
}

export interface ReporterUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  surname?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  onBehalfOf?: Maybe<String>;
  type?: Maybe<ReporterType>;
  reference?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  workText?: Maybe<String>;
  internalText?: Maybe<String>;
  adviceText?: Maybe<String>;
  description?: Maybe<String>;
  isTrackAndTraceActive?: Maybe<Boolean>;
}

export interface ServiceAppointmentCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentCreateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceContract?: Maybe<
    ServiceContractCreateOneWithoutServiceAppointmentsInput
  >;
  serviceOrders?: Maybe<ServiceOrderCreateManyWithoutServiceAppointmentInput>;
}

export interface ServiceOrderCreateManyWithoutServiceAppointmentInput {
  create?: Maybe<
    | ServiceOrderCreateWithoutServiceAppointmentInput[]
    | ServiceOrderCreateWithoutServiceAppointmentInput
  >;
  connect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
}

export interface ServiceOrderCreateWithoutServiceAppointmentInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceAppointmentUpdateInput {
  code?: Maybe<String>;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentUpdateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceContract?: Maybe<
    ServiceContractUpdateOneWithoutServiceAppointmentsInput
  >;
  serviceOrders?: Maybe<ServiceOrderUpdateManyWithoutServiceAppointmentInput>;
}

export interface ServiceOrderUpdateManyWithoutServiceAppointmentInput {
  create?: Maybe<
    | ServiceOrderCreateWithoutServiceAppointmentInput[]
    | ServiceOrderCreateWithoutServiceAppointmentInput
  >;
  delete?: Maybe<ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput>;
  connect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
  set?: Maybe<ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput>;
  disconnect?: Maybe<
    ServiceOrderWhereUniqueInput[] | ServiceOrderWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceOrderUpdateWithWhereUniqueWithoutServiceAppointmentInput[]
    | ServiceOrderUpdateWithWhereUniqueWithoutServiceAppointmentInput
  >;
  upsert?: Maybe<
    | ServiceOrderUpsertWithWhereUniqueWithoutServiceAppointmentInput[]
    | ServiceOrderUpsertWithWhereUniqueWithoutServiceAppointmentInput
  >;
  deleteMany?: Maybe<
    ServiceOrderScalarWhereInput[] | ServiceOrderScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceOrderUpdateManyWithWhereNestedInput[]
    | ServiceOrderUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceOrderUpdateWithWhereUniqueWithoutServiceAppointmentInput {
  where: ServiceOrderWhereUniqueInput;
  data: ServiceOrderUpdateWithoutServiceAppointmentDataInput;
}

export interface ServiceOrderUpdateWithoutServiceAppointmentDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithWhereUniqueWithoutServiceAppointmentInput {
  where: ServiceOrderWhereUniqueInput;
  update: ServiceOrderUpdateWithoutServiceAppointmentDataInput;
  create: ServiceOrderCreateWithoutServiceAppointmentInput;
}

export interface ServiceAppointmentUpdateManyMutationInput {
  code?: Maybe<String>;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentUpdateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
}

export interface ServiceContractCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractCreatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  ServiceAppointments?: Maybe<
    ServiceAppointmentCreateManyWithoutServiceContractInput
  >;
  serviceOrders?: Maybe<ServiceOrderCreateManyInput>;
}

export interface ServiceAppointmentCreateManyWithoutServiceContractInput {
  create?: Maybe<
    | ServiceAppointmentCreateWithoutServiceContractInput[]
    | ServiceAppointmentCreateWithoutServiceContractInput
  >;
  connect?: Maybe<
    ServiceAppointmentWhereUniqueInput[] | ServiceAppointmentWhereUniqueInput
  >;
}

export interface ServiceAppointmentCreateWithoutServiceContractInput {
  id?: Maybe<ID_Input>;
  code: String;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentCreateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceOrders?: Maybe<ServiceOrderCreateManyWithoutServiceAppointmentInput>;
}

export interface ServiceContractUpdateInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractUpdatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  ServiceAppointments?: Maybe<
    ServiceAppointmentUpdateManyWithoutServiceContractInput
  >;
  serviceOrders?: Maybe<ServiceOrderUpdateManyInput>;
}

export interface ServiceAppointmentUpdateManyWithoutServiceContractInput {
  create?: Maybe<
    | ServiceAppointmentCreateWithoutServiceContractInput[]
    | ServiceAppointmentCreateWithoutServiceContractInput
  >;
  delete?: Maybe<
    ServiceAppointmentWhereUniqueInput[] | ServiceAppointmentWhereUniqueInput
  >;
  connect?: Maybe<
    ServiceAppointmentWhereUniqueInput[] | ServiceAppointmentWhereUniqueInput
  >;
  set?: Maybe<
    ServiceAppointmentWhereUniqueInput[] | ServiceAppointmentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ServiceAppointmentWhereUniqueInput[] | ServiceAppointmentWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceAppointmentUpdateWithWhereUniqueWithoutServiceContractInput[]
    | ServiceAppointmentUpdateWithWhereUniqueWithoutServiceContractInput
  >;
  upsert?: Maybe<
    | ServiceAppointmentUpsertWithWhereUniqueWithoutServiceContractInput[]
    | ServiceAppointmentUpsertWithWhereUniqueWithoutServiceContractInput
  >;
  deleteMany?: Maybe<
    ServiceAppointmentScalarWhereInput[] | ServiceAppointmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceAppointmentUpdateManyWithWhereNestedInput[]
    | ServiceAppointmentUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceAppointmentUpdateWithWhereUniqueWithoutServiceContractInput {
  where: ServiceAppointmentWhereUniqueInput;
  data: ServiceAppointmentUpdateWithoutServiceContractDataInput;
}

export interface ServiceAppointmentUpdateWithoutServiceContractDataInput {
  code?: Maybe<String>;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentUpdateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  serviceOrders?: Maybe<ServiceOrderUpdateManyWithoutServiceAppointmentInput>;
}

export interface ServiceAppointmentUpsertWithWhereUniqueWithoutServiceContractInput {
  where: ServiceAppointmentWhereUniqueInput;
  update: ServiceAppointmentUpdateWithoutServiceContractDataInput;
  create: ServiceAppointmentCreateWithoutServiceContractInput;
}

export interface ServiceAppointmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  orderType?: Maybe<String>;
  orderType_not?: Maybe<String>;
  orderType_in?: Maybe<String[] | String>;
  orderType_not_in?: Maybe<String[] | String>;
  orderType_lt?: Maybe<String>;
  orderType_lte?: Maybe<String>;
  orderType_gt?: Maybe<String>;
  orderType_gte?: Maybe<String>;
  orderType_contains?: Maybe<String>;
  orderType_not_contains?: Maybe<String>;
  orderType_starts_with?: Maybe<String>;
  orderType_not_starts_with?: Maybe<String>;
  orderType_ends_with?: Maybe<String>;
  orderType_not_ends_with?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderDate_not?: Maybe<String>;
  orderDate_in?: Maybe<String[] | String>;
  orderDate_not_in?: Maybe<String[] | String>;
  orderDate_lt?: Maybe<String>;
  orderDate_lte?: Maybe<String>;
  orderDate_gt?: Maybe<String>;
  orderDate_gte?: Maybe<String>;
  orderDate_contains?: Maybe<String>;
  orderDate_not_contains?: Maybe<String>;
  orderDate_starts_with?: Maybe<String>;
  orderDate_not_starts_with?: Maybe<String>;
  orderDate_ends_with?: Maybe<String>;
  orderDate_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  isLocked_not?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  lockedBy_not?: Maybe<String>;
  lockedBy_in?: Maybe<String[] | String>;
  lockedBy_not_in?: Maybe<String[] | String>;
  lockedBy_lt?: Maybe<String>;
  lockedBy_lte?: Maybe<String>;
  lockedBy_gt?: Maybe<String>;
  lockedBy_gte?: Maybe<String>;
  lockedBy_contains?: Maybe<String>;
  lockedBy_not_contains?: Maybe<String>;
  lockedBy_starts_with?: Maybe<String>;
  lockedBy_not_starts_with?: Maybe<String>;
  lockedBy_ends_with?: Maybe<String>;
  lockedBy_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ServiceAppointmentScalarWhereInput[] | ServiceAppointmentScalarWhereInput
  >;
  OR?: Maybe<
    ServiceAppointmentScalarWhereInput[] | ServiceAppointmentScalarWhereInput
  >;
  NOT?: Maybe<
    ServiceAppointmentScalarWhereInput[] | ServiceAppointmentScalarWhereInput
  >;
}

export interface ServiceAppointmentUpdateManyWithWhereNestedInput {
  where: ServiceAppointmentScalarWhereInput;
  data: ServiceAppointmentUpdateManyDataInput;
}

export interface ServiceAppointmentUpdateManyDataInput {
  code?: Maybe<String>;
  orderType?: Maybe<String>;
  orderDate?: Maybe<String>;
  status?: Maybe<String>;
  roofCodes?: Maybe<ServiceAppointmentUpdateroofCodesInput>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
}

export interface ServiceContractUpdateManyMutationInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractUpdatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
}

export interface ServiceContractEstimationCreateInput {
  id?: Maybe<ID_Input>;
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  serviceContractIndex?: Maybe<
    ServiceContractIndexCreateOneWithoutEstimationsInput
  >;
  serviceContract?: Maybe<ServiceContractCreateOneInput>;
}

export interface ServiceContractIndexCreateOneWithoutEstimationsInput {
  create?: Maybe<ServiceContractIndexCreateWithoutEstimationsInput>;
  connect?: Maybe<ServiceContractIndexWhereUniqueInput>;
}

export interface ServiceContractIndexCreateWithoutEstimationsInput {
  id?: Maybe<ID_Input>;
  indexMethod?: Maybe<ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexFigure?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractAmount?: Maybe<String>;
}

export interface ServiceContractCreateOneInput {
  create?: Maybe<ServiceContractCreateInput>;
  connect?: Maybe<ServiceContractWhereUniqueInput>;
}

export interface ServiceContractEstimationUpdateInput {
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  serviceContractIndex?: Maybe<
    ServiceContractIndexUpdateOneWithoutEstimationsInput
  >;
  serviceContract?: Maybe<ServiceContractUpdateOneInput>;
}

export interface ServiceContractIndexUpdateOneWithoutEstimationsInput {
  create?: Maybe<ServiceContractIndexCreateWithoutEstimationsInput>;
  update?: Maybe<ServiceContractIndexUpdateWithoutEstimationsDataInput>;
  upsert?: Maybe<ServiceContractIndexUpsertWithoutEstimationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceContractIndexWhereUniqueInput>;
}

export interface ServiceContractIndexUpdateWithoutEstimationsDataInput {
  indexMethod?: Maybe<ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexFigure?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractAmount?: Maybe<String>;
}

export interface ServiceContractIndexUpsertWithoutEstimationsInput {
  update: ServiceContractIndexUpdateWithoutEstimationsDataInput;
  create: ServiceContractIndexCreateWithoutEstimationsInput;
}

export interface ServiceContractUpdateOneInput {
  create?: Maybe<ServiceContractCreateInput>;
  update?: Maybe<ServiceContractUpdateDataInput>;
  upsert?: Maybe<ServiceContractUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceContractWhereUniqueInput>;
}

export interface ServiceContractUpdateDataInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  roofAddress?: Maybe<String>;
  roofCity?: Maybe<String>;
  status?: Maybe<ContractStatus>;
  orderDate?: Maybe<String>;
  startingDate?: Maybe<String>;
  endingDate?: Maybe<String>;
  terminationDate?: Maybe<String>;
  customerCode?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonCodes?: Maybe<ServiceContractUpdatecontactPersonCodesInput>;
  name?: Maybe<String>;
  name2?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  contactName?: Maybe<String>;
  phoneNo?: Maybe<String>;
  email?: Maybe<String>;
  billToCustomerNoContr?: Maybe<String>;
  billToNameContract?: Maybe<String>;
  billToAddressContract?: Maybe<String>;
  billToPostCodeContract?: Maybe<String>;
  billToCityContract?: Maybe<String>;
  billToContactPersonContr?: Maybe<String>;
  billToContPersNameCtr?: Maybe<String>;
  globalDimension1Code?: Maybe<String>;
  initialSalesAmount?: Maybe<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Maybe<Float>;
  lastIndexDate?: Maybe<String>;
  contractManager?: Maybe<String>;
  contractManagerName?: Maybe<String>;
  yourReference?: Maybe<String>;
  blocked?: Maybe<Boolean>;
  firstYearMaintenance?: Maybe<Int>;
  maintenanceMonth?: Maybe<Int>;
  acknowledgedSO?: Maybe<Int>;
  createdSO?: Maybe<Int>;
  openedSO?: Maybe<Int>;
  readySO?: Maybe<Int>;
  percentageReady?: Maybe<Int>;
  workingHours?: Maybe<Float>;
  spendHours?: Maybe<Float>;
  hoursSpentLastYear?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  invoicedUntil?: Maybe<String>;
  m2Dak?: Maybe<Float>;
  m2DakReady?: Maybe<Float>;
  m2DakReadyPercent?: Maybe<String>;
  reportDocument?: Maybe<String>;
  installmentsBasedOnProgress?: Maybe<Boolean>;
  invoiceType?: Maybe<ContractInvoiceType>;
  installmentType?: Maybe<ContractInstallmentType>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  currencyCode?: Maybe<String>;
  serviceIndexMethod?: Maybe<String>;
  invoiceTextInstallments?: Maybe<String>;
  outsourced?: Maybe<Boolean>;
  lastExecutedBy?: Maybe<String>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  ServiceAppointments?: Maybe<
    ServiceAppointmentUpdateManyWithoutServiceContractInput
  >;
  serviceOrders?: Maybe<ServiceOrderUpdateManyInput>;
}

export interface ServiceContractUpsertNestedInput {
  update: ServiceContractUpdateDataInput;
  create: ServiceContractCreateInput;
}

export interface ServiceContractEstimationUpdateManyMutationInput {
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
}

export interface ServiceContractIndexCreateInput {
  id?: Maybe<ID_Input>;
  indexMethod?: Maybe<ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexFigure?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractAmount?: Maybe<String>;
  estimations?: Maybe<
    ServiceContractEstimationCreateManyWithoutServiceContractIndexInput
  >;
}

export interface ServiceContractEstimationCreateManyWithoutServiceContractIndexInput {
  create?: Maybe<
    | ServiceContractEstimationCreateWithoutServiceContractIndexInput[]
    | ServiceContractEstimationCreateWithoutServiceContractIndexInput
  >;
  connect?: Maybe<
    | ServiceContractEstimationWhereUniqueInput[]
    | ServiceContractEstimationWhereUniqueInput
  >;
}

export interface ServiceContractEstimationCreateWithoutServiceContractIndexInput {
  id?: Maybe<ID_Input>;
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  serviceContract?: Maybe<ServiceContractCreateOneInput>;
}

export interface ServiceContractIndexUpdateInput {
  indexMethod?: Maybe<ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexFigure?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractAmount?: Maybe<String>;
  estimations?: Maybe<
    ServiceContractEstimationUpdateManyWithoutServiceContractIndexInput
  >;
}

export interface ServiceContractEstimationUpdateManyWithoutServiceContractIndexInput {
  create?: Maybe<
    | ServiceContractEstimationCreateWithoutServiceContractIndexInput[]
    | ServiceContractEstimationCreateWithoutServiceContractIndexInput
  >;
  delete?: Maybe<
    | ServiceContractEstimationWhereUniqueInput[]
    | ServiceContractEstimationWhereUniqueInput
  >;
  connect?: Maybe<
    | ServiceContractEstimationWhereUniqueInput[]
    | ServiceContractEstimationWhereUniqueInput
  >;
  set?: Maybe<
    | ServiceContractEstimationWhereUniqueInput[]
    | ServiceContractEstimationWhereUniqueInput
  >;
  disconnect?: Maybe<
    | ServiceContractEstimationWhereUniqueInput[]
    | ServiceContractEstimationWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceContractEstimationUpdateWithWhereUniqueWithoutServiceContractIndexInput[]
    | ServiceContractEstimationUpdateWithWhereUniqueWithoutServiceContractIndexInput
  >;
  upsert?: Maybe<
    | ServiceContractEstimationUpsertWithWhereUniqueWithoutServiceContractIndexInput[]
    | ServiceContractEstimationUpsertWithWhereUniqueWithoutServiceContractIndexInput
  >;
  deleteMany?: Maybe<
    | ServiceContractEstimationScalarWhereInput[]
    | ServiceContractEstimationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceContractEstimationUpdateManyWithWhereNestedInput[]
    | ServiceContractEstimationUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceContractEstimationUpdateWithWhereUniqueWithoutServiceContractIndexInput {
  where: ServiceContractEstimationWhereUniqueInput;
  data: ServiceContractEstimationUpdateWithoutServiceContractIndexDataInput;
}

export interface ServiceContractEstimationUpdateWithoutServiceContractIndexDataInput {
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  serviceContract?: Maybe<ServiceContractUpdateOneInput>;
}

export interface ServiceContractEstimationUpsertWithWhereUniqueWithoutServiceContractIndexInput {
  where: ServiceContractEstimationWhereUniqueInput;
  update: ServiceContractEstimationUpdateWithoutServiceContractIndexDataInput;
  create: ServiceContractEstimationCreateWithoutServiceContractIndexInput;
}

export interface ServiceContractEstimationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  initialSalesAmount?: Maybe<Float>;
  initialSalesAmount_not?: Maybe<Float>;
  initialSalesAmount_in?: Maybe<Float[] | Float>;
  initialSalesAmount_not_in?: Maybe<Float[] | Float>;
  initialSalesAmount_lt?: Maybe<Float>;
  initialSalesAmount_lte?: Maybe<Float>;
  initialSalesAmount_gt?: Maybe<Float>;
  initialSalesAmount_gte?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
  billedAmount_not?: Maybe<Float>;
  billedAmount_in?: Maybe<Float[] | Float>;
  billedAmount_not_in?: Maybe<Float[] | Float>;
  billedAmount_lt?: Maybe<Float>;
  billedAmount_lte?: Maybe<Float>;
  billedAmount_gt?: Maybe<Float>;
  billedAmount_gte?: Maybe<Float>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | ServiceContractEstimationScalarWhereInput[]
    | ServiceContractEstimationScalarWhereInput
  >;
  OR?: Maybe<
    | ServiceContractEstimationScalarWhereInput[]
    | ServiceContractEstimationScalarWhereInput
  >;
  NOT?: Maybe<
    | ServiceContractEstimationScalarWhereInput[]
    | ServiceContractEstimationScalarWhereInput
  >;
}

export interface ServiceContractEstimationUpdateManyWithWhereNestedInput {
  where: ServiceContractEstimationScalarWhereInput;
  data: ServiceContractEstimationUpdateManyDataInput;
}

export interface ServiceContractEstimationUpdateManyDataInput {
  initialSalesAmount?: Maybe<Float>;
  billedAmount?: Maybe<Float>;
}

export interface ServiceContractIndexUpdateManyMutationInput {
  indexMethod?: Maybe<ContractIndexMethod>;
  indexTime?: Maybe<String>;
  indexedAmount?: Maybe<String>;
  indexFigure?: Maybe<String>;
  contractNumber?: Maybe<String>;
  contractAmount?: Maybe<String>;
}

export interface ServiceContractTermCreateInput {
  id?: Maybe<ID_Input>;
  serviceContractCode?: Maybe<String>;
  lineNo?: Maybe<Int>;
  invoiceFrom?: Maybe<String>;
  endingDate?: Maybe<String>;
  invoicedUntil?: Maybe<String>;
  invoiceInterval?: Maybe<String>;
  invoicePostponePeriod?: Maybe<String>;
  nextInvoicingDate?: Maybe<String>;
  progressPercent?: Maybe<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: Maybe<String>;
  invoiceDirectly?: Maybe<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: Maybe<String>;
  description?: Maybe<String>;
  invoicingVIACollectiveList?: Maybe<String>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  chargeable?: Maybe<Boolean>;
  invoicedPrice?: Maybe<Float>;
  invoiceInProcess?: Maybe<Float>;
  creditMemoInProcess?: Maybe<Float>;
  invoicePayment?: Maybe<Float>;
  globalDimension1Code?: Maybe<String>;
  customerCode?: Maybe<String>;
  billToCustomerCode?: Maybe<String>;
}

export interface ServiceContractTermUpdateInput {
  serviceContractCode?: Maybe<String>;
  lineNo?: Maybe<Int>;
  invoiceFrom?: Maybe<String>;
  endingDate?: Maybe<String>;
  invoicedUntil?: Maybe<String>;
  invoiceInterval?: Maybe<String>;
  invoicePostponePeriod?: Maybe<String>;
  nextInvoicingDate?: Maybe<String>;
  progressPercent?: Maybe<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: Maybe<String>;
  invoiceDirectly?: Maybe<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: Maybe<String>;
  description?: Maybe<String>;
  invoicingVIACollectiveList?: Maybe<String>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  chargeable?: Maybe<Boolean>;
  invoicedPrice?: Maybe<Float>;
  invoiceInProcess?: Maybe<Float>;
  creditMemoInProcess?: Maybe<Float>;
  invoicePayment?: Maybe<Float>;
  globalDimension1Code?: Maybe<String>;
  customerCode?: Maybe<String>;
  billToCustomerCode?: Maybe<String>;
}

export interface ServiceContractTermUpdateManyMutationInput {
  serviceContractCode?: Maybe<String>;
  lineNo?: Maybe<Int>;
  invoiceFrom?: Maybe<String>;
  endingDate?: Maybe<String>;
  invoicedUntil?: Maybe<String>;
  invoiceInterval?: Maybe<String>;
  invoicePostponePeriod?: Maybe<String>;
  nextInvoicingDate?: Maybe<String>;
  progressPercent?: Maybe<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: Maybe<String>;
  invoiceDirectly?: Maybe<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: Maybe<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: Maybe<String>;
  description?: Maybe<String>;
  invoicingVIACollectiveList?: Maybe<String>;
  invoicePeriod?: Maybe<ContractInvoicePeriod>;
  chargeable?: Maybe<Boolean>;
  invoicedPrice?: Maybe<Float>;
  invoiceInProcess?: Maybe<Float>;
  creditMemoInProcess?: Maybe<Float>;
  invoicePayment?: Maybe<Float>;
  globalDimension1Code?: Maybe<String>;
  customerCode?: Maybe<String>;
  billToCustomerCode?: Maybe<String>;
}

export interface ServiceOrderUpdateInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpdateManyMutationInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderCommentCreateInput {
  id?: Maybe<ID_Input>;
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutServiceOrderCommentsInput>;
}

export interface ServiceOrderCreateOneWithoutServiceOrderCommentsInput {
  create?: Maybe<ServiceOrderCreateWithoutServiceOrderCommentsInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutServiceOrderCommentsInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderCommentUpdateInput {
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutServiceOrderCommentsInput>;
}

export interface ServiceOrderUpdateOneWithoutServiceOrderCommentsInput {
  create?: Maybe<ServiceOrderCreateWithoutServiceOrderCommentsInput>;
  update?: Maybe<ServiceOrderUpdateWithoutServiceOrderCommentsDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutServiceOrderCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutServiceOrderCommentsDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithoutServiceOrderCommentsInput {
  update: ServiceOrderUpdateWithoutServiceOrderCommentsDataInput;
  create: ServiceOrderCreateWithoutServiceOrderCommentsInput;
}

export interface ServiceOrderCommentUpdateManyMutationInput {
  orderCommentType?: Maybe<ServiceOrderCommentType>;
  text?: Maybe<String>;
  authorCode?: Maybe<String>;
  date?: Maybe<String>;
}

export interface ServiceOrderUpdateNotificationCreateInput {
  id?: Maybe<ID_Input>;
  orderOwnerEmail?: Maybe<String>;
  orderOwnerPhone?: Maybe<String>;
  linkToken?: Maybe<String>;
  smsText?: Maybe<String>;
  stage: String;
  emailHtmlBody?: Maybe<String>;
  emailSubject?: Maybe<String>;
  companyEmail?: Maybe<String>;
  smsDeliveryStatus?: Maybe<Boolean>;
  emailDeliveryStatus?: Maybe<Boolean>;
  linkExpirationDate?: Maybe<DateTimeInput>;
  serviceOrderId: ID_Input;
  serviceOrder?: Maybe<ServiceOrderCreateOneInput>;
  customerFeedback?: Maybe<CustomerFeedbackCreateOneInput>;
}

export interface ServiceOrderCreateOneInput {
  create?: Maybe<ServiceOrderCreateInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface CustomerFeedbackCreateOneInput {
  create?: Maybe<CustomerFeedbackCreateInput>;
  connect?: Maybe<CustomerFeedbackWhereUniqueInput>;
}

export interface ServiceOrderUpdateNotificationUpdateInput {
  orderOwnerEmail?: Maybe<String>;
  orderOwnerPhone?: Maybe<String>;
  linkToken?: Maybe<String>;
  smsText?: Maybe<String>;
  stage?: Maybe<String>;
  emailHtmlBody?: Maybe<String>;
  emailSubject?: Maybe<String>;
  companyEmail?: Maybe<String>;
  smsDeliveryStatus?: Maybe<Boolean>;
  emailDeliveryStatus?: Maybe<Boolean>;
  linkExpirationDate?: Maybe<DateTimeInput>;
  serviceOrderId?: Maybe<ID_Input>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneInput>;
  customerFeedback?: Maybe<CustomerFeedbackUpdateOneInput>;
}

export interface ServiceOrderUpdateOneInput {
  create?: Maybe<ServiceOrderCreateInput>;
  update?: Maybe<ServiceOrderUpdateDataInput>;
  upsert?: Maybe<ServiceOrderUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpsertNestedInput {
  update: ServiceOrderUpdateDataInput;
  create: ServiceOrderCreateInput;
}

export interface CustomerFeedbackUpdateOneInput {
  create?: Maybe<CustomerFeedbackCreateInput>;
  update?: Maybe<CustomerFeedbackUpdateDataInput>;
  upsert?: Maybe<CustomerFeedbackUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerFeedbackWhereUniqueInput>;
}

export interface CustomerFeedbackUpdateDataInput {
  rating?: Maybe<Int>;
  stage?: Maybe<String>;
  skipped?: Maybe<Boolean>;
  comment?: Maybe<String>;
  customerRole?: Maybe<Json>;
  serviceOrderId?: Maybe<ID_Input>;
  notificationId?: Maybe<ID_Input>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutCustomerFeedbacksInput>;
}

export interface CustomerFeedbackUpsertNestedInput {
  update: CustomerFeedbackUpdateDataInput;
  create: CustomerFeedbackCreateInput;
}

export interface ServiceOrderUpdateNotificationUpdateManyMutationInput {
  orderOwnerEmail?: Maybe<String>;
  orderOwnerPhone?: Maybe<String>;
  linkToken?: Maybe<String>;
  smsText?: Maybe<String>;
  stage?: Maybe<String>;
  emailHtmlBody?: Maybe<String>;
  emailSubject?: Maybe<String>;
  companyEmail?: Maybe<String>;
  smsDeliveryStatus?: Maybe<Boolean>;
  emailDeliveryStatus?: Maybe<Boolean>;
  linkExpirationDate?: Maybe<DateTimeInput>;
  serviceOrderId?: Maybe<ID_Input>;
}

export interface ServiceStatusCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ServiceStatusUpdateInput {
  code?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ServiceStatusUpdateManyMutationInput {
  code?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ServiceTextCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutServiceTextsInput>;
}

export interface ServiceOrderCreateOneWithoutServiceTextsInput {
  create?: Maybe<ServiceOrderCreateWithoutServiceTextsInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutServiceTextsInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderCreateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceTextUpdateInput {
  code?: Maybe<String>;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutServiceTextsInput>;
}

export interface ServiceOrderUpdateOneWithoutServiceTextsInput {
  create?: Maybe<ServiceOrderCreateWithoutServiceTextsInput>;
  update?: Maybe<ServiceOrderUpdateWithoutServiceTextsDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutServiceTextsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutServiceTextsDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  workOrders?: Maybe<WorkOrderUpdateManyWithoutServiceOrderInput>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithoutServiceTextsInput {
  update: ServiceOrderUpdateWithoutServiceTextsDataInput;
  create: ServiceOrderCreateWithoutServiceTextsInput;
}

export interface ServiceTextUpdateManyMutationInput {
  code?: Maybe<String>;
  tableName?: Maybe<String>;
  type?: Maybe<String>;
  lineNumber?: Maybe<Int>;
  date?: Maybe<String>;
  comment?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface WorkOrderCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderCreateOneWithoutWorkOrdersInput>;
  activityLog?: Maybe<ActivityLogCreateOneInput>;
  moment?: Maybe<MomentCreateOneInput>;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderCreateOneWithoutWorkOrdersInput {
  create?: Maybe<ServiceOrderCreateWithoutWorkOrdersInput>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderCreateWithoutWorkOrdersInput {
  id?: Maybe<ID_Input>;
  code: String;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  activityLogs?: Maybe<ActivityLogCreateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextCreateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackCreateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryCreateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterCreateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentCreateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentCreateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface WorkOrderUpdateInput {
  code?: Maybe<String>;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  serviceOrder?: Maybe<ServiceOrderUpdateOneWithoutWorkOrdersInput>;
  activityLog?: Maybe<ActivityLogUpdateOneInput>;
  moment?: Maybe<MomentUpdateOneInput>;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpdateOneWithoutWorkOrdersInput {
  create?: Maybe<ServiceOrderCreateWithoutWorkOrdersInput>;
  update?: Maybe<ServiceOrderUpdateWithoutWorkOrdersDataInput>;
  upsert?: Maybe<ServiceOrderUpsertWithoutWorkOrdersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ServiceOrderWhereUniqueInput>;
}

export interface ServiceOrderUpdateWithoutWorkOrdersDataInput {
  code?: Maybe<String>;
  globalId?: Maybe<String>;
  conceptId?: Maybe<String>;
  companyName?: Maybe<String>;
  callerCode?: Maybe<String>;
  orderType?: Maybe<String>;
  description?: Maybe<String>;
  ownerCode?: Maybe<String>;
  customerCode?: Maybe<String>;
  customerName?: Maybe<String>;
  billingCode?: Maybe<String>;
  customerFeature?: Maybe<String>;
  reference?: Maybe<String>;
  commissionDate?: Maybe<String>;
  serviceLocationCode?: Maybe<String>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  sourceType?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  territoryCode?: Maybe<String>;
  orderDate?: Maybe<String>;
  orderTime?: Maybe<String>;
  budgetHours?: Maybe<Float>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isFirmPlanned?: Maybe<Boolean>;
  startDate?: Maybe<String>;
  startTime?: Maybe<String>;
  endDate?: Maybe<String>;
  endTime?: Maybe<String>;
  priority?: Maybe<PriorityType>;
  nextDeadline?: Maybe<String>;
  status?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  actualReferencePointDescription?: Maybe<String>;
  employeeCode?: Maybe<String>;
  employeeName?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<Boolean>;
  gdbServiceOrderTrackAndTrace?: Maybe<Boolean>;
  gdbServiceOrderKTO?: Maybe<Boolean>;
  ktoFiture?: Maybe<Float>;
  serviceType?: Maybe<String>;
  invoicedPrice?: Maybe<Float>;
  orderAmount?: Maybe<Float>;
  serviceControlPeriodDate?: Maybe<String>;
  isRemoteControl?: Maybe<Boolean>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  isSignatureHasValue?: Maybe<Boolean>;
  signedBy?: Maybe<String>;
  isSendReport?: Maybe<Boolean>;
  isFinishedFieldService?: Maybe<Boolean>;
  cratedBy?: Maybe<String>;
  creationDate?: Maybe<DateTimeInput>;
  updateDate?: Maybe<String>;
  updatedBy?: Maybe<String>;
  customerRemark?: Maybe<String>;
  internalRemark?: Maybe<String>;
  correctiveMaintenanceRemark?: Maybe<String>;
  agreementDate?: Maybe<String>;
  signature?: Maybe<String>;
  contactPersonCode?: Maybe<String>;
  contactPersonGender?: Maybe<String>;
  orderCodeCustomer?: Maybe<String>;
  countryCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  assignedTo?: Maybe<String>;
  servicePackage?: Maybe<Float>;
  problemDescription?: Maybe<String>;
  problemCause?: Maybe<String>;
  problemSolution?: Maybe<String>;
  baseServiceOrderCode?: Maybe<String>;
  isBaseServiceOrder?: Maybe<Boolean>;
  hasAdditionalServiceOrder?: Maybe<Boolean>;
  actualHours?: Maybe<Float>;
  isPublished?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  orderNumber?: Maybe<String>;
  isExportedLocked?: Maybe<Boolean>;
  complexId?: Maybe<ID_Input>;
  complexCode?: Maybe<String>;
  complexName?: Maybe<String>;
  subComplexCode?: Maybe<String>;
  subComplexName?: Maybe<String>;
  roofCode?: Maybe<String>;
  workType?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  readyDateNew?: Maybe<String>;
  roofPartner?: Maybe<String>;
  roofPartnerName?: Maybe<String>;
  roofWarranty?: Maybe<Boolean>;
  roofIsAGutter?: Maybe<Boolean>;
  amountOfMeasures?: Maybe<Int>;
  roofingPartDescription?: Maybe<String>;
  cause?: Maybe<String>;
  measureDescription?: Maybe<String>;
  consequentialDamageIndoor?: Maybe<String>;
  roofTypeCode?: Maybe<String>;
  condition?: Maybe<Int>;
  roofingPartCategories?: Maybe<String>;
  roofingPartCodes?: Maybe<String>;
  contractCode?: Maybe<String>;
  invoiceType?: Maybe<String>;
  billingAddress?: Maybe<String>;
  roofNumber?: Maybe<String>;
  activityLogs?: Maybe<ActivityLogUpdateManyWithoutServiceOrderInput>;
  serviceTexts?: Maybe<ServiceTextUpdateManyWithoutServiceOrderInput>;
  customerFeedbacks?: Maybe<CustomerFeedbackUpdateManyWithoutServiceOrderInput>;
  activityLogHistories?: Maybe<
    ActivityLogHistoryUpdateManyWithoutServiceOrderInput
  >;
  reporter?: Maybe<ReporterUpdateOneInput>;
  serviceOrderComments?: Maybe<
    ServiceOrderCommentUpdateManyWithoutServiceOrderInput
  >;
  serviceAppointment?: Maybe<
    ServiceAppointmentUpdateOneWithoutServiceOrdersInput
  >;
  isBlocked?: Maybe<Boolean>;
}

export interface ServiceOrderUpsertWithoutWorkOrdersInput {
  update: ServiceOrderUpdateWithoutWorkOrdersDataInput;
  create: ServiceOrderCreateWithoutWorkOrdersInput;
}

export interface WorkOrderUpdateManyMutationInput {
  code?: Maybe<String>;
  status?: Maybe<String>;
  sourceCompanyName?: Maybe<String>;
  sourceType?: Maybe<String>;
  sourceCode?: Maybe<String>;
  description?: Maybe<String>;
  resourceType?: Maybe<String>;
  resourceCode?: Maybe<String>;
  resourceCompanyName?: Maybe<String>;
  isMainResource?: Maybe<Boolean>;
  serviceStatus?: Maybe<String>;
  statusReasonDescription?: Maybe<String>;
  isFinishedService?: Maybe<Boolean>;
  firstPossibleStartDate?: Maybe<String>;
  lastPossibleStartDate?: Maybe<String>;
  starDate?: Maybe<String>;
  endDate?: Maybe<String>;
  expectedHours?: Maybe<Float>;
  durationTime?: Maybe<Float>;
  isDuringClockTime?: Maybe<Boolean>;
  isFirmPlanned?: Maybe<Boolean>;
  isExportToFSA?: Maybe<Boolean>;
  exportToFSADate?: Maybe<String>;
  actualReferencePoint?: Maybe<String>;
  assignedTo?: Maybe<String>;
  globalDimensionCode?: Maybe<String>;
  serviceContractCode?: Maybe<String>;
  orderManager?: Maybe<String>;
  address?: Maybe<String>;
  postalCode?: Maybe<String>;
  city?: Maybe<String>;
  customerCode?: Maybe<String>;
  jobDescription?: Maybe<String>;
  soCode?: Maybe<String>;
  soCallerCode?: Maybe<String>;
  soOrderType?: Maybe<String>;
  soDescription?: Maybe<String>;
  soContactCode?: Maybe<String>;
  soContactPersonCode?: Maybe<String>;
  soCustomerFeature?: Maybe<String>;
  soBillingCode?: Maybe<String>;
  soReference?: Maybe<String>;
  soCommissionDate?: Maybe<String>;
  soServiceLocationCode?: Maybe<String>;
  soOrderCodeCustomer?: Maybe<String>;
  soName?: Maybe<String>;
  soName2?: Maybe<String>;
  soSourceType?: Maybe<String>;
  soServiceContractCode?: Maybe<String>;
  soGlobalDimensionCode?: Maybe<String>;
  soTerritoryCode?: Maybe<String>;
  soOrderDate?: Maybe<String>;
  soOrderTime?: Maybe<String>;
  soBudgetHours?: Maybe<Float>;
  soExpectedHours?: Maybe<Float>;
  soDurationTime?: Maybe<Float>;
  soIsFirmPlanned?: Maybe<Boolean>;
  soStarDate?: Maybe<String>;
  soStarTime?: Maybe<String>;
  soEndDate?: Maybe<String>;
  soEndTime?: Maybe<String>;
  soPriority?: Maybe<PriorityType>;
  soNextDeadline?: Maybe<String>;
  soStatus?: Maybe<String>;
  soActualReferencePoint?: Maybe<String>;
  soOrderManager?: Maybe<String>;
  soAssignedTo?: Maybe<String>;
  soEmployeeCode?: Maybe<String>;
  roofingPartnerName?: Maybe<String>;
  detectorType?: Maybe<String>;
  notInDakota?: Maybe<String>;
  soServiceType?: Maybe<String>;
  soInvoicedPrice?: Maybe<Float>;
  soServicePackage?: Maybe<String>;
  soOrderAmount?: Maybe<Int>;
  soServiceControlPeriodDate?: Maybe<String>;
  soIsRemoteControl?: Maybe<Boolean>;
  soCountryCode?: Maybe<String>;
  soProblemDescription?: Maybe<String>;
  soProblemCause?: Maybe<String>;
  soProblemSolution?: Maybe<String>;
  firstDeadline?: Maybe<String>;
  gdbServiceOrderStartDate?: Maybe<String>;
  dateExecuted?: Maybe<String>;
  gdbServiceOrderInvoicedDate?: Maybe<String>;
  isExportToFSA2?: Maybe<Boolean>;
  soExportToFSADate?: Maybe<String>;
  hasSignature?: Maybe<Boolean>;
  planAhead?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  orderIsSent?: Maybe<Boolean>;
  isLocked?: Maybe<Boolean>;
  lockedBy?: Maybe<String>;
  isExportBlocked?: Maybe<Boolean>;
  updatedByUserId?: Maybe<String>;
  isBlocked?: Maybe<Boolean>;
}

export interface ActionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActionWhereInput>;
  AND?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
  OR?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
  NOT?: Maybe<ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput>;
}

export interface ActivityLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityLogWhereInput>;
  AND?: Maybe<
    ActivityLogSubscriptionWhereInput[] | ActivityLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    ActivityLogSubscriptionWhereInput[] | ActivityLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ActivityLogSubscriptionWhereInput[] | ActivityLogSubscriptionWhereInput
  >;
}

export interface ActivityLogHistorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityLogHistoryWhereInput>;
  AND?: Maybe<
    | ActivityLogHistorySubscriptionWhereInput[]
    | ActivityLogHistorySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ActivityLogHistorySubscriptionWhereInput[]
    | ActivityLogHistorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ActivityLogHistorySubscriptionWhereInput[]
    | ActivityLogHistorySubscriptionWhereInput
  >;
}

export interface CustomerFeedbackSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerFeedbackWhereInput>;
  AND?: Maybe<
    | CustomerFeedbackSubscriptionWhereInput[]
    | CustomerFeedbackSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CustomerFeedbackSubscriptionWhereInput[]
    | CustomerFeedbackSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CustomerFeedbackSubscriptionWhereInput[]
    | CustomerFeedbackSubscriptionWhereInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface FaqSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FaqWhereInput>;
  AND?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
  OR?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
  NOT?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
}

export interface KimInformationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KimInformationWhereInput>;
  AND?: Maybe<
    | KimInformationSubscriptionWhereInput[]
    | KimInformationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | KimInformationSubscriptionWhereInput[]
    | KimInformationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | KimInformationSubscriptionWhereInput[]
    | KimInformationSubscriptionWhereInput
  >;
}

export interface MomentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MomentWhereInput>;
  AND?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
  OR?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
  NOT?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ReporterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReporterWhereInput>;
  AND?: Maybe<
    ReporterSubscriptionWhereInput[] | ReporterSubscriptionWhereInput
  >;
  OR?: Maybe<ReporterSubscriptionWhereInput[] | ReporterSubscriptionWhereInput>;
  NOT?: Maybe<
    ReporterSubscriptionWhereInput[] | ReporterSubscriptionWhereInput
  >;
}

export interface ServiceAppointmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceAppointmentWhereInput>;
  AND?: Maybe<
    | ServiceAppointmentSubscriptionWhereInput[]
    | ServiceAppointmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceAppointmentSubscriptionWhereInput[]
    | ServiceAppointmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceAppointmentSubscriptionWhereInput[]
    | ServiceAppointmentSubscriptionWhereInput
  >;
}

export interface ServiceContractSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceContractWhereInput>;
  AND?: Maybe<
    | ServiceContractSubscriptionWhereInput[]
    | ServiceContractSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceContractSubscriptionWhereInput[]
    | ServiceContractSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceContractSubscriptionWhereInput[]
    | ServiceContractSubscriptionWhereInput
  >;
}

export interface ServiceContractEstimationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceContractEstimationWhereInput>;
  AND?: Maybe<
    | ServiceContractEstimationSubscriptionWhereInput[]
    | ServiceContractEstimationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceContractEstimationSubscriptionWhereInput[]
    | ServiceContractEstimationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceContractEstimationSubscriptionWhereInput[]
    | ServiceContractEstimationSubscriptionWhereInput
  >;
}

export interface ServiceContractIndexSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceContractIndexWhereInput>;
  AND?: Maybe<
    | ServiceContractIndexSubscriptionWhereInput[]
    | ServiceContractIndexSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceContractIndexSubscriptionWhereInput[]
    | ServiceContractIndexSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceContractIndexSubscriptionWhereInput[]
    | ServiceContractIndexSubscriptionWhereInput
  >;
}

export interface ServiceContractTermSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceContractTermWhereInput>;
  AND?: Maybe<
    | ServiceContractTermSubscriptionWhereInput[]
    | ServiceContractTermSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceContractTermSubscriptionWhereInput[]
    | ServiceContractTermSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceContractTermSubscriptionWhereInput[]
    | ServiceContractTermSubscriptionWhereInput
  >;
}

export interface ServiceOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceOrderWhereInput>;
  AND?: Maybe<
    ServiceOrderSubscriptionWhereInput[] | ServiceOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    ServiceOrderSubscriptionWhereInput[] | ServiceOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ServiceOrderSubscriptionWhereInput[] | ServiceOrderSubscriptionWhereInput
  >;
}

export interface ServiceOrderCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceOrderCommentWhereInput>;
  AND?: Maybe<
    | ServiceOrderCommentSubscriptionWhereInput[]
    | ServiceOrderCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceOrderCommentSubscriptionWhereInput[]
    | ServiceOrderCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceOrderCommentSubscriptionWhereInput[]
    | ServiceOrderCommentSubscriptionWhereInput
  >;
}

export interface ServiceOrderUpdateNotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceOrderUpdateNotificationWhereInput>;
  AND?: Maybe<
    | ServiceOrderUpdateNotificationSubscriptionWhereInput[]
    | ServiceOrderUpdateNotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceOrderUpdateNotificationSubscriptionWhereInput[]
    | ServiceOrderUpdateNotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceOrderUpdateNotificationSubscriptionWhereInput[]
    | ServiceOrderUpdateNotificationSubscriptionWhereInput
  >;
}

export interface ServiceStatusSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceStatusWhereInput>;
  AND?: Maybe<
    ServiceStatusSubscriptionWhereInput[] | ServiceStatusSubscriptionWhereInput
  >;
  OR?: Maybe<
    ServiceStatusSubscriptionWhereInput[] | ServiceStatusSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ServiceStatusSubscriptionWhereInput[] | ServiceStatusSubscriptionWhereInput
  >;
}

export interface ServiceTextSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceTextWhereInput>;
  AND?: Maybe<
    ServiceTextSubscriptionWhereInput[] | ServiceTextSubscriptionWhereInput
  >;
  OR?: Maybe<
    ServiceTextSubscriptionWhereInput[] | ServiceTextSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ServiceTextSubscriptionWhereInput[] | ServiceTextSubscriptionWhereInput
  >;
}

export interface WorkOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkOrderWhereInput>;
  AND?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WorkOrderSubscriptionWhereInput[] | WorkOrderSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Action {
  id: ID_Output;
  name?: String;
  title?: String;
}

export interface ActionPromise extends Promise<Action>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
}

export interface ActionSubscription
  extends Promise<AsyncIterator<Action>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ActionNullablePromise
  extends Promise<Action | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
}

export interface ActionConnection {
  pageInfo: PageInfo;
  edges: ActionEdge[];
}

export interface ActionConnectionPromise
  extends Promise<ActionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActionEdge>>() => T;
  aggregate: <T = AggregateActionPromise>() => T;
}

export interface ActionConnectionSubscription
  extends Promise<AsyncIterator<ActionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActionEdge {
  node: Action;
  cursor: String;
}

export interface ActionEdgePromise extends Promise<ActionEdge>, Fragmentable {
  node: <T = ActionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActionEdgeSubscription
  extends Promise<AsyncIterator<ActionEdge>>,
    Fragmentable {
  node: <T = ActionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAction {
  count: Int;
}

export interface AggregateActionPromise
  extends Promise<AggregateAction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActionSubscription
  extends Promise<AsyncIterator<AggregateAction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityLog {
  id: ID_Output;
  code: String;
  description?: String;
  apply?: String;
  colour?: String;
  eventType?: String;
  statusPurchQuote?: String;
  statusPurchOrder?: String;
  statusServiceCall?: String;
  statusServiceOrder?: String;
  fieldService?: String;
  blockModifyServiceOrder?: Boolean;
  skipExportToFSA?: Boolean;
  sendStatusUpdateMail?: Boolean;
  sendMailWorkSheet?: Boolean;
  publishOnServicePOrtal?: Boolean;
  sendMainToSubcontractor?: Boolean;
  updateWOStartTime?: Boolean;
  updateWOEndTime?: Boolean;
  naForActualReferencePoint?: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ActivityLogPromise extends Promise<ActivityLog>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  apply: () => Promise<String>;
  colour: () => Promise<String>;
  eventType: () => Promise<String>;
  statusPurchQuote: () => Promise<String>;
  statusPurchOrder: () => Promise<String>;
  statusServiceCall: () => Promise<String>;
  statusServiceOrder: () => Promise<String>;
  fieldService: () => Promise<String>;
  blockModifyServiceOrder: () => Promise<Boolean>;
  skipExportToFSA: () => Promise<Boolean>;
  sendStatusUpdateMail: () => Promise<Boolean>;
  sendMailWorkSheet: () => Promise<Boolean>;
  publishOnServicePOrtal: () => Promise<Boolean>;
  sendMainToSubcontractor: () => Promise<Boolean>;
  updateWOStartTime: () => Promise<Boolean>;
  updateWOEndTime: () => Promise<Boolean>;
  naForActualReferencePoint: () => Promise<Boolean>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityLogSubscription
  extends Promise<AsyncIterator<ActivityLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  apply: () => Promise<AsyncIterator<String>>;
  colour: () => Promise<AsyncIterator<String>>;
  eventType: () => Promise<AsyncIterator<String>>;
  statusPurchQuote: () => Promise<AsyncIterator<String>>;
  statusPurchOrder: () => Promise<AsyncIterator<String>>;
  statusServiceCall: () => Promise<AsyncIterator<String>>;
  statusServiceOrder: () => Promise<AsyncIterator<String>>;
  fieldService: () => Promise<AsyncIterator<String>>;
  blockModifyServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  skipExportToFSA: () => Promise<AsyncIterator<Boolean>>;
  sendStatusUpdateMail: () => Promise<AsyncIterator<Boolean>>;
  sendMailWorkSheet: () => Promise<AsyncIterator<Boolean>>;
  publishOnServicePOrtal: () => Promise<AsyncIterator<Boolean>>;
  sendMainToSubcontractor: () => Promise<AsyncIterator<Boolean>>;
  updateWOStartTime: () => Promise<AsyncIterator<Boolean>>;
  updateWOEndTime: () => Promise<AsyncIterator<Boolean>>;
  naForActualReferencePoint: () => Promise<AsyncIterator<Boolean>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityLogNullablePromise
  extends Promise<ActivityLog | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  apply: () => Promise<String>;
  colour: () => Promise<String>;
  eventType: () => Promise<String>;
  statusPurchQuote: () => Promise<String>;
  statusPurchOrder: () => Promise<String>;
  statusServiceCall: () => Promise<String>;
  statusServiceOrder: () => Promise<String>;
  fieldService: () => Promise<String>;
  blockModifyServiceOrder: () => Promise<Boolean>;
  skipExportToFSA: () => Promise<Boolean>;
  sendStatusUpdateMail: () => Promise<Boolean>;
  sendMailWorkSheet: () => Promise<Boolean>;
  publishOnServicePOrtal: () => Promise<Boolean>;
  sendMainToSubcontractor: () => Promise<Boolean>;
  updateWOStartTime: () => Promise<Boolean>;
  updateWOEndTime: () => Promise<Boolean>;
  naForActualReferencePoint: () => Promise<Boolean>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrder {
  id: ID_Output;
  code: String;
  globalId?: String;
  conceptId?: String;
  companyName?: String;
  callerCode?: String;
  orderType?: String;
  description?: String;
  ownerCode?: String;
  customerCode?: String;
  customerName?: String;
  billingCode?: String;
  customerFeature?: String;
  reference?: String;
  commissionDate?: String;
  serviceLocationCode?: String;
  name?: String;
  address?: String;
  postalCode?: String;
  city?: String;
  sourceType?: String;
  globalDimensionCode?: String;
  territoryCode?: String;
  orderDate?: String;
  orderTime?: String;
  budgetHours?: Float;
  expectedHours?: Float;
  durationTime?: Float;
  isFirmPlanned?: Boolean;
  startDate?: String;
  startTime?: String;
  endDate?: String;
  endTime?: String;
  priority?: PriorityType;
  nextDeadline?: String;
  status?: String;
  actualReferencePoint?: String;
  actualReferencePointDescription?: String;
  employeeCode?: String;
  employeeName?: String;
  roofingPartnerName?: String;
  detectorType?: String;
  notInDakota?: Boolean;
  gdbServiceOrderTrackAndTrace?: Boolean;
  gdbServiceOrderKTO?: Boolean;
  ktoFiture?: Float;
  serviceType?: String;
  invoicedPrice?: Float;
  orderAmount?: Float;
  serviceControlPeriodDate?: String;
  isRemoteControl?: Boolean;
  firstDeadline?: String;
  gdbServiceOrderStartDate?: String;
  dateExecuted?: String;
  gdbServiceOrderInvoicedDate?: String;
  isExportToFSA2?: Boolean;
  exportToFSADate?: String;
  isSignatureHasValue?: Boolean;
  signedBy?: String;
  isSendReport?: Boolean;
  isFinishedFieldService?: Boolean;
  cratedBy?: String;
  creationDate?: DateTimeOutput;
  updateDate?: String;
  updatedBy?: String;
  customerRemark?: String;
  internalRemark?: String;
  correctiveMaintenanceRemark?: String;
  agreementDate?: String;
  signature?: String;
  contactPersonCode?: String;
  contactPersonGender?: String;
  orderCodeCustomer?: String;
  countryCode?: String;
  serviceContractCode?: String;
  orderManager?: String;
  assignedTo?: String;
  servicePackage?: Float;
  problemDescription?: String;
  problemCause?: String;
  problemSolution?: String;
  baseServiceOrderCode?: String;
  isBaseServiceOrder?: Boolean;
  hasAdditionalServiceOrder?: Boolean;
  actualHours?: Float;
  isPublished: Boolean;
  isLocked: Boolean;
  lockedBy?: String;
  orderNumber?: String;
  isExportedLocked: Boolean;
  complexId?: ID_Output;
  complexCode?: String;
  complexName?: String;
  subComplexCode?: String;
  subComplexName?: String;
  roofCode?: String;
  workType?: String;
  statusReasonDescription?: String;
  readyDateNew?: String;
  roofPartner?: String;
  roofPartnerName?: String;
  roofWarranty?: Boolean;
  roofIsAGutter?: Boolean;
  amountOfMeasures?: Int;
  roofingPartDescription?: String;
  cause?: String;
  measureDescription?: String;
  consequentialDamageIndoor?: String;
  roofTypeCode?: String;
  condition?: Int;
  roofingPartCategories?: String;
  roofingPartCodes?: String;
  contractCode?: String;
  invoiceType?: String;
  billingAddress?: String;
  roofNumber?: String;
  isBlocked: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceOrderPromise
  extends Promise<ServiceOrder>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  globalId: () => Promise<String>;
  conceptId: () => Promise<String>;
  companyName: () => Promise<String>;
  callerCode: () => Promise<String>;
  orderType: () => Promise<String>;
  description: () => Promise<String>;
  ownerCode: () => Promise<String>;
  customerCode: () => Promise<String>;
  customerName: () => Promise<String>;
  billingCode: () => Promise<String>;
  customerFeature: () => Promise<String>;
  reference: () => Promise<String>;
  commissionDate: () => Promise<String>;
  serviceLocationCode: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  sourceType: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  territoryCode: () => Promise<String>;
  orderDate: () => Promise<String>;
  orderTime: () => Promise<String>;
  budgetHours: () => Promise<Float>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isFirmPlanned: () => Promise<Boolean>;
  startDate: () => Promise<String>;
  startTime: () => Promise<String>;
  endDate: () => Promise<String>;
  endTime: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  nextDeadline: () => Promise<String>;
  status: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  actualReferencePointDescription: () => Promise<String>;
  employeeCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<Boolean>;
  gdbServiceOrderTrackAndTrace: () => Promise<Boolean>;
  gdbServiceOrderKTO: () => Promise<Boolean>;
  ktoFiture: () => Promise<Float>;
  serviceType: () => Promise<String>;
  invoicedPrice: () => Promise<Float>;
  orderAmount: () => Promise<Float>;
  serviceControlPeriodDate: () => Promise<String>;
  isRemoteControl: () => Promise<Boolean>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  isSignatureHasValue: () => Promise<Boolean>;
  signedBy: () => Promise<String>;
  isSendReport: () => Promise<Boolean>;
  isFinishedFieldService: () => Promise<Boolean>;
  cratedBy: () => Promise<String>;
  creationDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<String>;
  updatedBy: () => Promise<String>;
  customerRemark: () => Promise<String>;
  internalRemark: () => Promise<String>;
  correctiveMaintenanceRemark: () => Promise<String>;
  agreementDate: () => Promise<String>;
  signature: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonGender: () => Promise<String>;
  orderCodeCustomer: () => Promise<String>;
  countryCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  assignedTo: () => Promise<String>;
  servicePackage: () => Promise<Float>;
  problemDescription: () => Promise<String>;
  problemCause: () => Promise<String>;
  problemSolution: () => Promise<String>;
  baseServiceOrderCode: () => Promise<String>;
  isBaseServiceOrder: () => Promise<Boolean>;
  hasAdditionalServiceOrder: () => Promise<Boolean>;
  actualHours: () => Promise<Float>;
  isPublished: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  orderNumber: () => Promise<String>;
  isExportedLocked: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  subComplexCode: () => Promise<String>;
  subComplexName: () => Promise<String>;
  roofCode: () => Promise<String>;
  workType: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  readyDateNew: () => Promise<String>;
  roofPartner: () => Promise<String>;
  roofPartnerName: () => Promise<String>;
  roofWarranty: () => Promise<Boolean>;
  roofIsAGutter: () => Promise<Boolean>;
  amountOfMeasures: () => Promise<Int>;
  roofingPartDescription: () => Promise<String>;
  cause: () => Promise<String>;
  measureDescription: () => Promise<String>;
  consequentialDamageIndoor: () => Promise<String>;
  roofTypeCode: () => Promise<String>;
  condition: () => Promise<Int>;
  roofingPartCategories: () => Promise<String>;
  roofingPartCodes: () => Promise<String>;
  contractCode: () => Promise<String>;
  invoiceType: () => Promise<String>;
  billingAddress: () => Promise<String>;
  roofNumber: () => Promise<String>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogs: <T = FragmentableArray<ActivityLog>>(args?: {
    where?: ActivityLogWhereInput;
    orderBy?: ActivityLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceTexts: <T = FragmentableArray<ServiceText>>(args?: {
    where?: ServiceTextWhereInput;
    orderBy?: ServiceTextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customerFeedbacks: <T = FragmentableArray<CustomerFeedback>>(args?: {
    where?: CustomerFeedbackWhereInput;
    orderBy?: CustomerFeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogHistories: <T = FragmentableArray<ActivityLogHistory>>(args?: {
    where?: ActivityLogHistoryWhereInput;
    orderBy?: ActivityLogHistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reporter: <T = ReporterPromise>() => T;
  serviceOrderComments: <T = FragmentableArray<ServiceOrderComment>>(args?: {
    where?: ServiceOrderCommentWhereInput;
    orderBy?: ServiceOrderCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceAppointment: <T = ServiceAppointmentPromise>() => T;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrderSubscription
  extends Promise<AsyncIterator<ServiceOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  globalId: () => Promise<AsyncIterator<String>>;
  conceptId: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  callerCode: () => Promise<AsyncIterator<String>>;
  orderType: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  ownerCode: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  customerName: () => Promise<AsyncIterator<String>>;
  billingCode: () => Promise<AsyncIterator<String>>;
  customerFeature: () => Promise<AsyncIterator<String>>;
  reference: () => Promise<AsyncIterator<String>>;
  commissionDate: () => Promise<AsyncIterator<String>>;
  serviceLocationCode: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<String>>;
  globalDimensionCode: () => Promise<AsyncIterator<String>>;
  territoryCode: () => Promise<AsyncIterator<String>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  orderTime: () => Promise<AsyncIterator<String>>;
  budgetHours: () => Promise<AsyncIterator<Float>>;
  expectedHours: () => Promise<AsyncIterator<Float>>;
  durationTime: () => Promise<AsyncIterator<Float>>;
  isFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  startDate: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<PriorityType>>;
  nextDeadline: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  actualReferencePoint: () => Promise<AsyncIterator<String>>;
  actualReferencePointDescription: () => Promise<AsyncIterator<String>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  employeeName: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  detectorType: () => Promise<AsyncIterator<String>>;
  notInDakota: () => Promise<AsyncIterator<Boolean>>;
  gdbServiceOrderTrackAndTrace: () => Promise<AsyncIterator<Boolean>>;
  gdbServiceOrderKTO: () => Promise<AsyncIterator<Boolean>>;
  ktoFiture: () => Promise<AsyncIterator<Float>>;
  serviceType: () => Promise<AsyncIterator<String>>;
  invoicedPrice: () => Promise<AsyncIterator<Float>>;
  orderAmount: () => Promise<AsyncIterator<Float>>;
  serviceControlPeriodDate: () => Promise<AsyncIterator<String>>;
  isRemoteControl: () => Promise<AsyncIterator<Boolean>>;
  firstDeadline: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderStartDate: () => Promise<AsyncIterator<String>>;
  dateExecuted: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderInvoicedDate: () => Promise<AsyncIterator<String>>;
  isExportToFSA2: () => Promise<AsyncIterator<Boolean>>;
  exportToFSADate: () => Promise<AsyncIterator<String>>;
  isSignatureHasValue: () => Promise<AsyncIterator<Boolean>>;
  signedBy: () => Promise<AsyncIterator<String>>;
  isSendReport: () => Promise<AsyncIterator<Boolean>>;
  isFinishedFieldService: () => Promise<AsyncIterator<Boolean>>;
  cratedBy: () => Promise<AsyncIterator<String>>;
  creationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateDate: () => Promise<AsyncIterator<String>>;
  updatedBy: () => Promise<AsyncIterator<String>>;
  customerRemark: () => Promise<AsyncIterator<String>>;
  internalRemark: () => Promise<AsyncIterator<String>>;
  correctiveMaintenanceRemark: () => Promise<AsyncIterator<String>>;
  agreementDate: () => Promise<AsyncIterator<String>>;
  signature: () => Promise<AsyncIterator<String>>;
  contactPersonCode: () => Promise<AsyncIterator<String>>;
  contactPersonGender: () => Promise<AsyncIterator<String>>;
  orderCodeCustomer: () => Promise<AsyncIterator<String>>;
  countryCode: () => Promise<AsyncIterator<String>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  orderManager: () => Promise<AsyncIterator<String>>;
  assignedTo: () => Promise<AsyncIterator<String>>;
  servicePackage: () => Promise<AsyncIterator<Float>>;
  problemDescription: () => Promise<AsyncIterator<String>>;
  problemCause: () => Promise<AsyncIterator<String>>;
  problemSolution: () => Promise<AsyncIterator<String>>;
  baseServiceOrderCode: () => Promise<AsyncIterator<String>>;
  isBaseServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  hasAdditionalServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  actualHours: () => Promise<AsyncIterator<Float>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  isExportedLocked: () => Promise<AsyncIterator<Boolean>>;
  complexId: () => Promise<AsyncIterator<ID_Output>>;
  complexCode: () => Promise<AsyncIterator<String>>;
  complexName: () => Promise<AsyncIterator<String>>;
  subComplexCode: () => Promise<AsyncIterator<String>>;
  subComplexName: () => Promise<AsyncIterator<String>>;
  roofCode: () => Promise<AsyncIterator<String>>;
  workType: () => Promise<AsyncIterator<String>>;
  statusReasonDescription: () => Promise<AsyncIterator<String>>;
  readyDateNew: () => Promise<AsyncIterator<String>>;
  roofPartner: () => Promise<AsyncIterator<String>>;
  roofPartnerName: () => Promise<AsyncIterator<String>>;
  roofWarranty: () => Promise<AsyncIterator<Boolean>>;
  roofIsAGutter: () => Promise<AsyncIterator<Boolean>>;
  amountOfMeasures: () => Promise<AsyncIterator<Int>>;
  roofingPartDescription: () => Promise<AsyncIterator<String>>;
  cause: () => Promise<AsyncIterator<String>>;
  measureDescription: () => Promise<AsyncIterator<String>>;
  consequentialDamageIndoor: () => Promise<AsyncIterator<String>>;
  roofTypeCode: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<Int>>;
  roofingPartCategories: () => Promise<AsyncIterator<String>>;
  roofingPartCodes: () => Promise<AsyncIterator<String>>;
  contractCode: () => Promise<AsyncIterator<String>>;
  invoiceType: () => Promise<AsyncIterator<String>>;
  billingAddress: () => Promise<AsyncIterator<String>>;
  roofNumber: () => Promise<AsyncIterator<String>>;
  workOrders: <T = Promise<AsyncIterator<WorkOrderSubscription>>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogs: <T = Promise<AsyncIterator<ActivityLogSubscription>>>(args?: {
    where?: ActivityLogWhereInput;
    orderBy?: ActivityLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceTexts: <T = Promise<AsyncIterator<ServiceTextSubscription>>>(args?: {
    where?: ServiceTextWhereInput;
    orderBy?: ServiceTextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customerFeedbacks: <
    T = Promise<AsyncIterator<CustomerFeedbackSubscription>>
  >(args?: {
    where?: CustomerFeedbackWhereInput;
    orderBy?: CustomerFeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogHistories: <
    T = Promise<AsyncIterator<ActivityLogHistorySubscription>>
  >(args?: {
    where?: ActivityLogHistoryWhereInput;
    orderBy?: ActivityLogHistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reporter: <T = ReporterSubscription>() => T;
  serviceOrderComments: <
    T = Promise<AsyncIterator<ServiceOrderCommentSubscription>>
  >(args?: {
    where?: ServiceOrderCommentWhereInput;
    orderBy?: ServiceOrderCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceAppointment: <T = ServiceAppointmentSubscription>() => T;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceOrderNullablePromise
  extends Promise<ServiceOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  globalId: () => Promise<String>;
  conceptId: () => Promise<String>;
  companyName: () => Promise<String>;
  callerCode: () => Promise<String>;
  orderType: () => Promise<String>;
  description: () => Promise<String>;
  ownerCode: () => Promise<String>;
  customerCode: () => Promise<String>;
  customerName: () => Promise<String>;
  billingCode: () => Promise<String>;
  customerFeature: () => Promise<String>;
  reference: () => Promise<String>;
  commissionDate: () => Promise<String>;
  serviceLocationCode: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  sourceType: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  territoryCode: () => Promise<String>;
  orderDate: () => Promise<String>;
  orderTime: () => Promise<String>;
  budgetHours: () => Promise<Float>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isFirmPlanned: () => Promise<Boolean>;
  startDate: () => Promise<String>;
  startTime: () => Promise<String>;
  endDate: () => Promise<String>;
  endTime: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  nextDeadline: () => Promise<String>;
  status: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  actualReferencePointDescription: () => Promise<String>;
  employeeCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<Boolean>;
  gdbServiceOrderTrackAndTrace: () => Promise<Boolean>;
  gdbServiceOrderKTO: () => Promise<Boolean>;
  ktoFiture: () => Promise<Float>;
  serviceType: () => Promise<String>;
  invoicedPrice: () => Promise<Float>;
  orderAmount: () => Promise<Float>;
  serviceControlPeriodDate: () => Promise<String>;
  isRemoteControl: () => Promise<Boolean>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  isSignatureHasValue: () => Promise<Boolean>;
  signedBy: () => Promise<String>;
  isSendReport: () => Promise<Boolean>;
  isFinishedFieldService: () => Promise<Boolean>;
  cratedBy: () => Promise<String>;
  creationDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<String>;
  updatedBy: () => Promise<String>;
  customerRemark: () => Promise<String>;
  internalRemark: () => Promise<String>;
  correctiveMaintenanceRemark: () => Promise<String>;
  agreementDate: () => Promise<String>;
  signature: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonGender: () => Promise<String>;
  orderCodeCustomer: () => Promise<String>;
  countryCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  assignedTo: () => Promise<String>;
  servicePackage: () => Promise<Float>;
  problemDescription: () => Promise<String>;
  problemCause: () => Promise<String>;
  problemSolution: () => Promise<String>;
  baseServiceOrderCode: () => Promise<String>;
  isBaseServiceOrder: () => Promise<Boolean>;
  hasAdditionalServiceOrder: () => Promise<Boolean>;
  actualHours: () => Promise<Float>;
  isPublished: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  orderNumber: () => Promise<String>;
  isExportedLocked: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  subComplexCode: () => Promise<String>;
  subComplexName: () => Promise<String>;
  roofCode: () => Promise<String>;
  workType: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  readyDateNew: () => Promise<String>;
  roofPartner: () => Promise<String>;
  roofPartnerName: () => Promise<String>;
  roofWarranty: () => Promise<Boolean>;
  roofIsAGutter: () => Promise<Boolean>;
  amountOfMeasures: () => Promise<Int>;
  roofingPartDescription: () => Promise<String>;
  cause: () => Promise<String>;
  measureDescription: () => Promise<String>;
  consequentialDamageIndoor: () => Promise<String>;
  roofTypeCode: () => Promise<String>;
  condition: () => Promise<Int>;
  roofingPartCategories: () => Promise<String>;
  roofingPartCodes: () => Promise<String>;
  contractCode: () => Promise<String>;
  invoiceType: () => Promise<String>;
  billingAddress: () => Promise<String>;
  roofNumber: () => Promise<String>;
  workOrders: <T = FragmentableArray<WorkOrder>>(args?: {
    where?: WorkOrderWhereInput;
    orderBy?: WorkOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogs: <T = FragmentableArray<ActivityLog>>(args?: {
    where?: ActivityLogWhereInput;
    orderBy?: ActivityLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceTexts: <T = FragmentableArray<ServiceText>>(args?: {
    where?: ServiceTextWhereInput;
    orderBy?: ServiceTextOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customerFeedbacks: <T = FragmentableArray<CustomerFeedback>>(args?: {
    where?: CustomerFeedbackWhereInput;
    orderBy?: CustomerFeedbackOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activityLogHistories: <T = FragmentableArray<ActivityLogHistory>>(args?: {
    where?: ActivityLogHistoryWhereInput;
    orderBy?: ActivityLogHistoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reporter: <T = ReporterPromise>() => T;
  serviceOrderComments: <T = FragmentableArray<ServiceOrderComment>>(args?: {
    where?: ServiceOrderCommentWhereInput;
    orderBy?: ServiceOrderCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceAppointment: <T = ServiceAppointmentPromise>() => T;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrder {
  id: ID_Output;
  code: String;
  status?: String;
  sourceCompanyName?: String;
  sourceType?: String;
  sourceCode?: String;
  description?: String;
  resourceType?: String;
  resourceCode?: String;
  resourceCompanyName?: String;
  isMainResource?: Boolean;
  serviceStatus?: String;
  statusReasonDescription?: String;
  isFinishedService?: Boolean;
  firstPossibleStartDate?: String;
  lastPossibleStartDate?: String;
  starDate?: String;
  endDate?: String;
  expectedHours?: Float;
  durationTime?: Float;
  isDuringClockTime?: Boolean;
  isFirmPlanned?: Boolean;
  isExportToFSA?: Boolean;
  exportToFSADate?: String;
  actualReferencePoint?: String;
  assignedTo?: String;
  globalDimensionCode?: String;
  serviceContractCode?: String;
  orderManager?: String;
  address?: String;
  postalCode?: String;
  city?: String;
  customerCode?: String;
  jobDescription?: String;
  soCode?: String;
  soCallerCode?: String;
  soOrderType?: String;
  soDescription?: String;
  soContactCode?: String;
  soContactPersonCode?: String;
  soCustomerFeature?: String;
  soBillingCode?: String;
  soReference?: String;
  soCommissionDate?: String;
  soServiceLocationCode?: String;
  soOrderCodeCustomer?: String;
  soName?: String;
  soName2?: String;
  soSourceType?: String;
  soServiceContractCode?: String;
  soGlobalDimensionCode?: String;
  soTerritoryCode?: String;
  soOrderDate?: String;
  soOrderTime?: String;
  soBudgetHours?: Float;
  soExpectedHours?: Float;
  soDurationTime?: Float;
  soIsFirmPlanned?: Boolean;
  soStarDate?: String;
  soStarTime?: String;
  soEndDate?: String;
  soEndTime?: String;
  soPriority?: PriorityType;
  soNextDeadline?: String;
  soStatus?: String;
  soActualReferencePoint?: String;
  soOrderManager?: String;
  soAssignedTo?: String;
  soEmployeeCode?: String;
  roofingPartnerName?: String;
  detectorType?: String;
  notInDakota?: String;
  soServiceType?: String;
  soInvoicedPrice?: Float;
  soServicePackage?: String;
  soOrderAmount?: Int;
  soServiceControlPeriodDate?: String;
  soIsRemoteControl?: Boolean;
  soCountryCode?: String;
  soProblemDescription?: String;
  soProblemCause?: String;
  soProblemSolution?: String;
  firstDeadline?: String;
  gdbServiceOrderStartDate?: String;
  dateExecuted?: String;
  gdbServiceOrderInvoicedDate?: String;
  isExportToFSA2?: Boolean;
  soExportToFSADate?: String;
  hasSignature?: Boolean;
  planAhead?: String;
  startTime?: String;
  endTime?: String;
  orderIsSent?: Boolean;
  isLocked: Boolean;
  lockedBy?: String;
  isExportBlocked: Boolean;
  updatedByUserId?: String;
  isBlocked: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface WorkOrderPromise extends Promise<WorkOrder>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  status: () => Promise<String>;
  sourceCompanyName: () => Promise<String>;
  sourceType: () => Promise<String>;
  sourceCode: () => Promise<String>;
  description: () => Promise<String>;
  resourceType: () => Promise<String>;
  resourceCode: () => Promise<String>;
  resourceCompanyName: () => Promise<String>;
  isMainResource: () => Promise<Boolean>;
  serviceStatus: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  isFinishedService: () => Promise<Boolean>;
  firstPossibleStartDate: () => Promise<String>;
  lastPossibleStartDate: () => Promise<String>;
  starDate: () => Promise<String>;
  endDate: () => Promise<String>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isDuringClockTime: () => Promise<Boolean>;
  isFirmPlanned: () => Promise<Boolean>;
  isExportToFSA: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  assignedTo: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  customerCode: () => Promise<String>;
  jobDescription: () => Promise<String>;
  soCode: () => Promise<String>;
  soCallerCode: () => Promise<String>;
  soOrderType: () => Promise<String>;
  soDescription: () => Promise<String>;
  soContactCode: () => Promise<String>;
  soContactPersonCode: () => Promise<String>;
  soCustomerFeature: () => Promise<String>;
  soBillingCode: () => Promise<String>;
  soReference: () => Promise<String>;
  soCommissionDate: () => Promise<String>;
  soServiceLocationCode: () => Promise<String>;
  soOrderCodeCustomer: () => Promise<String>;
  soName: () => Promise<String>;
  soName2: () => Promise<String>;
  soSourceType: () => Promise<String>;
  soServiceContractCode: () => Promise<String>;
  soGlobalDimensionCode: () => Promise<String>;
  soTerritoryCode: () => Promise<String>;
  soOrderDate: () => Promise<String>;
  soOrderTime: () => Promise<String>;
  soBudgetHours: () => Promise<Float>;
  soExpectedHours: () => Promise<Float>;
  soDurationTime: () => Promise<Float>;
  soIsFirmPlanned: () => Promise<Boolean>;
  soStarDate: () => Promise<String>;
  soStarTime: () => Promise<String>;
  soEndDate: () => Promise<String>;
  soEndTime: () => Promise<String>;
  soPriority: () => Promise<PriorityType>;
  soNextDeadline: () => Promise<String>;
  soStatus: () => Promise<String>;
  soActualReferencePoint: () => Promise<String>;
  soOrderManager: () => Promise<String>;
  soAssignedTo: () => Promise<String>;
  soEmployeeCode: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<String>;
  soServiceType: () => Promise<String>;
  soInvoicedPrice: () => Promise<Float>;
  soServicePackage: () => Promise<String>;
  soOrderAmount: () => Promise<Int>;
  soServiceControlPeriodDate: () => Promise<String>;
  soIsRemoteControl: () => Promise<Boolean>;
  soCountryCode: () => Promise<String>;
  soProblemDescription: () => Promise<String>;
  soProblemCause: () => Promise<String>;
  soProblemSolution: () => Promise<String>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  soExportToFSADate: () => Promise<String>;
  hasSignature: () => Promise<Boolean>;
  planAhead: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  orderIsSent: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  isExportBlocked: () => Promise<Boolean>;
  updatedByUserId: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  activityLog: <T = ActivityLogPromise>() => T;
  moment: <T = MomentPromise>() => T;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrderSubscription
  extends Promise<AsyncIterator<WorkOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  sourceCompanyName: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<String>>;
  sourceCode: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  resourceType: () => Promise<AsyncIterator<String>>;
  resourceCode: () => Promise<AsyncIterator<String>>;
  resourceCompanyName: () => Promise<AsyncIterator<String>>;
  isMainResource: () => Promise<AsyncIterator<Boolean>>;
  serviceStatus: () => Promise<AsyncIterator<String>>;
  statusReasonDescription: () => Promise<AsyncIterator<String>>;
  isFinishedService: () => Promise<AsyncIterator<Boolean>>;
  firstPossibleStartDate: () => Promise<AsyncIterator<String>>;
  lastPossibleStartDate: () => Promise<AsyncIterator<String>>;
  starDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  expectedHours: () => Promise<AsyncIterator<Float>>;
  durationTime: () => Promise<AsyncIterator<Float>>;
  isDuringClockTime: () => Promise<AsyncIterator<Boolean>>;
  isFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  isExportToFSA: () => Promise<AsyncIterator<Boolean>>;
  exportToFSADate: () => Promise<AsyncIterator<String>>;
  actualReferencePoint: () => Promise<AsyncIterator<String>>;
  assignedTo: () => Promise<AsyncIterator<String>>;
  globalDimensionCode: () => Promise<AsyncIterator<String>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  orderManager: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  jobDescription: () => Promise<AsyncIterator<String>>;
  soCode: () => Promise<AsyncIterator<String>>;
  soCallerCode: () => Promise<AsyncIterator<String>>;
  soOrderType: () => Promise<AsyncIterator<String>>;
  soDescription: () => Promise<AsyncIterator<String>>;
  soContactCode: () => Promise<AsyncIterator<String>>;
  soContactPersonCode: () => Promise<AsyncIterator<String>>;
  soCustomerFeature: () => Promise<AsyncIterator<String>>;
  soBillingCode: () => Promise<AsyncIterator<String>>;
  soReference: () => Promise<AsyncIterator<String>>;
  soCommissionDate: () => Promise<AsyncIterator<String>>;
  soServiceLocationCode: () => Promise<AsyncIterator<String>>;
  soOrderCodeCustomer: () => Promise<AsyncIterator<String>>;
  soName: () => Promise<AsyncIterator<String>>;
  soName2: () => Promise<AsyncIterator<String>>;
  soSourceType: () => Promise<AsyncIterator<String>>;
  soServiceContractCode: () => Promise<AsyncIterator<String>>;
  soGlobalDimensionCode: () => Promise<AsyncIterator<String>>;
  soTerritoryCode: () => Promise<AsyncIterator<String>>;
  soOrderDate: () => Promise<AsyncIterator<String>>;
  soOrderTime: () => Promise<AsyncIterator<String>>;
  soBudgetHours: () => Promise<AsyncIterator<Float>>;
  soExpectedHours: () => Promise<AsyncIterator<Float>>;
  soDurationTime: () => Promise<AsyncIterator<Float>>;
  soIsFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  soStarDate: () => Promise<AsyncIterator<String>>;
  soStarTime: () => Promise<AsyncIterator<String>>;
  soEndDate: () => Promise<AsyncIterator<String>>;
  soEndTime: () => Promise<AsyncIterator<String>>;
  soPriority: () => Promise<AsyncIterator<PriorityType>>;
  soNextDeadline: () => Promise<AsyncIterator<String>>;
  soStatus: () => Promise<AsyncIterator<String>>;
  soActualReferencePoint: () => Promise<AsyncIterator<String>>;
  soOrderManager: () => Promise<AsyncIterator<String>>;
  soAssignedTo: () => Promise<AsyncIterator<String>>;
  soEmployeeCode: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  detectorType: () => Promise<AsyncIterator<String>>;
  notInDakota: () => Promise<AsyncIterator<String>>;
  soServiceType: () => Promise<AsyncIterator<String>>;
  soInvoicedPrice: () => Promise<AsyncIterator<Float>>;
  soServicePackage: () => Promise<AsyncIterator<String>>;
  soOrderAmount: () => Promise<AsyncIterator<Int>>;
  soServiceControlPeriodDate: () => Promise<AsyncIterator<String>>;
  soIsRemoteControl: () => Promise<AsyncIterator<Boolean>>;
  soCountryCode: () => Promise<AsyncIterator<String>>;
  soProblemDescription: () => Promise<AsyncIterator<String>>;
  soProblemCause: () => Promise<AsyncIterator<String>>;
  soProblemSolution: () => Promise<AsyncIterator<String>>;
  firstDeadline: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderStartDate: () => Promise<AsyncIterator<String>>;
  dateExecuted: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderInvoicedDate: () => Promise<AsyncIterator<String>>;
  isExportToFSA2: () => Promise<AsyncIterator<Boolean>>;
  soExportToFSADate: () => Promise<AsyncIterator<String>>;
  hasSignature: () => Promise<AsyncIterator<Boolean>>;
  planAhead: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  orderIsSent: () => Promise<AsyncIterator<Boolean>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  isExportBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedByUserId: () => Promise<AsyncIterator<String>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  activityLog: <T = ActivityLogSubscription>() => T;
  moment: <T = MomentSubscription>() => T;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkOrderNullablePromise
  extends Promise<WorkOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  status: () => Promise<String>;
  sourceCompanyName: () => Promise<String>;
  sourceType: () => Promise<String>;
  sourceCode: () => Promise<String>;
  description: () => Promise<String>;
  resourceType: () => Promise<String>;
  resourceCode: () => Promise<String>;
  resourceCompanyName: () => Promise<String>;
  isMainResource: () => Promise<Boolean>;
  serviceStatus: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  isFinishedService: () => Promise<Boolean>;
  firstPossibleStartDate: () => Promise<String>;
  lastPossibleStartDate: () => Promise<String>;
  starDate: () => Promise<String>;
  endDate: () => Promise<String>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isDuringClockTime: () => Promise<Boolean>;
  isFirmPlanned: () => Promise<Boolean>;
  isExportToFSA: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  assignedTo: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  customerCode: () => Promise<String>;
  jobDescription: () => Promise<String>;
  soCode: () => Promise<String>;
  soCallerCode: () => Promise<String>;
  soOrderType: () => Promise<String>;
  soDescription: () => Promise<String>;
  soContactCode: () => Promise<String>;
  soContactPersonCode: () => Promise<String>;
  soCustomerFeature: () => Promise<String>;
  soBillingCode: () => Promise<String>;
  soReference: () => Promise<String>;
  soCommissionDate: () => Promise<String>;
  soServiceLocationCode: () => Promise<String>;
  soOrderCodeCustomer: () => Promise<String>;
  soName: () => Promise<String>;
  soName2: () => Promise<String>;
  soSourceType: () => Promise<String>;
  soServiceContractCode: () => Promise<String>;
  soGlobalDimensionCode: () => Promise<String>;
  soTerritoryCode: () => Promise<String>;
  soOrderDate: () => Promise<String>;
  soOrderTime: () => Promise<String>;
  soBudgetHours: () => Promise<Float>;
  soExpectedHours: () => Promise<Float>;
  soDurationTime: () => Promise<Float>;
  soIsFirmPlanned: () => Promise<Boolean>;
  soStarDate: () => Promise<String>;
  soStarTime: () => Promise<String>;
  soEndDate: () => Promise<String>;
  soEndTime: () => Promise<String>;
  soPriority: () => Promise<PriorityType>;
  soNextDeadline: () => Promise<String>;
  soStatus: () => Promise<String>;
  soActualReferencePoint: () => Promise<String>;
  soOrderManager: () => Promise<String>;
  soAssignedTo: () => Promise<String>;
  soEmployeeCode: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<String>;
  soServiceType: () => Promise<String>;
  soInvoicedPrice: () => Promise<Float>;
  soServicePackage: () => Promise<String>;
  soOrderAmount: () => Promise<Int>;
  soServiceControlPeriodDate: () => Promise<String>;
  soIsRemoteControl: () => Promise<Boolean>;
  soCountryCode: () => Promise<String>;
  soProblemDescription: () => Promise<String>;
  soProblemCause: () => Promise<String>;
  soProblemSolution: () => Promise<String>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  soExportToFSADate: () => Promise<String>;
  hasSignature: () => Promise<Boolean>;
  planAhead: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  orderIsSent: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  isExportBlocked: () => Promise<Boolean>;
  updatedByUserId: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  activityLog: <T = ActivityLogPromise>() => T;
  moment: <T = MomentPromise>() => T;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Moment {
  id: ID_Output;
  code: Int;
  type?: MomentEntityType;
  navisionCode?: Int;
  status?: String;
  actionId?: String;
  hasSoStatusChange: Boolean;
  hasWoPlanningStatusChange: Boolean;
  hasScStatusChange: Boolean;
  isWOPlanningBlocked: Boolean;
  isSCBlocked: Boolean;
  isSOBlocked: Boolean;
  isExportBlocked: Boolean;
}

export interface MomentPromise extends Promise<Moment>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  type: () => Promise<MomentEntityType>;
  navisionCode: () => Promise<Int>;
  status: () => Promise<String>;
  actionId: () => Promise<String>;
  hasSoStatusChange: () => Promise<Boolean>;
  hasWoPlanningStatusChange: () => Promise<Boolean>;
  hasScStatusChange: () => Promise<Boolean>;
  isWOPlanningBlocked: () => Promise<Boolean>;
  isSCBlocked: () => Promise<Boolean>;
  isSOBlocked: () => Promise<Boolean>;
  isExportBlocked: () => Promise<Boolean>;
}

export interface MomentSubscription
  extends Promise<AsyncIterator<Moment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<MomentEntityType>>;
  navisionCode: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<String>>;
  actionId: () => Promise<AsyncIterator<String>>;
  hasSoStatusChange: () => Promise<AsyncIterator<Boolean>>;
  hasWoPlanningStatusChange: () => Promise<AsyncIterator<Boolean>>;
  hasScStatusChange: () => Promise<AsyncIterator<Boolean>>;
  isWOPlanningBlocked: () => Promise<AsyncIterator<Boolean>>;
  isSCBlocked: () => Promise<AsyncIterator<Boolean>>;
  isSOBlocked: () => Promise<AsyncIterator<Boolean>>;
  isExportBlocked: () => Promise<AsyncIterator<Boolean>>;
}

export interface MomentNullablePromise
  extends Promise<Moment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  type: () => Promise<MomentEntityType>;
  navisionCode: () => Promise<Int>;
  status: () => Promise<String>;
  actionId: () => Promise<String>;
  hasSoStatusChange: () => Promise<Boolean>;
  hasWoPlanningStatusChange: () => Promise<Boolean>;
  hasScStatusChange: () => Promise<Boolean>;
  isWOPlanningBlocked: () => Promise<Boolean>;
  isSCBlocked: () => Promise<Boolean>;
  isSOBlocked: () => Promise<Boolean>;
  isExportBlocked: () => Promise<Boolean>;
}

export interface ServiceText {
  id: ID_Output;
  code: String;
  tableName?: String;
  type?: String;
  lineNumber?: Int;
  date?: String;
  comment?: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceTextPromise extends Promise<ServiceText>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  tableName: () => Promise<String>;
  type: () => Promise<String>;
  lineNumber: () => Promise<Int>;
  date: () => Promise<String>;
  comment: () => Promise<String>;
  createdBy: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceTextSubscription
  extends Promise<AsyncIterator<ServiceText>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  tableName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  lineNumber: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceTextNullablePromise
  extends Promise<ServiceText | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  tableName: () => Promise<String>;
  type: () => Promise<String>;
  lineNumber: () => Promise<Int>;
  date: () => Promise<String>;
  comment: () => Promise<String>;
  createdBy: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomerFeedback {
  id: ID_Output;
  rating?: Int;
  stage?: String;
  skipped?: Boolean;
  comment?: String;
  customerRole?: Json;
  serviceOrderId: ID_Output;
  notificationId: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomerFeedbackPromise
  extends Promise<CustomerFeedback>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  stage: () => Promise<String>;
  skipped: () => Promise<Boolean>;
  comment: () => Promise<String>;
  customerRole: () => Promise<Json>;
  serviceOrderId: () => Promise<ID_Output>;
  notificationId: () => Promise<ID_Output>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomerFeedbackSubscription
  extends Promise<AsyncIterator<CustomerFeedback>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  stage: () => Promise<AsyncIterator<String>>;
  skipped: () => Promise<AsyncIterator<Boolean>>;
  comment: () => Promise<AsyncIterator<String>>;
  customerRole: () => Promise<AsyncIterator<Json>>;
  serviceOrderId: () => Promise<AsyncIterator<ID_Output>>;
  notificationId: () => Promise<AsyncIterator<ID_Output>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerFeedbackNullablePromise
  extends Promise<CustomerFeedback | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  stage: () => Promise<String>;
  skipped: () => Promise<Boolean>;
  comment: () => Promise<String>;
  customerRole: () => Promise<Json>;
  serviceOrderId: () => Promise<ID_Output>;
  notificationId: () => Promise<ID_Output>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityLogHistory {
  id: ID_Output;
  type?: String;
  code?: String;
  registerDate?: DateTimeOutput;
  employeeCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ActivityLogHistoryPromise
  extends Promise<ActivityLogHistory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  code: () => Promise<String>;
  registerDate: () => Promise<DateTimeOutput>;
  employeeCode: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityLogHistorySubscription
  extends Promise<AsyncIterator<ActivityLogHistory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  registerDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityLogHistoryNullablePromise
  extends Promise<ActivityLogHistory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  code: () => Promise<String>;
  registerDate: () => Promise<DateTimeOutput>;
  employeeCode: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Reporter {
  id: ID_Output;
  code: String;
  name?: String;
  surname?: String;
  phone?: String;
  email?: String;
  onBehalfOf?: String;
  type?: ReporterType;
  reference?: String;
  priority?: PriorityType;
  workText?: String;
  internalText?: String;
  adviceText?: String;
  description?: String;
  isTrackAndTraceActive: Boolean;
}

export interface ReporterPromise extends Promise<Reporter>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  onBehalfOf: () => Promise<String>;
  type: () => Promise<ReporterType>;
  reference: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  workText: () => Promise<String>;
  internalText: () => Promise<String>;
  adviceText: () => Promise<String>;
  description: () => Promise<String>;
  isTrackAndTraceActive: () => Promise<Boolean>;
}

export interface ReporterSubscription
  extends Promise<AsyncIterator<Reporter>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  onBehalfOf: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ReporterType>>;
  reference: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<PriorityType>>;
  workText: () => Promise<AsyncIterator<String>>;
  internalText: () => Promise<AsyncIterator<String>>;
  adviceText: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isTrackAndTraceActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface ReporterNullablePromise
  extends Promise<Reporter | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  onBehalfOf: () => Promise<String>;
  type: () => Promise<ReporterType>;
  reference: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  workText: () => Promise<String>;
  internalText: () => Promise<String>;
  adviceText: () => Promise<String>;
  description: () => Promise<String>;
  isTrackAndTraceActive: () => Promise<Boolean>;
}

export interface ServiceOrderComment {
  id: ID_Output;
  orderCommentType?: ServiceOrderCommentType;
  text?: String;
  authorCode?: String;
  date?: String;
}

export interface ServiceOrderCommentPromise
  extends Promise<ServiceOrderComment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderCommentType: () => Promise<ServiceOrderCommentType>;
  text: () => Promise<String>;
  authorCode: () => Promise<String>;
  date: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
}

export interface ServiceOrderCommentSubscription
  extends Promise<AsyncIterator<ServiceOrderComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderCommentType: () => Promise<AsyncIterator<ServiceOrderCommentType>>;
  text: () => Promise<AsyncIterator<String>>;
  authorCode: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
}

export interface ServiceOrderCommentNullablePromise
  extends Promise<ServiceOrderComment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderCommentType: () => Promise<ServiceOrderCommentType>;
  text: () => Promise<String>;
  authorCode: () => Promise<String>;
  date: () => Promise<String>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
}

export interface ServiceAppointment {
  id: ID_Output;
  code: String;
  orderType?: String;
  orderDate?: String;
  status?: String;
  roofCodes: String[];
  isLocked: Boolean;
  lockedBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceAppointmentPromise
  extends Promise<ServiceAppointment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  orderType: () => Promise<String>;
  orderDate: () => Promise<String>;
  status: () => Promise<String>;
  roofCodes: () => Promise<String[]>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  serviceContract: <T = ServiceContractPromise>() => T;
  serviceOrders: <T = FragmentableArray<ServiceOrder>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceAppointmentSubscription
  extends Promise<AsyncIterator<ServiceAppointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  orderType: () => Promise<AsyncIterator<String>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  roofCodes: () => Promise<AsyncIterator<String[]>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  serviceContract: <T = ServiceContractSubscription>() => T;
  serviceOrders: <T = Promise<AsyncIterator<ServiceOrderSubscription>>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceAppointmentNullablePromise
  extends Promise<ServiceAppointment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  orderType: () => Promise<String>;
  orderDate: () => Promise<String>;
  status: () => Promise<String>;
  roofCodes: () => Promise<String[]>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  serviceContract: <T = ServiceContractPromise>() => T;
  serviceOrders: <T = FragmentableArray<ServiceOrder>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContract {
  id: ID_Output;
  code: String;
  description?: String;
  roofAddress?: String;
  roofCity?: String;
  status?: ContractStatus;
  orderDate?: String;
  startingDate?: String;
  endingDate?: String;
  terminationDate?: String;
  customerCode?: String;
  contactPersonCode?: String;
  contactPersonCodes: String[];
  name?: String;
  name2?: String;
  address?: String;
  postcode?: String;
  city?: String;
  contactName?: String;
  phoneNo?: String;
  email?: String;
  billToCustomerNoContr?: String;
  billToNameContract?: String;
  billToAddressContract?: String;
  billToPostCodeContract?: String;
  billToCityContract?: String;
  billToContactPersonContr?: String;
  billToContPersNameCtr?: String;
  globalDimension1Code?: String;
  initialSalesAmount?: Float;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Float;
  lastIndexDate?: String;
  contractManager?: String;
  contractManagerName?: String;
  yourReference?: String;
  blocked?: Boolean;
  firstYearMaintenance?: Int;
  maintenanceMonth?: Int;
  acknowledgedSO?: Int;
  createdSO?: Int;
  openedSO?: Int;
  readySO?: Int;
  percentageReady?: Int;
  workingHours?: Float;
  spendHours?: Float;
  hoursSpentLastYear?: Float;
  totalCost?: Float;
  billedAmount?: Float;
  invoicedUntil?: String;
  m2Dak?: Float;
  m2DakReady?: Float;
  m2DakReadyPercent?: String;
  reportDocument?: String;
  installmentsBasedOnProgress?: Boolean;
  invoiceType?: ContractInvoiceType;
  installmentType?: ContractInstallmentType;
  invoicePeriod?: ContractInvoicePeriod;
  currencyCode?: String;
  serviceIndexMethod?: String;
  invoiceTextInstallments?: String;
  outsourced?: Boolean;
  lastExecutedBy?: String;
  isLocked: Boolean;
  lockedBy?: String;
}

export interface ServiceContractPromise
  extends Promise<ServiceContract>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  roofAddress: () => Promise<String>;
  roofCity: () => Promise<String>;
  status: () => Promise<ContractStatus>;
  orderDate: () => Promise<String>;
  startingDate: () => Promise<String>;
  endingDate: () => Promise<String>;
  terminationDate: () => Promise<String>;
  customerCode: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonCodes: () => Promise<String[]>;
  name: () => Promise<String>;
  name2: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  contactName: () => Promise<String>;
  phoneNo: () => Promise<String>;
  email: () => Promise<String>;
  billToCustomerNoContr: () => Promise<String>;
  billToNameContract: () => Promise<String>;
  billToAddressContract: () => Promise<String>;
  billToPostCodeContract: () => Promise<String>;
  billToCityContract: () => Promise<String>;
  billToContactPersonContr: () => Promise<String>;
  billToContPersNameCtr: () => Promise<String>;
  globalDimension1Code: () => Promise<String>;
  initialSalesAmount: () => Promise<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate: () => Promise<Float>;
  lastIndexDate: () => Promise<String>;
  contractManager: () => Promise<String>;
  contractManagerName: () => Promise<String>;
  yourReference: () => Promise<String>;
  blocked: () => Promise<Boolean>;
  firstYearMaintenance: () => Promise<Int>;
  maintenanceMonth: () => Promise<Int>;
  acknowledgedSO: () => Promise<Int>;
  createdSO: () => Promise<Int>;
  openedSO: () => Promise<Int>;
  readySO: () => Promise<Int>;
  percentageReady: () => Promise<Int>;
  workingHours: () => Promise<Float>;
  spendHours: () => Promise<Float>;
  hoursSpentLastYear: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  invoicedUntil: () => Promise<String>;
  m2Dak: () => Promise<Float>;
  m2DakReady: () => Promise<Float>;
  m2DakReadyPercent: () => Promise<String>;
  reportDocument: () => Promise<String>;
  installmentsBasedOnProgress: () => Promise<Boolean>;
  invoiceType: () => Promise<ContractInvoiceType>;
  installmentType: () => Promise<ContractInstallmentType>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  currencyCode: () => Promise<String>;
  serviceIndexMethod: () => Promise<String>;
  invoiceTextInstallments: () => Promise<String>;
  outsourced: () => Promise<Boolean>;
  lastExecutedBy: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  ServiceAppointments: <T = FragmentableArray<ServiceAppointment>>(args?: {
    where?: ServiceAppointmentWhereInput;
    orderBy?: ServiceAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceOrders: <T = FragmentableArray<ServiceOrder>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceContractSubscription
  extends Promise<AsyncIterator<ServiceContract>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  roofAddress: () => Promise<AsyncIterator<String>>;
  roofCity: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ContractStatus>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  startingDate: () => Promise<AsyncIterator<String>>;
  endingDate: () => Promise<AsyncIterator<String>>;
  terminationDate: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  contactPersonCode: () => Promise<AsyncIterator<String>>;
  contactPersonCodes: () => Promise<AsyncIterator<String[]>>;
  name: () => Promise<AsyncIterator<String>>;
  name2: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  contactName: () => Promise<AsyncIterator<String>>;
  phoneNo: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  billToCustomerNoContr: () => Promise<AsyncIterator<String>>;
  billToNameContract: () => Promise<AsyncIterator<String>>;
  billToAddressContract: () => Promise<AsyncIterator<String>>;
  billToPostCodeContract: () => Promise<AsyncIterator<String>>;
  billToCityContract: () => Promise<AsyncIterator<String>>;
  billToContactPersonContr: () => Promise<AsyncIterator<String>>;
  billToContPersNameCtr: () => Promise<AsyncIterator<String>>;
  globalDimension1Code: () => Promise<AsyncIterator<String>>;
  initialSalesAmount: () => Promise<AsyncIterator<Float>>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate: () => Promise<
    AsyncIterator<Float>
  >;
  lastIndexDate: () => Promise<AsyncIterator<String>>;
  contractManager: () => Promise<AsyncIterator<String>>;
  contractManagerName: () => Promise<AsyncIterator<String>>;
  yourReference: () => Promise<AsyncIterator<String>>;
  blocked: () => Promise<AsyncIterator<Boolean>>;
  firstYearMaintenance: () => Promise<AsyncIterator<Int>>;
  maintenanceMonth: () => Promise<AsyncIterator<Int>>;
  acknowledgedSO: () => Promise<AsyncIterator<Int>>;
  createdSO: () => Promise<AsyncIterator<Int>>;
  openedSO: () => Promise<AsyncIterator<Int>>;
  readySO: () => Promise<AsyncIterator<Int>>;
  percentageReady: () => Promise<AsyncIterator<Int>>;
  workingHours: () => Promise<AsyncIterator<Float>>;
  spendHours: () => Promise<AsyncIterator<Float>>;
  hoursSpentLastYear: () => Promise<AsyncIterator<Float>>;
  totalCost: () => Promise<AsyncIterator<Float>>;
  billedAmount: () => Promise<AsyncIterator<Float>>;
  invoicedUntil: () => Promise<AsyncIterator<String>>;
  m2Dak: () => Promise<AsyncIterator<Float>>;
  m2DakReady: () => Promise<AsyncIterator<Float>>;
  m2DakReadyPercent: () => Promise<AsyncIterator<String>>;
  reportDocument: () => Promise<AsyncIterator<String>>;
  installmentsBasedOnProgress: () => Promise<AsyncIterator<Boolean>>;
  invoiceType: () => Promise<AsyncIterator<ContractInvoiceType>>;
  installmentType: () => Promise<AsyncIterator<ContractInstallmentType>>;
  invoicePeriod: () => Promise<AsyncIterator<ContractInvoicePeriod>>;
  currencyCode: () => Promise<AsyncIterator<String>>;
  serviceIndexMethod: () => Promise<AsyncIterator<String>>;
  invoiceTextInstallments: () => Promise<AsyncIterator<String>>;
  outsourced: () => Promise<AsyncIterator<Boolean>>;
  lastExecutedBy: () => Promise<AsyncIterator<String>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  ServiceAppointments: <
    T = Promise<AsyncIterator<ServiceAppointmentSubscription>>
  >(args?: {
    where?: ServiceAppointmentWhereInput;
    orderBy?: ServiceAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceOrders: <T = Promise<AsyncIterator<ServiceOrderSubscription>>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceContractNullablePromise
  extends Promise<ServiceContract | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  roofAddress: () => Promise<String>;
  roofCity: () => Promise<String>;
  status: () => Promise<ContractStatus>;
  orderDate: () => Promise<String>;
  startingDate: () => Promise<String>;
  endingDate: () => Promise<String>;
  terminationDate: () => Promise<String>;
  customerCode: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonCodes: () => Promise<String[]>;
  name: () => Promise<String>;
  name2: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  contactName: () => Promise<String>;
  phoneNo: () => Promise<String>;
  email: () => Promise<String>;
  billToCustomerNoContr: () => Promise<String>;
  billToNameContract: () => Promise<String>;
  billToAddressContract: () => Promise<String>;
  billToPostCodeContract: () => Promise<String>;
  billToCityContract: () => Promise<String>;
  billToContactPersonContr: () => Promise<String>;
  billToContPersNameCtr: () => Promise<String>;
  globalDimension1Code: () => Promise<String>;
  initialSalesAmount: () => Promise<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate: () => Promise<Float>;
  lastIndexDate: () => Promise<String>;
  contractManager: () => Promise<String>;
  contractManagerName: () => Promise<String>;
  yourReference: () => Promise<String>;
  blocked: () => Promise<Boolean>;
  firstYearMaintenance: () => Promise<Int>;
  maintenanceMonth: () => Promise<Int>;
  acknowledgedSO: () => Promise<Int>;
  createdSO: () => Promise<Int>;
  openedSO: () => Promise<Int>;
  readySO: () => Promise<Int>;
  percentageReady: () => Promise<Int>;
  workingHours: () => Promise<Float>;
  spendHours: () => Promise<Float>;
  hoursSpentLastYear: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  invoicedUntil: () => Promise<String>;
  m2Dak: () => Promise<Float>;
  m2DakReady: () => Promise<Float>;
  m2DakReadyPercent: () => Promise<String>;
  reportDocument: () => Promise<String>;
  installmentsBasedOnProgress: () => Promise<Boolean>;
  invoiceType: () => Promise<ContractInvoiceType>;
  installmentType: () => Promise<ContractInstallmentType>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  currencyCode: () => Promise<String>;
  serviceIndexMethod: () => Promise<String>;
  invoiceTextInstallments: () => Promise<String>;
  outsourced: () => Promise<Boolean>;
  lastExecutedBy: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  ServiceAppointments: <T = FragmentableArray<ServiceAppointment>>(args?: {
    where?: ServiceAppointmentWhereInput;
    orderBy?: ServiceAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  serviceOrders: <T = FragmentableArray<ServiceOrder>>(args?: {
    where?: ServiceOrderWhereInput;
    orderBy?: ServiceOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ActivityLogConnection {
  pageInfo: PageInfo;
  edges: ActivityLogEdge[];
}

export interface ActivityLogConnectionPromise
  extends Promise<ActivityLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityLogEdge>>() => T;
  aggregate: <T = AggregateActivityLogPromise>() => T;
}

export interface ActivityLogConnectionSubscription
  extends Promise<AsyncIterator<ActivityLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityLogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivityLogSubscription>() => T;
}

export interface ActivityLogEdge {
  node: ActivityLog;
  cursor: String;
}

export interface ActivityLogEdgePromise
  extends Promise<ActivityLogEdge>,
    Fragmentable {
  node: <T = ActivityLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityLogEdgeSubscription
  extends Promise<AsyncIterator<ActivityLogEdge>>,
    Fragmentable {
  node: <T = ActivityLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivityLog {
  count: Int;
}

export interface AggregateActivityLogPromise
  extends Promise<AggregateActivityLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivityLogSubscription
  extends Promise<AsyncIterator<AggregateActivityLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityLogHistoryConnection {
  pageInfo: PageInfo;
  edges: ActivityLogHistoryEdge[];
}

export interface ActivityLogHistoryConnectionPromise
  extends Promise<ActivityLogHistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityLogHistoryEdge>>() => T;
  aggregate: <T = AggregateActivityLogHistoryPromise>() => T;
}

export interface ActivityLogHistoryConnectionSubscription
  extends Promise<AsyncIterator<ActivityLogHistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ActivityLogHistoryEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateActivityLogHistorySubscription>() => T;
}

export interface ActivityLogHistoryEdge {
  node: ActivityLogHistory;
  cursor: String;
}

export interface ActivityLogHistoryEdgePromise
  extends Promise<ActivityLogHistoryEdge>,
    Fragmentable {
  node: <T = ActivityLogHistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityLogHistoryEdgeSubscription
  extends Promise<AsyncIterator<ActivityLogHistoryEdge>>,
    Fragmentable {
  node: <T = ActivityLogHistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivityLogHistory {
  count: Int;
}

export interface AggregateActivityLogHistoryPromise
  extends Promise<AggregateActivityLogHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivityLogHistorySubscription
  extends Promise<AsyncIterator<AggregateActivityLogHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerFeedbackConnection {
  pageInfo: PageInfo;
  edges: CustomerFeedbackEdge[];
}

export interface CustomerFeedbackConnectionPromise
  extends Promise<CustomerFeedbackConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerFeedbackEdge>>() => T;
  aggregate: <T = AggregateCustomerFeedbackPromise>() => T;
}

export interface CustomerFeedbackConnectionSubscription
  extends Promise<AsyncIterator<CustomerFeedbackConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerFeedbackEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerFeedbackSubscription>() => T;
}

export interface CustomerFeedbackEdge {
  node: CustomerFeedback;
  cursor: String;
}

export interface CustomerFeedbackEdgePromise
  extends Promise<CustomerFeedbackEdge>,
    Fragmentable {
  node: <T = CustomerFeedbackPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerFeedbackEdgeSubscription
  extends Promise<AsyncIterator<CustomerFeedbackEdge>>,
    Fragmentable {
  node: <T = CustomerFeedbackSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomerFeedback {
  count: Int;
}

export interface AggregateCustomerFeedbackPromise
  extends Promise<AggregateCustomerFeedback>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerFeedbackSubscription
  extends Promise<AsyncIterator<AggregateCustomerFeedback>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  name?: String;
  actionId: String;
  type: EventType;
  order?: Int;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  actionId: () => Promise<String>;
  type: () => Promise<EventType>;
  order: () => Promise<Int>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  actionId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<EventType>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  actionId: () => Promise<String>;
  type: () => Promise<EventType>;
  order: () => Promise<Int>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Faq {
  id: ID_Output;
  question?: String;
  answer?: String;
  header?: String;
  projectNumber: String;
}

export interface FaqPromise extends Promise<Faq>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
  header: () => Promise<String>;
  projectNumber: () => Promise<String>;
}

export interface FaqSubscription
  extends Promise<AsyncIterator<Faq>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
  header: () => Promise<AsyncIterator<String>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
}

export interface FaqNullablePromise extends Promise<Faq | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
  header: () => Promise<String>;
  projectNumber: () => Promise<String>;
}

export interface FaqConnection {
  pageInfo: PageInfo;
  edges: FaqEdge[];
}

export interface FaqConnectionPromise
  extends Promise<FaqConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FaqEdge>>() => T;
  aggregate: <T = AggregateFaqPromise>() => T;
}

export interface FaqConnectionSubscription
  extends Promise<AsyncIterator<FaqConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FaqEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFaqSubscription>() => T;
}

export interface FaqEdge {
  node: Faq;
  cursor: String;
}

export interface FaqEdgePromise extends Promise<FaqEdge>, Fragmentable {
  node: <T = FaqPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FaqEdgeSubscription
  extends Promise<AsyncIterator<FaqEdge>>,
    Fragmentable {
  node: <T = FaqSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFaq {
  count: Int;
}

export interface AggregateFaqPromise
  extends Promise<AggregateFaq>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFaqSubscription
  extends Promise<AsyncIterator<AggregateFaq>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KimInformation {
  id: ID_Output;
  projectNumber: String;
  projectLeader?: String;
  projectLeaderPhoto?: String;
  foreman?: String;
  foremanPhoto?: String;
  email?: String;
  phone?: String;
  startDate?: String;
  schedule?: String;
  deliveryDate?: String;
  noiseAndDrilling?: String;
  noiseAndGravel?: String;
  noiseAndDemolition?: String;
  vibrationDemolition?: String;
  dustAndWipe?: String;
  dustAndDemolish?: String;
  smellAndBitumen?: String;
  smellAndCoatings?: String;
  crane?: String;
  container?: String;
  constructionSite?: String;
  photo?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface KimInformationPromise
  extends Promise<KimInformation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  projectLeader: () => Promise<String>;
  projectLeaderPhoto: () => Promise<String>;
  foreman: () => Promise<String>;
  foremanPhoto: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  startDate: () => Promise<String>;
  schedule: () => Promise<String>;
  deliveryDate: () => Promise<String>;
  noiseAndDrilling: () => Promise<String>;
  noiseAndGravel: () => Promise<String>;
  noiseAndDemolition: () => Promise<String>;
  vibrationDemolition: () => Promise<String>;
  dustAndWipe: () => Promise<String>;
  dustAndDemolish: () => Promise<String>;
  smellAndBitumen: () => Promise<String>;
  smellAndCoatings: () => Promise<String>;
  crane: () => Promise<String>;
  container: () => Promise<String>;
  constructionSite: () => Promise<String>;
  photo: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface KimInformationSubscription
  extends Promise<AsyncIterator<KimInformation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
  projectLeader: () => Promise<AsyncIterator<String>>;
  projectLeaderPhoto: () => Promise<AsyncIterator<String>>;
  foreman: () => Promise<AsyncIterator<String>>;
  foremanPhoto: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  schedule: () => Promise<AsyncIterator<String>>;
  deliveryDate: () => Promise<AsyncIterator<String>>;
  noiseAndDrilling: () => Promise<AsyncIterator<String>>;
  noiseAndGravel: () => Promise<AsyncIterator<String>>;
  noiseAndDemolition: () => Promise<AsyncIterator<String>>;
  vibrationDemolition: () => Promise<AsyncIterator<String>>;
  dustAndWipe: () => Promise<AsyncIterator<String>>;
  dustAndDemolish: () => Promise<AsyncIterator<String>>;
  smellAndBitumen: () => Promise<AsyncIterator<String>>;
  smellAndCoatings: () => Promise<AsyncIterator<String>>;
  crane: () => Promise<AsyncIterator<String>>;
  container: () => Promise<AsyncIterator<String>>;
  constructionSite: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KimInformationNullablePromise
  extends Promise<KimInformation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  projectLeader: () => Promise<String>;
  projectLeaderPhoto: () => Promise<String>;
  foreman: () => Promise<String>;
  foremanPhoto: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  startDate: () => Promise<String>;
  schedule: () => Promise<String>;
  deliveryDate: () => Promise<String>;
  noiseAndDrilling: () => Promise<String>;
  noiseAndGravel: () => Promise<String>;
  noiseAndDemolition: () => Promise<String>;
  vibrationDemolition: () => Promise<String>;
  dustAndWipe: () => Promise<String>;
  dustAndDemolish: () => Promise<String>;
  smellAndBitumen: () => Promise<String>;
  smellAndCoatings: () => Promise<String>;
  crane: () => Promise<String>;
  container: () => Promise<String>;
  constructionSite: () => Promise<String>;
  photo: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface KimInformationConnection {
  pageInfo: PageInfo;
  edges: KimInformationEdge[];
}

export interface KimInformationConnectionPromise
  extends Promise<KimInformationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KimInformationEdge>>() => T;
  aggregate: <T = AggregateKimInformationPromise>() => T;
}

export interface KimInformationConnectionSubscription
  extends Promise<AsyncIterator<KimInformationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KimInformationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKimInformationSubscription>() => T;
}

export interface KimInformationEdge {
  node: KimInformation;
  cursor: String;
}

export interface KimInformationEdgePromise
  extends Promise<KimInformationEdge>,
    Fragmentable {
  node: <T = KimInformationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KimInformationEdgeSubscription
  extends Promise<AsyncIterator<KimInformationEdge>>,
    Fragmentable {
  node: <T = KimInformationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKimInformation {
  count: Int;
}

export interface AggregateKimInformationPromise
  extends Promise<AggregateKimInformation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKimInformationSubscription
  extends Promise<AsyncIterator<AggregateKimInformation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MomentConnection {
  pageInfo: PageInfo;
  edges: MomentEdge[];
}

export interface MomentConnectionPromise
  extends Promise<MomentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MomentEdge>>() => T;
  aggregate: <T = AggregateMomentPromise>() => T;
}

export interface MomentConnectionSubscription
  extends Promise<AsyncIterator<MomentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MomentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMomentSubscription>() => T;
}

export interface MomentEdge {
  node: Moment;
  cursor: String;
}

export interface MomentEdgePromise extends Promise<MomentEdge>, Fragmentable {
  node: <T = MomentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MomentEdgeSubscription
  extends Promise<AsyncIterator<MomentEdge>>,
    Fragmentable {
  node: <T = MomentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMoment {
  count: Int;
}

export interface AggregateMomentPromise
  extends Promise<AggregateMoment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMomentSubscription
  extends Promise<AsyncIterator<AggregateMoment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Project {
  id: ID_Output;
  projectNumber: String;
  location?: String;
  employeeCode?: String;
  ownerCode?: String;
  employeeName?: String;
  mainProject?: String;
  description?: String;
  contractValue?: Float;
  additionalTotalAmount?: Float;
  percentageDone?: Int;
  percentageDoneDate?: String;
  percentageDoneMinValue?: Int;
  address?: String;
  city?: String;
  complexExists?: Boolean;
  complexId?: ID_Output;
  complexCode?: String;
  complexName?: String;
  complexPhotoNo?: String;
  complexPhotoUrl?: String;
  amountSpent?: Float;
  spentVsBudgetted?: Int;
  amountOnReceipt?: Float;
  receiptIsNecessary?: Boolean;
  invoiced?: Float;
  qualityMeasurementIsNecessary?: ReportIsNecessary;
  progressReportIsNecessary?: ReportIsNecessary;
  deliveryReportIsNecessary?: ReportIsNecessary;
  qualityMeasurementIsComplete?: Boolean;
  progressReportIsComplete?: Boolean;
  deliveryReportIsComplete?: Boolean;
  additionalWorkDescription1?: String;
  additionalWorkAmount1?: Float;
  additionalWorkDescription2?: String;
  additionalWorkAmount2?: Float;
  additionalWorkDescription3?: String;
  additionalWorkAmount3?: Float;
  additionalWorkDescription4?: String;
  additionalWorkAmount4?: Float;
  additionalWorkDescription5?: String;
  additionalWorkAmount5?: Float;
  additionalWorkDescription6?: String;
  additionalWorkAmount6?: Float;
  qualityMeasurementDocumentNo?: String;
  progressReportDocumentNo?: String;
  deliveryReportDocumentNo?: String;
  visitReportDocumentNo?: String;
  incidentReportDocumentNo?: String;
  deviationFormDocumentNo?: String;
  qualityMeasurementDocumentUrl?: String;
  progressReportDocumentUrl?: String;
  deliveryReportDocumentUrl?: String;
  visitReportDocumentUrl?: String;
  incidentReportDocumentUrl?: String;
  deviationFormDocumentUrl?: String;
  isMainProject?: Boolean;
  expectedStartDate?: String;
  expectedEndDate?: String;
  budgetHours?: Int;
  numberOfDays?: Int;
  numberOfHourlyWorkBudget?: Int;
  subcontractorName?: String;
  projectMemo?: String;
  projectType?: ProjectType;
  postalCode?: String;
  salesPersonCode?: String;
  estimatorCode?: String;
  projectManagerCode?: String;
  siteManagerCode?: String;
  team?: String;
  status?: String;
  statusModificationDate?: String;
  billToCustomerNo?: String;
  commissionDate?: String;
  startDate?: String;
  endDate?: String;
  warrantyEndDate?: String;
  workType?: String;
  roofingPartnerName?: String;
  isAppProject: Boolean;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  location: () => Promise<String>;
  employeeCode: () => Promise<String>;
  ownerCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  mainProject: () => Promise<String>;
  description: () => Promise<String>;
  contractValue: () => Promise<Float>;
  additionalTotalAmount: () => Promise<Float>;
  percentageDone: () => Promise<Int>;
  percentageDoneDate: () => Promise<String>;
  percentageDoneMinValue: () => Promise<Int>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  complexExists: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  complexPhotoNo: () => Promise<String>;
  complexPhotoUrl: () => Promise<String>;
  amountSpent: () => Promise<Float>;
  spentVsBudgetted: () => Promise<Int>;
  amountOnReceipt: () => Promise<Float>;
  receiptIsNecessary: () => Promise<Boolean>;
  invoiced: () => Promise<Float>;
  qualityMeasurementIsNecessary: () => Promise<ReportIsNecessary>;
  progressReportIsNecessary: () => Promise<ReportIsNecessary>;
  deliveryReportIsNecessary: () => Promise<ReportIsNecessary>;
  qualityMeasurementIsComplete: () => Promise<Boolean>;
  progressReportIsComplete: () => Promise<Boolean>;
  deliveryReportIsComplete: () => Promise<Boolean>;
  additionalWorkDescription1: () => Promise<String>;
  additionalWorkAmount1: () => Promise<Float>;
  additionalWorkDescription2: () => Promise<String>;
  additionalWorkAmount2: () => Promise<Float>;
  additionalWorkDescription3: () => Promise<String>;
  additionalWorkAmount3: () => Promise<Float>;
  additionalWorkDescription4: () => Promise<String>;
  additionalWorkAmount4: () => Promise<Float>;
  additionalWorkDescription5: () => Promise<String>;
  additionalWorkAmount5: () => Promise<Float>;
  additionalWorkDescription6: () => Promise<String>;
  additionalWorkAmount6: () => Promise<Float>;
  qualityMeasurementDocumentNo: () => Promise<String>;
  progressReportDocumentNo: () => Promise<String>;
  deliveryReportDocumentNo: () => Promise<String>;
  visitReportDocumentNo: () => Promise<String>;
  incidentReportDocumentNo: () => Promise<String>;
  deviationFormDocumentNo: () => Promise<String>;
  qualityMeasurementDocumentUrl: () => Promise<String>;
  progressReportDocumentUrl: () => Promise<String>;
  deliveryReportDocumentUrl: () => Promise<String>;
  visitReportDocumentUrl: () => Promise<String>;
  incidentReportDocumentUrl: () => Promise<String>;
  deviationFormDocumentUrl: () => Promise<String>;
  isMainProject: () => Promise<Boolean>;
  expectedStartDate: () => Promise<String>;
  expectedEndDate: () => Promise<String>;
  budgetHours: () => Promise<Int>;
  numberOfDays: () => Promise<Int>;
  numberOfHourlyWorkBudget: () => Promise<Int>;
  subcontractorName: () => Promise<String>;
  projectMemo: () => Promise<String>;
  projectType: () => Promise<ProjectType>;
  postalCode: () => Promise<String>;
  salesPersonCode: () => Promise<String>;
  estimatorCode: () => Promise<String>;
  projectManagerCode: () => Promise<String>;
  siteManagerCode: () => Promise<String>;
  team: () => Promise<String>;
  status: () => Promise<String>;
  statusModificationDate: () => Promise<String>;
  billToCustomerNo: () => Promise<String>;
  commissionDate: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  warrantyEndDate: () => Promise<String>;
  workType: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  isAppProject: () => Promise<Boolean>;
  kimInformation: <T = KimInformationPromise>() => T;
  subProjects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  ownerCode: () => Promise<AsyncIterator<String>>;
  employeeName: () => Promise<AsyncIterator<String>>;
  mainProject: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  contractValue: () => Promise<AsyncIterator<Float>>;
  additionalTotalAmount: () => Promise<AsyncIterator<Float>>;
  percentageDone: () => Promise<AsyncIterator<Int>>;
  percentageDoneDate: () => Promise<AsyncIterator<String>>;
  percentageDoneMinValue: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  complexExists: () => Promise<AsyncIterator<Boolean>>;
  complexId: () => Promise<AsyncIterator<ID_Output>>;
  complexCode: () => Promise<AsyncIterator<String>>;
  complexName: () => Promise<AsyncIterator<String>>;
  complexPhotoNo: () => Promise<AsyncIterator<String>>;
  complexPhotoUrl: () => Promise<AsyncIterator<String>>;
  amountSpent: () => Promise<AsyncIterator<Float>>;
  spentVsBudgetted: () => Promise<AsyncIterator<Int>>;
  amountOnReceipt: () => Promise<AsyncIterator<Float>>;
  receiptIsNecessary: () => Promise<AsyncIterator<Boolean>>;
  invoiced: () => Promise<AsyncIterator<Float>>;
  qualityMeasurementIsNecessary: () => Promise<
    AsyncIterator<ReportIsNecessary>
  >;
  progressReportIsNecessary: () => Promise<AsyncIterator<ReportIsNecessary>>;
  deliveryReportIsNecessary: () => Promise<AsyncIterator<ReportIsNecessary>>;
  qualityMeasurementIsComplete: () => Promise<AsyncIterator<Boolean>>;
  progressReportIsComplete: () => Promise<AsyncIterator<Boolean>>;
  deliveryReportIsComplete: () => Promise<AsyncIterator<Boolean>>;
  additionalWorkDescription1: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount1: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription2: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount2: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription3: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount3: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription4: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount4: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription5: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount5: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription6: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount6: () => Promise<AsyncIterator<Float>>;
  qualityMeasurementDocumentNo: () => Promise<AsyncIterator<String>>;
  progressReportDocumentNo: () => Promise<AsyncIterator<String>>;
  deliveryReportDocumentNo: () => Promise<AsyncIterator<String>>;
  visitReportDocumentNo: () => Promise<AsyncIterator<String>>;
  incidentReportDocumentNo: () => Promise<AsyncIterator<String>>;
  deviationFormDocumentNo: () => Promise<AsyncIterator<String>>;
  qualityMeasurementDocumentUrl: () => Promise<AsyncIterator<String>>;
  progressReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  deliveryReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  visitReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  incidentReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  deviationFormDocumentUrl: () => Promise<AsyncIterator<String>>;
  isMainProject: () => Promise<AsyncIterator<Boolean>>;
  expectedStartDate: () => Promise<AsyncIterator<String>>;
  expectedEndDate: () => Promise<AsyncIterator<String>>;
  budgetHours: () => Promise<AsyncIterator<Int>>;
  numberOfDays: () => Promise<AsyncIterator<Int>>;
  numberOfHourlyWorkBudget: () => Promise<AsyncIterator<Int>>;
  subcontractorName: () => Promise<AsyncIterator<String>>;
  projectMemo: () => Promise<AsyncIterator<String>>;
  projectType: () => Promise<AsyncIterator<ProjectType>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  salesPersonCode: () => Promise<AsyncIterator<String>>;
  estimatorCode: () => Promise<AsyncIterator<String>>;
  projectManagerCode: () => Promise<AsyncIterator<String>>;
  siteManagerCode: () => Promise<AsyncIterator<String>>;
  team: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  statusModificationDate: () => Promise<AsyncIterator<String>>;
  billToCustomerNo: () => Promise<AsyncIterator<String>>;
  commissionDate: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  warrantyEndDate: () => Promise<AsyncIterator<String>>;
  workType: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  isAppProject: () => Promise<AsyncIterator<Boolean>>;
  kimInformation: <T = KimInformationSubscription>() => T;
  subProjects: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  location: () => Promise<String>;
  employeeCode: () => Promise<String>;
  ownerCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  mainProject: () => Promise<String>;
  description: () => Promise<String>;
  contractValue: () => Promise<Float>;
  additionalTotalAmount: () => Promise<Float>;
  percentageDone: () => Promise<Int>;
  percentageDoneDate: () => Promise<String>;
  percentageDoneMinValue: () => Promise<Int>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  complexExists: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  complexPhotoNo: () => Promise<String>;
  complexPhotoUrl: () => Promise<String>;
  amountSpent: () => Promise<Float>;
  spentVsBudgetted: () => Promise<Int>;
  amountOnReceipt: () => Promise<Float>;
  receiptIsNecessary: () => Promise<Boolean>;
  invoiced: () => Promise<Float>;
  qualityMeasurementIsNecessary: () => Promise<ReportIsNecessary>;
  progressReportIsNecessary: () => Promise<ReportIsNecessary>;
  deliveryReportIsNecessary: () => Promise<ReportIsNecessary>;
  qualityMeasurementIsComplete: () => Promise<Boolean>;
  progressReportIsComplete: () => Promise<Boolean>;
  deliveryReportIsComplete: () => Promise<Boolean>;
  additionalWorkDescription1: () => Promise<String>;
  additionalWorkAmount1: () => Promise<Float>;
  additionalWorkDescription2: () => Promise<String>;
  additionalWorkAmount2: () => Promise<Float>;
  additionalWorkDescription3: () => Promise<String>;
  additionalWorkAmount3: () => Promise<Float>;
  additionalWorkDescription4: () => Promise<String>;
  additionalWorkAmount4: () => Promise<Float>;
  additionalWorkDescription5: () => Promise<String>;
  additionalWorkAmount5: () => Promise<Float>;
  additionalWorkDescription6: () => Promise<String>;
  additionalWorkAmount6: () => Promise<Float>;
  qualityMeasurementDocumentNo: () => Promise<String>;
  progressReportDocumentNo: () => Promise<String>;
  deliveryReportDocumentNo: () => Promise<String>;
  visitReportDocumentNo: () => Promise<String>;
  incidentReportDocumentNo: () => Promise<String>;
  deviationFormDocumentNo: () => Promise<String>;
  qualityMeasurementDocumentUrl: () => Promise<String>;
  progressReportDocumentUrl: () => Promise<String>;
  deliveryReportDocumentUrl: () => Promise<String>;
  visitReportDocumentUrl: () => Promise<String>;
  incidentReportDocumentUrl: () => Promise<String>;
  deviationFormDocumentUrl: () => Promise<String>;
  isMainProject: () => Promise<Boolean>;
  expectedStartDate: () => Promise<String>;
  expectedEndDate: () => Promise<String>;
  budgetHours: () => Promise<Int>;
  numberOfDays: () => Promise<Int>;
  numberOfHourlyWorkBudget: () => Promise<Int>;
  subcontractorName: () => Promise<String>;
  projectMemo: () => Promise<String>;
  projectType: () => Promise<ProjectType>;
  postalCode: () => Promise<String>;
  salesPersonCode: () => Promise<String>;
  estimatorCode: () => Promise<String>;
  projectManagerCode: () => Promise<String>;
  siteManagerCode: () => Promise<String>;
  team: () => Promise<String>;
  status: () => Promise<String>;
  statusModificationDate: () => Promise<String>;
  billToCustomerNo: () => Promise<String>;
  commissionDate: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  warrantyEndDate: () => Promise<String>;
  workType: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  isAppProject: () => Promise<Boolean>;
  kimInformation: <T = KimInformationPromise>() => T;
  subProjects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReporterConnection {
  pageInfo: PageInfo;
  edges: ReporterEdge[];
}

export interface ReporterConnectionPromise
  extends Promise<ReporterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReporterEdge>>() => T;
  aggregate: <T = AggregateReporterPromise>() => T;
}

export interface ReporterConnectionSubscription
  extends Promise<AsyncIterator<ReporterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReporterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReporterSubscription>() => T;
}

export interface ReporterEdge {
  node: Reporter;
  cursor: String;
}

export interface ReporterEdgePromise
  extends Promise<ReporterEdge>,
    Fragmentable {
  node: <T = ReporterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReporterEdgeSubscription
  extends Promise<AsyncIterator<ReporterEdge>>,
    Fragmentable {
  node: <T = ReporterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReporter {
  count: Int;
}

export interface AggregateReporterPromise
  extends Promise<AggregateReporter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReporterSubscription
  extends Promise<AsyncIterator<AggregateReporter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceAppointmentConnection {
  pageInfo: PageInfo;
  edges: ServiceAppointmentEdge[];
}

export interface ServiceAppointmentConnectionPromise
  extends Promise<ServiceAppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceAppointmentEdge>>() => T;
  aggregate: <T = AggregateServiceAppointmentPromise>() => T;
}

export interface ServiceAppointmentConnectionSubscription
  extends Promise<AsyncIterator<ServiceAppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceAppointmentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceAppointmentSubscription>() => T;
}

export interface ServiceAppointmentEdge {
  node: ServiceAppointment;
  cursor: String;
}

export interface ServiceAppointmentEdgePromise
  extends Promise<ServiceAppointmentEdge>,
    Fragmentable {
  node: <T = ServiceAppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceAppointmentEdgeSubscription
  extends Promise<AsyncIterator<ServiceAppointmentEdge>>,
    Fragmentable {
  node: <T = ServiceAppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceAppointment {
  count: Int;
}

export interface AggregateServiceAppointmentPromise
  extends Promise<AggregateServiceAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceAppointmentSubscription
  extends Promise<AsyncIterator<AggregateServiceAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceContractConnection {
  pageInfo: PageInfo;
  edges: ServiceContractEdge[];
}

export interface ServiceContractConnectionPromise
  extends Promise<ServiceContractConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceContractEdge>>() => T;
  aggregate: <T = AggregateServiceContractPromise>() => T;
}

export interface ServiceContractConnectionSubscription
  extends Promise<AsyncIterator<ServiceContractConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceContractEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceContractSubscription>() => T;
}

export interface ServiceContractEdge {
  node: ServiceContract;
  cursor: String;
}

export interface ServiceContractEdgePromise
  extends Promise<ServiceContractEdge>,
    Fragmentable {
  node: <T = ServiceContractPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceContractEdgeSubscription
  extends Promise<AsyncIterator<ServiceContractEdge>>,
    Fragmentable {
  node: <T = ServiceContractSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceContract {
  count: Int;
}

export interface AggregateServiceContractPromise
  extends Promise<AggregateServiceContract>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceContractSubscription
  extends Promise<AsyncIterator<AggregateServiceContract>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceContractEstimation {
  id: ID_Output;
  initialSalesAmount?: Float;
  billedAmount?: Float;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceContractEstimationPromise
  extends Promise<ServiceContractEstimation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  initialSalesAmount: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  serviceContractIndex: <T = ServiceContractIndexPromise>() => T;
  serviceContract: <T = ServiceContractPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractEstimationSubscription
  extends Promise<AsyncIterator<ServiceContractEstimation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  initialSalesAmount: () => Promise<AsyncIterator<Float>>;
  billedAmount: () => Promise<AsyncIterator<Float>>;
  serviceContractIndex: <T = ServiceContractIndexSubscription>() => T;
  serviceContract: <T = ServiceContractSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceContractEstimationNullablePromise
  extends Promise<ServiceContractEstimation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  initialSalesAmount: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  serviceContractIndex: <T = ServiceContractIndexPromise>() => T;
  serviceContract: <T = ServiceContractPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractIndex {
  id: ID_Output;
  indexMethod?: ContractIndexMethod;
  indexTime?: String;
  indexedAmount?: String;
  indexFigure?: String;
  contractNumber?: String;
  contractAmount?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceContractIndexPromise
  extends Promise<ServiceContractIndex>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  indexMethod: () => Promise<ContractIndexMethod>;
  indexTime: () => Promise<String>;
  indexedAmount: () => Promise<String>;
  indexFigure: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractAmount: () => Promise<String>;
  estimations: <T = FragmentableArray<ServiceContractEstimation>>(args?: {
    where?: ServiceContractEstimationWhereInput;
    orderBy?: ServiceContractEstimationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractIndexSubscription
  extends Promise<AsyncIterator<ServiceContractIndex>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  indexMethod: () => Promise<AsyncIterator<ContractIndexMethod>>;
  indexTime: () => Promise<AsyncIterator<String>>;
  indexedAmount: () => Promise<AsyncIterator<String>>;
  indexFigure: () => Promise<AsyncIterator<String>>;
  contractNumber: () => Promise<AsyncIterator<String>>;
  contractAmount: () => Promise<AsyncIterator<String>>;
  estimations: <
    T = Promise<AsyncIterator<ServiceContractEstimationSubscription>>
  >(args?: {
    where?: ServiceContractEstimationWhereInput;
    orderBy?: ServiceContractEstimationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceContractIndexNullablePromise
  extends Promise<ServiceContractIndex | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  indexMethod: () => Promise<ContractIndexMethod>;
  indexTime: () => Promise<String>;
  indexedAmount: () => Promise<String>;
  indexFigure: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractAmount: () => Promise<String>;
  estimations: <T = FragmentableArray<ServiceContractEstimation>>(args?: {
    where?: ServiceContractEstimationWhereInput;
    orderBy?: ServiceContractEstimationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractEstimationConnection {
  pageInfo: PageInfo;
  edges: ServiceContractEstimationEdge[];
}

export interface ServiceContractEstimationConnectionPromise
  extends Promise<ServiceContractEstimationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceContractEstimationEdge>>() => T;
  aggregate: <T = AggregateServiceContractEstimationPromise>() => T;
}

export interface ServiceContractEstimationConnectionSubscription
  extends Promise<AsyncIterator<ServiceContractEstimationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceContractEstimationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceContractEstimationSubscription>() => T;
}

export interface ServiceContractEstimationEdge {
  node: ServiceContractEstimation;
  cursor: String;
}

export interface ServiceContractEstimationEdgePromise
  extends Promise<ServiceContractEstimationEdge>,
    Fragmentable {
  node: <T = ServiceContractEstimationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceContractEstimationEdgeSubscription
  extends Promise<AsyncIterator<ServiceContractEstimationEdge>>,
    Fragmentable {
  node: <T = ServiceContractEstimationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceContractEstimation {
  count: Int;
}

export interface AggregateServiceContractEstimationPromise
  extends Promise<AggregateServiceContractEstimation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceContractEstimationSubscription
  extends Promise<AsyncIterator<AggregateServiceContractEstimation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceContractIndexConnection {
  pageInfo: PageInfo;
  edges: ServiceContractIndexEdge[];
}

export interface ServiceContractIndexConnectionPromise
  extends Promise<ServiceContractIndexConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceContractIndexEdge>>() => T;
  aggregate: <T = AggregateServiceContractIndexPromise>() => T;
}

export interface ServiceContractIndexConnectionSubscription
  extends Promise<AsyncIterator<ServiceContractIndexConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceContractIndexEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceContractIndexSubscription>() => T;
}

export interface ServiceContractIndexEdge {
  node: ServiceContractIndex;
  cursor: String;
}

export interface ServiceContractIndexEdgePromise
  extends Promise<ServiceContractIndexEdge>,
    Fragmentable {
  node: <T = ServiceContractIndexPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceContractIndexEdgeSubscription
  extends Promise<AsyncIterator<ServiceContractIndexEdge>>,
    Fragmentable {
  node: <T = ServiceContractIndexSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceContractIndex {
  count: Int;
}

export interface AggregateServiceContractIndexPromise
  extends Promise<AggregateServiceContractIndex>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceContractIndexSubscription
  extends Promise<AsyncIterator<AggregateServiceContractIndex>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceContractTerm {
  id: ID_Output;
  serviceContractCode?: String;
  lineNo?: Int;
  invoiceFrom?: String;
  endingDate?: String;
  invoicedUntil?: String;
  invoiceInterval?: String;
  invoicePostponePeriod?: String;
  nextInvoicingDate?: String;
  progressPercent?: Int;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: String;
  invoiceDirectly?: Boolean;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: String;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: String;
  description?: String;
  invoicingVIACollectiveList?: String;
  invoicePeriod?: ContractInvoicePeriod;
  chargeable?: Boolean;
  invoicedPrice?: Float;
  invoiceInProcess?: Float;
  creditMemoInProcess?: Float;
  invoicePayment?: Float;
  globalDimension1Code?: String;
  customerCode?: String;
  billToCustomerCode?: String;
}

export interface ServiceContractTermPromise
  extends Promise<ServiceContractTerm>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceContractCode: () => Promise<String>;
  lineNo: () => Promise<Int>;
  invoiceFrom: () => Promise<String>;
  endingDate: () => Promise<String>;
  invoicedUntil: () => Promise<String>;
  invoiceInterval: () => Promise<String>;
  invoicePostponePeriod: () => Promise<String>;
  nextInvoicingDate: () => Promise<String>;
  progressPercent: () => Promise<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode: () => Promise<
    String
  >;
  invoiceDirectly: () => Promise<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec: () => Promise<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec: () => Promise<String>;
  description: () => Promise<String>;
  invoicingVIACollectiveList: () => Promise<String>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  chargeable: () => Promise<Boolean>;
  invoicedPrice: () => Promise<Float>;
  invoiceInProcess: () => Promise<Float>;
  creditMemoInProcess: () => Promise<Float>;
  invoicePayment: () => Promise<Float>;
  globalDimension1Code: () => Promise<String>;
  customerCode: () => Promise<String>;
  billToCustomerCode: () => Promise<String>;
}

export interface ServiceContractTermSubscription
  extends Promise<AsyncIterator<ServiceContractTerm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  lineNo: () => Promise<AsyncIterator<Int>>;
  invoiceFrom: () => Promise<AsyncIterator<String>>;
  endingDate: () => Promise<AsyncIterator<String>>;
  invoicedUntil: () => Promise<AsyncIterator<String>>;
  invoiceInterval: () => Promise<AsyncIterator<String>>;
  invoicePostponePeriod: () => Promise<AsyncIterator<String>>;
  nextInvoicingDate: () => Promise<AsyncIterator<String>>;
  progressPercent: () => Promise<AsyncIterator<Int>>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode: () => Promise<
    AsyncIterator<String>
  >;
  invoiceDirectly: () => Promise<AsyncIterator<Boolean>>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec: () => Promise<
    AsyncIterator<String>
  >;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec: () => Promise<
    AsyncIterator<String>
  >;
  description: () => Promise<AsyncIterator<String>>;
  invoicingVIACollectiveList: () => Promise<AsyncIterator<String>>;
  invoicePeriod: () => Promise<AsyncIterator<ContractInvoicePeriod>>;
  chargeable: () => Promise<AsyncIterator<Boolean>>;
  invoicedPrice: () => Promise<AsyncIterator<Float>>;
  invoiceInProcess: () => Promise<AsyncIterator<Float>>;
  creditMemoInProcess: () => Promise<AsyncIterator<Float>>;
  invoicePayment: () => Promise<AsyncIterator<Float>>;
  globalDimension1Code: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  billToCustomerCode: () => Promise<AsyncIterator<String>>;
}

export interface ServiceContractTermNullablePromise
  extends Promise<ServiceContractTerm | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceContractCode: () => Promise<String>;
  lineNo: () => Promise<Int>;
  invoiceFrom: () => Promise<String>;
  endingDate: () => Promise<String>;
  invoicedUntil: () => Promise<String>;
  invoiceInterval: () => Promise<String>;
  invoicePostponePeriod: () => Promise<String>;
  nextInvoicingDate: () => Promise<String>;
  progressPercent: () => Promise<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode: () => Promise<
    String
  >;
  invoiceDirectly: () => Promise<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec: () => Promise<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec: () => Promise<String>;
  description: () => Promise<String>;
  invoicingVIACollectiveList: () => Promise<String>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  chargeable: () => Promise<Boolean>;
  invoicedPrice: () => Promise<Float>;
  invoiceInProcess: () => Promise<Float>;
  creditMemoInProcess: () => Promise<Float>;
  invoicePayment: () => Promise<Float>;
  globalDimension1Code: () => Promise<String>;
  customerCode: () => Promise<String>;
  billToCustomerCode: () => Promise<String>;
}

export interface ServiceContractTermConnection {
  pageInfo: PageInfo;
  edges: ServiceContractTermEdge[];
}

export interface ServiceContractTermConnectionPromise
  extends Promise<ServiceContractTermConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceContractTermEdge>>() => T;
  aggregate: <T = AggregateServiceContractTermPromise>() => T;
}

export interface ServiceContractTermConnectionSubscription
  extends Promise<AsyncIterator<ServiceContractTermConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceContractTermEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceContractTermSubscription>() => T;
}

export interface ServiceContractTermEdge {
  node: ServiceContractTerm;
  cursor: String;
}

export interface ServiceContractTermEdgePromise
  extends Promise<ServiceContractTermEdge>,
    Fragmentable {
  node: <T = ServiceContractTermPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceContractTermEdgeSubscription
  extends Promise<AsyncIterator<ServiceContractTermEdge>>,
    Fragmentable {
  node: <T = ServiceContractTermSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceContractTerm {
  count: Int;
}

export interface AggregateServiceContractTermPromise
  extends Promise<AggregateServiceContractTerm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceContractTermSubscription
  extends Promise<AsyncIterator<AggregateServiceContractTerm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceOrderConnection {
  pageInfo: PageInfo;
  edges: ServiceOrderEdge[];
}

export interface ServiceOrderConnectionPromise
  extends Promise<ServiceOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceOrderEdge>>() => T;
  aggregate: <T = AggregateServiceOrderPromise>() => T;
}

export interface ServiceOrderConnectionSubscription
  extends Promise<AsyncIterator<ServiceOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceOrderSubscription>() => T;
}

export interface ServiceOrderEdge {
  node: ServiceOrder;
  cursor: String;
}

export interface ServiceOrderEdgePromise
  extends Promise<ServiceOrderEdge>,
    Fragmentable {
  node: <T = ServiceOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceOrderEdgeSubscription
  extends Promise<AsyncIterator<ServiceOrderEdge>>,
    Fragmentable {
  node: <T = ServiceOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceOrder {
  count: Int;
}

export interface AggregateServiceOrderPromise
  extends Promise<AggregateServiceOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceOrderSubscription
  extends Promise<AsyncIterator<AggregateServiceOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceOrderCommentConnection {
  pageInfo: PageInfo;
  edges: ServiceOrderCommentEdge[];
}

export interface ServiceOrderCommentConnectionPromise
  extends Promise<ServiceOrderCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceOrderCommentEdge>>() => T;
  aggregate: <T = AggregateServiceOrderCommentPromise>() => T;
}

export interface ServiceOrderCommentConnectionSubscription
  extends Promise<AsyncIterator<ServiceOrderCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceOrderCommentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceOrderCommentSubscription>() => T;
}

export interface ServiceOrderCommentEdge {
  node: ServiceOrderComment;
  cursor: String;
}

export interface ServiceOrderCommentEdgePromise
  extends Promise<ServiceOrderCommentEdge>,
    Fragmentable {
  node: <T = ServiceOrderCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceOrderCommentEdgeSubscription
  extends Promise<AsyncIterator<ServiceOrderCommentEdge>>,
    Fragmentable {
  node: <T = ServiceOrderCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceOrderComment {
  count: Int;
}

export interface AggregateServiceOrderCommentPromise
  extends Promise<AggregateServiceOrderComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceOrderCommentSubscription
  extends Promise<AsyncIterator<AggregateServiceOrderComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceOrderUpdateNotification {
  id: ID_Output;
  orderOwnerEmail?: String;
  orderOwnerPhone?: String;
  linkToken?: String;
  smsText?: String;
  stage: String;
  emailHtmlBody?: String;
  emailSubject?: String;
  companyEmail?: String;
  smsDeliveryStatus: Boolean;
  emailDeliveryStatus: Boolean;
  linkExpirationDate?: DateTimeOutput;
  serviceOrderId: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceOrderUpdateNotificationPromise
  extends Promise<ServiceOrderUpdateNotification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderOwnerEmail: () => Promise<String>;
  orderOwnerPhone: () => Promise<String>;
  linkToken: () => Promise<String>;
  smsText: () => Promise<String>;
  stage: () => Promise<String>;
  emailHtmlBody: () => Promise<String>;
  emailSubject: () => Promise<String>;
  companyEmail: () => Promise<String>;
  smsDeliveryStatus: () => Promise<Boolean>;
  emailDeliveryStatus: () => Promise<Boolean>;
  linkExpirationDate: () => Promise<DateTimeOutput>;
  serviceOrderId: () => Promise<ID_Output>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  customerFeedback: <T = CustomerFeedbackPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrderUpdateNotificationSubscription
  extends Promise<AsyncIterator<ServiceOrderUpdateNotification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderOwnerEmail: () => Promise<AsyncIterator<String>>;
  orderOwnerPhone: () => Promise<AsyncIterator<String>>;
  linkToken: () => Promise<AsyncIterator<String>>;
  smsText: () => Promise<AsyncIterator<String>>;
  stage: () => Promise<AsyncIterator<String>>;
  emailHtmlBody: () => Promise<AsyncIterator<String>>;
  emailSubject: () => Promise<AsyncIterator<String>>;
  companyEmail: () => Promise<AsyncIterator<String>>;
  smsDeliveryStatus: () => Promise<AsyncIterator<Boolean>>;
  emailDeliveryStatus: () => Promise<AsyncIterator<Boolean>>;
  linkExpirationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  serviceOrderId: () => Promise<AsyncIterator<ID_Output>>;
  serviceOrder: <T = ServiceOrderSubscription>() => T;
  customerFeedback: <T = CustomerFeedbackSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceOrderUpdateNotificationNullablePromise
  extends Promise<ServiceOrderUpdateNotification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderOwnerEmail: () => Promise<String>;
  orderOwnerPhone: () => Promise<String>;
  linkToken: () => Promise<String>;
  smsText: () => Promise<String>;
  stage: () => Promise<String>;
  emailHtmlBody: () => Promise<String>;
  emailSubject: () => Promise<String>;
  companyEmail: () => Promise<String>;
  smsDeliveryStatus: () => Promise<Boolean>;
  emailDeliveryStatus: () => Promise<Boolean>;
  linkExpirationDate: () => Promise<DateTimeOutput>;
  serviceOrderId: () => Promise<ID_Output>;
  serviceOrder: <T = ServiceOrderPromise>() => T;
  customerFeedback: <T = CustomerFeedbackPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrderUpdateNotificationConnection {
  pageInfo: PageInfo;
  edges: ServiceOrderUpdateNotificationEdge[];
}

export interface ServiceOrderUpdateNotificationConnectionPromise
  extends Promise<ServiceOrderUpdateNotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceOrderUpdateNotificationEdge>>() => T;
  aggregate: <T = AggregateServiceOrderUpdateNotificationPromise>() => T;
}

export interface ServiceOrderUpdateNotificationConnectionSubscription
  extends Promise<AsyncIterator<ServiceOrderUpdateNotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ServiceOrderUpdateNotificationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateServiceOrderUpdateNotificationSubscription>() => T;
}

export interface ServiceOrderUpdateNotificationEdge {
  node: ServiceOrderUpdateNotification;
  cursor: String;
}

export interface ServiceOrderUpdateNotificationEdgePromise
  extends Promise<ServiceOrderUpdateNotificationEdge>,
    Fragmentable {
  node: <T = ServiceOrderUpdateNotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceOrderUpdateNotificationEdgeSubscription
  extends Promise<AsyncIterator<ServiceOrderUpdateNotificationEdge>>,
    Fragmentable {
  node: <T = ServiceOrderUpdateNotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceOrderUpdateNotification {
  count: Int;
}

export interface AggregateServiceOrderUpdateNotificationPromise
  extends Promise<AggregateServiceOrderUpdateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceOrderUpdateNotificationSubscription
  extends Promise<AsyncIterator<AggregateServiceOrderUpdateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceStatus {
  id: ID_Output;
  code: String;
  type?: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceStatusPromise
  extends Promise<ServiceStatus>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceStatusSubscription
  extends Promise<AsyncIterator<ServiceStatus>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceStatusNullablePromise
  extends Promise<ServiceStatus | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceStatusConnection {
  pageInfo: PageInfo;
  edges: ServiceStatusEdge[];
}

export interface ServiceStatusConnectionPromise
  extends Promise<ServiceStatusConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceStatusEdge>>() => T;
  aggregate: <T = AggregateServiceStatusPromise>() => T;
}

export interface ServiceStatusConnectionSubscription
  extends Promise<AsyncIterator<ServiceStatusConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceStatusEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceStatusSubscription>() => T;
}

export interface ServiceStatusEdge {
  node: ServiceStatus;
  cursor: String;
}

export interface ServiceStatusEdgePromise
  extends Promise<ServiceStatusEdge>,
    Fragmentable {
  node: <T = ServiceStatusPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceStatusEdgeSubscription
  extends Promise<AsyncIterator<ServiceStatusEdge>>,
    Fragmentable {
  node: <T = ServiceStatusSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceStatus {
  count: Int;
}

export interface AggregateServiceStatusPromise
  extends Promise<AggregateServiceStatus>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceStatusSubscription
  extends Promise<AsyncIterator<AggregateServiceStatus>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceTextConnection {
  pageInfo: PageInfo;
  edges: ServiceTextEdge[];
}

export interface ServiceTextConnectionPromise
  extends Promise<ServiceTextConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceTextEdge>>() => T;
  aggregate: <T = AggregateServiceTextPromise>() => T;
}

export interface ServiceTextConnectionSubscription
  extends Promise<AsyncIterator<ServiceTextConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceTextEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceTextSubscription>() => T;
}

export interface ServiceTextEdge {
  node: ServiceText;
  cursor: String;
}

export interface ServiceTextEdgePromise
  extends Promise<ServiceTextEdge>,
    Fragmentable {
  node: <T = ServiceTextPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceTextEdgeSubscription
  extends Promise<AsyncIterator<ServiceTextEdge>>,
    Fragmentable {
  node: <T = ServiceTextSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceText {
  count: Int;
}

export interface AggregateServiceTextPromise
  extends Promise<AggregateServiceText>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceTextSubscription
  extends Promise<AsyncIterator<AggregateServiceText>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkOrderConnection {
  pageInfo: PageInfo;
  edges: WorkOrderEdge[];
}

export interface WorkOrderConnectionPromise
  extends Promise<WorkOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkOrderEdge>>() => T;
  aggregate: <T = AggregateWorkOrderPromise>() => T;
}

export interface WorkOrderConnectionSubscription
  extends Promise<AsyncIterator<WorkOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkOrderSubscription>() => T;
}

export interface WorkOrderEdge {
  node: WorkOrder;
  cursor: String;
}

export interface WorkOrderEdgePromise
  extends Promise<WorkOrderEdge>,
    Fragmentable {
  node: <T = WorkOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkOrderEdgeSubscription
  extends Promise<AsyncIterator<WorkOrderEdge>>,
    Fragmentable {
  node: <T = WorkOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkOrder {
  count: Int;
}

export interface AggregateWorkOrderPromise
  extends Promise<AggregateWorkOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkOrderSubscription
  extends Promise<AsyncIterator<AggregateWorkOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActionSubscriptionPayload {
  mutation: MutationType;
  node: Action;
  updatedFields: String[];
  previousValues: ActionPreviousValues;
}

export interface ActionSubscriptionPayloadPromise
  extends Promise<ActionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActionPreviousValuesPromise>() => T;
}

export interface ActionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActionPreviousValuesSubscription>() => T;
}

export interface ActionPreviousValues {
  id: ID_Output;
  name?: String;
  title?: String;
}

export interface ActionPreviousValuesPromise
  extends Promise<ActionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
}

export interface ActionPreviousValuesSubscription
  extends Promise<AsyncIterator<ActionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ActivityLogSubscriptionPayload {
  mutation: MutationType;
  node: ActivityLog;
  updatedFields: String[];
  previousValues: ActivityLogPreviousValues;
}

export interface ActivityLogSubscriptionPayloadPromise
  extends Promise<ActivityLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityLogPreviousValuesPromise>() => T;
}

export interface ActivityLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivityLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivityLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityLogPreviousValuesSubscription>() => T;
}

export interface ActivityLogPreviousValues {
  id: ID_Output;
  code: String;
  description?: String;
  apply?: String;
  colour?: String;
  eventType?: String;
  statusPurchQuote?: String;
  statusPurchOrder?: String;
  statusServiceCall?: String;
  statusServiceOrder?: String;
  fieldService?: String;
  blockModifyServiceOrder?: Boolean;
  skipExportToFSA?: Boolean;
  sendStatusUpdateMail?: Boolean;
  sendMailWorkSheet?: Boolean;
  publishOnServicePOrtal?: Boolean;
  sendMainToSubcontractor?: Boolean;
  updateWOStartTime?: Boolean;
  updateWOEndTime?: Boolean;
  naForActualReferencePoint?: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ActivityLogPreviousValuesPromise
  extends Promise<ActivityLogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  apply: () => Promise<String>;
  colour: () => Promise<String>;
  eventType: () => Promise<String>;
  statusPurchQuote: () => Promise<String>;
  statusPurchOrder: () => Promise<String>;
  statusServiceCall: () => Promise<String>;
  statusServiceOrder: () => Promise<String>;
  fieldService: () => Promise<String>;
  blockModifyServiceOrder: () => Promise<Boolean>;
  skipExportToFSA: () => Promise<Boolean>;
  sendStatusUpdateMail: () => Promise<Boolean>;
  sendMailWorkSheet: () => Promise<Boolean>;
  publishOnServicePOrtal: () => Promise<Boolean>;
  sendMainToSubcontractor: () => Promise<Boolean>;
  updateWOStartTime: () => Promise<Boolean>;
  updateWOEndTime: () => Promise<Boolean>;
  naForActualReferencePoint: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  apply: () => Promise<AsyncIterator<String>>;
  colour: () => Promise<AsyncIterator<String>>;
  eventType: () => Promise<AsyncIterator<String>>;
  statusPurchQuote: () => Promise<AsyncIterator<String>>;
  statusPurchOrder: () => Promise<AsyncIterator<String>>;
  statusServiceCall: () => Promise<AsyncIterator<String>>;
  statusServiceOrder: () => Promise<AsyncIterator<String>>;
  fieldService: () => Promise<AsyncIterator<String>>;
  blockModifyServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  skipExportToFSA: () => Promise<AsyncIterator<Boolean>>;
  sendStatusUpdateMail: () => Promise<AsyncIterator<Boolean>>;
  sendMailWorkSheet: () => Promise<AsyncIterator<Boolean>>;
  publishOnServicePOrtal: () => Promise<AsyncIterator<Boolean>>;
  sendMainToSubcontractor: () => Promise<AsyncIterator<Boolean>>;
  updateWOStartTime: () => Promise<AsyncIterator<Boolean>>;
  updateWOEndTime: () => Promise<AsyncIterator<Boolean>>;
  naForActualReferencePoint: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityLogHistorySubscriptionPayload {
  mutation: MutationType;
  node: ActivityLogHistory;
  updatedFields: String[];
  previousValues: ActivityLogHistoryPreviousValues;
}

export interface ActivityLogHistorySubscriptionPayloadPromise
  extends Promise<ActivityLogHistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityLogHistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityLogHistoryPreviousValuesPromise>() => T;
}

export interface ActivityLogHistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivityLogHistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivityLogHistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityLogHistoryPreviousValuesSubscription>() => T;
}

export interface ActivityLogHistoryPreviousValues {
  id: ID_Output;
  type?: String;
  code?: String;
  registerDate?: DateTimeOutput;
  employeeCode?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ActivityLogHistoryPreviousValuesPromise
  extends Promise<ActivityLogHistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  code: () => Promise<String>;
  registerDate: () => Promise<DateTimeOutput>;
  employeeCode: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityLogHistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityLogHistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  registerDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerFeedbackSubscriptionPayload {
  mutation: MutationType;
  node: CustomerFeedback;
  updatedFields: String[];
  previousValues: CustomerFeedbackPreviousValues;
}

export interface CustomerFeedbackSubscriptionPayloadPromise
  extends Promise<CustomerFeedbackSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerFeedbackPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerFeedbackPreviousValuesPromise>() => T;
}

export interface CustomerFeedbackSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerFeedbackSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerFeedbackSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerFeedbackPreviousValuesSubscription>() => T;
}

export interface CustomerFeedbackPreviousValues {
  id: ID_Output;
  rating?: Int;
  stage?: String;
  skipped?: Boolean;
  comment?: String;
  customerRole?: Json;
  serviceOrderId: ID_Output;
  notificationId: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomerFeedbackPreviousValuesPromise
  extends Promise<CustomerFeedbackPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  stage: () => Promise<String>;
  skipped: () => Promise<Boolean>;
  comment: () => Promise<String>;
  customerRole: () => Promise<Json>;
  serviceOrderId: () => Promise<ID_Output>;
  notificationId: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomerFeedbackPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerFeedbackPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  stage: () => Promise<AsyncIterator<String>>;
  skipped: () => Promise<AsyncIterator<Boolean>>;
  comment: () => Promise<AsyncIterator<String>>;
  customerRole: () => Promise<AsyncIterator<Json>>;
  serviceOrderId: () => Promise<AsyncIterator<ID_Output>>;
  notificationId: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  name?: String;
  actionId: String;
  type: EventType;
  order?: Int;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  actionId: () => Promise<String>;
  type: () => Promise<EventType>;
  order: () => Promise<Int>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  actionId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<EventType>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface FaqSubscriptionPayload {
  mutation: MutationType;
  node: Faq;
  updatedFields: String[];
  previousValues: FaqPreviousValues;
}

export interface FaqSubscriptionPayloadPromise
  extends Promise<FaqSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FaqPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FaqPreviousValuesPromise>() => T;
}

export interface FaqSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FaqSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FaqSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FaqPreviousValuesSubscription>() => T;
}

export interface FaqPreviousValues {
  id: ID_Output;
  question?: String;
  answer?: String;
  header?: String;
  projectNumber: String;
}

export interface FaqPreviousValuesPromise
  extends Promise<FaqPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
  header: () => Promise<String>;
  projectNumber: () => Promise<String>;
}

export interface FaqPreviousValuesSubscription
  extends Promise<AsyncIterator<FaqPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
  header: () => Promise<AsyncIterator<String>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
}

export interface KimInformationSubscriptionPayload {
  mutation: MutationType;
  node: KimInformation;
  updatedFields: String[];
  previousValues: KimInformationPreviousValues;
}

export interface KimInformationSubscriptionPayloadPromise
  extends Promise<KimInformationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KimInformationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KimInformationPreviousValuesPromise>() => T;
}

export interface KimInformationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KimInformationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KimInformationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KimInformationPreviousValuesSubscription>() => T;
}

export interface KimInformationPreviousValues {
  id: ID_Output;
  projectNumber: String;
  projectLeader?: String;
  projectLeaderPhoto?: String;
  foreman?: String;
  foremanPhoto?: String;
  email?: String;
  phone?: String;
  startDate?: String;
  schedule?: String;
  deliveryDate?: String;
  noiseAndDrilling?: String;
  noiseAndGravel?: String;
  noiseAndDemolition?: String;
  vibrationDemolition?: String;
  dustAndWipe?: String;
  dustAndDemolish?: String;
  smellAndBitumen?: String;
  smellAndCoatings?: String;
  crane?: String;
  container?: String;
  constructionSite?: String;
  photo?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface KimInformationPreviousValuesPromise
  extends Promise<KimInformationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  projectLeader: () => Promise<String>;
  projectLeaderPhoto: () => Promise<String>;
  foreman: () => Promise<String>;
  foremanPhoto: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  startDate: () => Promise<String>;
  schedule: () => Promise<String>;
  deliveryDate: () => Promise<String>;
  noiseAndDrilling: () => Promise<String>;
  noiseAndGravel: () => Promise<String>;
  noiseAndDemolition: () => Promise<String>;
  vibrationDemolition: () => Promise<String>;
  dustAndWipe: () => Promise<String>;
  dustAndDemolish: () => Promise<String>;
  smellAndBitumen: () => Promise<String>;
  smellAndCoatings: () => Promise<String>;
  crane: () => Promise<String>;
  container: () => Promise<String>;
  constructionSite: () => Promise<String>;
  photo: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface KimInformationPreviousValuesSubscription
  extends Promise<AsyncIterator<KimInformationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
  projectLeader: () => Promise<AsyncIterator<String>>;
  projectLeaderPhoto: () => Promise<AsyncIterator<String>>;
  foreman: () => Promise<AsyncIterator<String>>;
  foremanPhoto: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  schedule: () => Promise<AsyncIterator<String>>;
  deliveryDate: () => Promise<AsyncIterator<String>>;
  noiseAndDrilling: () => Promise<AsyncIterator<String>>;
  noiseAndGravel: () => Promise<AsyncIterator<String>>;
  noiseAndDemolition: () => Promise<AsyncIterator<String>>;
  vibrationDemolition: () => Promise<AsyncIterator<String>>;
  dustAndWipe: () => Promise<AsyncIterator<String>>;
  dustAndDemolish: () => Promise<AsyncIterator<String>>;
  smellAndBitumen: () => Promise<AsyncIterator<String>>;
  smellAndCoatings: () => Promise<AsyncIterator<String>>;
  crane: () => Promise<AsyncIterator<String>>;
  container: () => Promise<AsyncIterator<String>>;
  constructionSite: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MomentSubscriptionPayload {
  mutation: MutationType;
  node: Moment;
  updatedFields: String[];
  previousValues: MomentPreviousValues;
}

export interface MomentSubscriptionPayloadPromise
  extends Promise<MomentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MomentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MomentPreviousValuesPromise>() => T;
}

export interface MomentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MomentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MomentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MomentPreviousValuesSubscription>() => T;
}

export interface MomentPreviousValues {
  id: ID_Output;
  code: Int;
  type?: MomentEntityType;
  navisionCode?: Int;
  status?: String;
  actionId?: String;
  hasSoStatusChange: Boolean;
  hasWoPlanningStatusChange: Boolean;
  hasScStatusChange: Boolean;
  isWOPlanningBlocked: Boolean;
  isSCBlocked: Boolean;
  isSOBlocked: Boolean;
  isExportBlocked: Boolean;
}

export interface MomentPreviousValuesPromise
  extends Promise<MomentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  type: () => Promise<MomentEntityType>;
  navisionCode: () => Promise<Int>;
  status: () => Promise<String>;
  actionId: () => Promise<String>;
  hasSoStatusChange: () => Promise<Boolean>;
  hasWoPlanningStatusChange: () => Promise<Boolean>;
  hasScStatusChange: () => Promise<Boolean>;
  isWOPlanningBlocked: () => Promise<Boolean>;
  isSCBlocked: () => Promise<Boolean>;
  isSOBlocked: () => Promise<Boolean>;
  isExportBlocked: () => Promise<Boolean>;
}

export interface MomentPreviousValuesSubscription
  extends Promise<AsyncIterator<MomentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<MomentEntityType>>;
  navisionCode: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<String>>;
  actionId: () => Promise<AsyncIterator<String>>;
  hasSoStatusChange: () => Promise<AsyncIterator<Boolean>>;
  hasWoPlanningStatusChange: () => Promise<AsyncIterator<Boolean>>;
  hasScStatusChange: () => Promise<AsyncIterator<Boolean>>;
  isWOPlanningBlocked: () => Promise<AsyncIterator<Boolean>>;
  isSCBlocked: () => Promise<AsyncIterator<Boolean>>;
  isSOBlocked: () => Promise<AsyncIterator<Boolean>>;
  isExportBlocked: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  projectNumber: String;
  location?: String;
  employeeCode?: String;
  ownerCode?: String;
  employeeName?: String;
  mainProject?: String;
  description?: String;
  contractValue?: Float;
  additionalTotalAmount?: Float;
  percentageDone?: Int;
  percentageDoneDate?: String;
  percentageDoneMinValue?: Int;
  address?: String;
  city?: String;
  complexExists?: Boolean;
  complexId?: ID_Output;
  complexCode?: String;
  complexName?: String;
  complexPhotoNo?: String;
  complexPhotoUrl?: String;
  amountSpent?: Float;
  spentVsBudgetted?: Int;
  amountOnReceipt?: Float;
  receiptIsNecessary?: Boolean;
  invoiced?: Float;
  qualityMeasurementIsNecessary?: ReportIsNecessary;
  progressReportIsNecessary?: ReportIsNecessary;
  deliveryReportIsNecessary?: ReportIsNecessary;
  qualityMeasurementIsComplete?: Boolean;
  progressReportIsComplete?: Boolean;
  deliveryReportIsComplete?: Boolean;
  additionalWorkDescription1?: String;
  additionalWorkAmount1?: Float;
  additionalWorkDescription2?: String;
  additionalWorkAmount2?: Float;
  additionalWorkDescription3?: String;
  additionalWorkAmount3?: Float;
  additionalWorkDescription4?: String;
  additionalWorkAmount4?: Float;
  additionalWorkDescription5?: String;
  additionalWorkAmount5?: Float;
  additionalWorkDescription6?: String;
  additionalWorkAmount6?: Float;
  qualityMeasurementDocumentNo?: String;
  progressReportDocumentNo?: String;
  deliveryReportDocumentNo?: String;
  visitReportDocumentNo?: String;
  incidentReportDocumentNo?: String;
  deviationFormDocumentNo?: String;
  qualityMeasurementDocumentUrl?: String;
  progressReportDocumentUrl?: String;
  deliveryReportDocumentUrl?: String;
  visitReportDocumentUrl?: String;
  incidentReportDocumentUrl?: String;
  deviationFormDocumentUrl?: String;
  isMainProject?: Boolean;
  expectedStartDate?: String;
  expectedEndDate?: String;
  budgetHours?: Int;
  numberOfDays?: Int;
  numberOfHourlyWorkBudget?: Int;
  subcontractorName?: String;
  projectMemo?: String;
  projectType?: ProjectType;
  postalCode?: String;
  salesPersonCode?: String;
  estimatorCode?: String;
  projectManagerCode?: String;
  siteManagerCode?: String;
  team?: String;
  status?: String;
  statusModificationDate?: String;
  billToCustomerNo?: String;
  commissionDate?: String;
  startDate?: String;
  endDate?: String;
  warrantyEndDate?: String;
  workType?: String;
  roofingPartnerName?: String;
  isAppProject: Boolean;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectNumber: () => Promise<String>;
  location: () => Promise<String>;
  employeeCode: () => Promise<String>;
  ownerCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  mainProject: () => Promise<String>;
  description: () => Promise<String>;
  contractValue: () => Promise<Float>;
  additionalTotalAmount: () => Promise<Float>;
  percentageDone: () => Promise<Int>;
  percentageDoneDate: () => Promise<String>;
  percentageDoneMinValue: () => Promise<Int>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  complexExists: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  complexPhotoNo: () => Promise<String>;
  complexPhotoUrl: () => Promise<String>;
  amountSpent: () => Promise<Float>;
  spentVsBudgetted: () => Promise<Int>;
  amountOnReceipt: () => Promise<Float>;
  receiptIsNecessary: () => Promise<Boolean>;
  invoiced: () => Promise<Float>;
  qualityMeasurementIsNecessary: () => Promise<ReportIsNecessary>;
  progressReportIsNecessary: () => Promise<ReportIsNecessary>;
  deliveryReportIsNecessary: () => Promise<ReportIsNecessary>;
  qualityMeasurementIsComplete: () => Promise<Boolean>;
  progressReportIsComplete: () => Promise<Boolean>;
  deliveryReportIsComplete: () => Promise<Boolean>;
  additionalWorkDescription1: () => Promise<String>;
  additionalWorkAmount1: () => Promise<Float>;
  additionalWorkDescription2: () => Promise<String>;
  additionalWorkAmount2: () => Promise<Float>;
  additionalWorkDescription3: () => Promise<String>;
  additionalWorkAmount3: () => Promise<Float>;
  additionalWorkDescription4: () => Promise<String>;
  additionalWorkAmount4: () => Promise<Float>;
  additionalWorkDescription5: () => Promise<String>;
  additionalWorkAmount5: () => Promise<Float>;
  additionalWorkDescription6: () => Promise<String>;
  additionalWorkAmount6: () => Promise<Float>;
  qualityMeasurementDocumentNo: () => Promise<String>;
  progressReportDocumentNo: () => Promise<String>;
  deliveryReportDocumentNo: () => Promise<String>;
  visitReportDocumentNo: () => Promise<String>;
  incidentReportDocumentNo: () => Promise<String>;
  deviationFormDocumentNo: () => Promise<String>;
  qualityMeasurementDocumentUrl: () => Promise<String>;
  progressReportDocumentUrl: () => Promise<String>;
  deliveryReportDocumentUrl: () => Promise<String>;
  visitReportDocumentUrl: () => Promise<String>;
  incidentReportDocumentUrl: () => Promise<String>;
  deviationFormDocumentUrl: () => Promise<String>;
  isMainProject: () => Promise<Boolean>;
  expectedStartDate: () => Promise<String>;
  expectedEndDate: () => Promise<String>;
  budgetHours: () => Promise<Int>;
  numberOfDays: () => Promise<Int>;
  numberOfHourlyWorkBudget: () => Promise<Int>;
  subcontractorName: () => Promise<String>;
  projectMemo: () => Promise<String>;
  projectType: () => Promise<ProjectType>;
  postalCode: () => Promise<String>;
  salesPersonCode: () => Promise<String>;
  estimatorCode: () => Promise<String>;
  projectManagerCode: () => Promise<String>;
  siteManagerCode: () => Promise<String>;
  team: () => Promise<String>;
  status: () => Promise<String>;
  statusModificationDate: () => Promise<String>;
  billToCustomerNo: () => Promise<String>;
  commissionDate: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  warrantyEndDate: () => Promise<String>;
  workType: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  isAppProject: () => Promise<Boolean>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectNumber: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  ownerCode: () => Promise<AsyncIterator<String>>;
  employeeName: () => Promise<AsyncIterator<String>>;
  mainProject: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  contractValue: () => Promise<AsyncIterator<Float>>;
  additionalTotalAmount: () => Promise<AsyncIterator<Float>>;
  percentageDone: () => Promise<AsyncIterator<Int>>;
  percentageDoneDate: () => Promise<AsyncIterator<String>>;
  percentageDoneMinValue: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  complexExists: () => Promise<AsyncIterator<Boolean>>;
  complexId: () => Promise<AsyncIterator<ID_Output>>;
  complexCode: () => Promise<AsyncIterator<String>>;
  complexName: () => Promise<AsyncIterator<String>>;
  complexPhotoNo: () => Promise<AsyncIterator<String>>;
  complexPhotoUrl: () => Promise<AsyncIterator<String>>;
  amountSpent: () => Promise<AsyncIterator<Float>>;
  spentVsBudgetted: () => Promise<AsyncIterator<Int>>;
  amountOnReceipt: () => Promise<AsyncIterator<Float>>;
  receiptIsNecessary: () => Promise<AsyncIterator<Boolean>>;
  invoiced: () => Promise<AsyncIterator<Float>>;
  qualityMeasurementIsNecessary: () => Promise<
    AsyncIterator<ReportIsNecessary>
  >;
  progressReportIsNecessary: () => Promise<AsyncIterator<ReportIsNecessary>>;
  deliveryReportIsNecessary: () => Promise<AsyncIterator<ReportIsNecessary>>;
  qualityMeasurementIsComplete: () => Promise<AsyncIterator<Boolean>>;
  progressReportIsComplete: () => Promise<AsyncIterator<Boolean>>;
  deliveryReportIsComplete: () => Promise<AsyncIterator<Boolean>>;
  additionalWorkDescription1: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount1: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription2: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount2: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription3: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount3: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription4: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount4: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription5: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount5: () => Promise<AsyncIterator<Float>>;
  additionalWorkDescription6: () => Promise<AsyncIterator<String>>;
  additionalWorkAmount6: () => Promise<AsyncIterator<Float>>;
  qualityMeasurementDocumentNo: () => Promise<AsyncIterator<String>>;
  progressReportDocumentNo: () => Promise<AsyncIterator<String>>;
  deliveryReportDocumentNo: () => Promise<AsyncIterator<String>>;
  visitReportDocumentNo: () => Promise<AsyncIterator<String>>;
  incidentReportDocumentNo: () => Promise<AsyncIterator<String>>;
  deviationFormDocumentNo: () => Promise<AsyncIterator<String>>;
  qualityMeasurementDocumentUrl: () => Promise<AsyncIterator<String>>;
  progressReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  deliveryReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  visitReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  incidentReportDocumentUrl: () => Promise<AsyncIterator<String>>;
  deviationFormDocumentUrl: () => Promise<AsyncIterator<String>>;
  isMainProject: () => Promise<AsyncIterator<Boolean>>;
  expectedStartDate: () => Promise<AsyncIterator<String>>;
  expectedEndDate: () => Promise<AsyncIterator<String>>;
  budgetHours: () => Promise<AsyncIterator<Int>>;
  numberOfDays: () => Promise<AsyncIterator<Int>>;
  numberOfHourlyWorkBudget: () => Promise<AsyncIterator<Int>>;
  subcontractorName: () => Promise<AsyncIterator<String>>;
  projectMemo: () => Promise<AsyncIterator<String>>;
  projectType: () => Promise<AsyncIterator<ProjectType>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  salesPersonCode: () => Promise<AsyncIterator<String>>;
  estimatorCode: () => Promise<AsyncIterator<String>>;
  projectManagerCode: () => Promise<AsyncIterator<String>>;
  siteManagerCode: () => Promise<AsyncIterator<String>>;
  team: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  statusModificationDate: () => Promise<AsyncIterator<String>>;
  billToCustomerNo: () => Promise<AsyncIterator<String>>;
  commissionDate: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  warrantyEndDate: () => Promise<AsyncIterator<String>>;
  workType: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  isAppProject: () => Promise<AsyncIterator<Boolean>>;
}

export interface ReporterSubscriptionPayload {
  mutation: MutationType;
  node: Reporter;
  updatedFields: String[];
  previousValues: ReporterPreviousValues;
}

export interface ReporterSubscriptionPayloadPromise
  extends Promise<ReporterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReporterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReporterPreviousValuesPromise>() => T;
}

export interface ReporterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReporterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReporterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReporterPreviousValuesSubscription>() => T;
}

export interface ReporterPreviousValues {
  id: ID_Output;
  code: String;
  name?: String;
  surname?: String;
  phone?: String;
  email?: String;
  onBehalfOf?: String;
  type?: ReporterType;
  reference?: String;
  priority?: PriorityType;
  workText?: String;
  internalText?: String;
  adviceText?: String;
  description?: String;
  isTrackAndTraceActive: Boolean;
}

export interface ReporterPreviousValuesPromise
  extends Promise<ReporterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  onBehalfOf: () => Promise<String>;
  type: () => Promise<ReporterType>;
  reference: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  workText: () => Promise<String>;
  internalText: () => Promise<String>;
  adviceText: () => Promise<String>;
  description: () => Promise<String>;
  isTrackAndTraceActive: () => Promise<Boolean>;
}

export interface ReporterPreviousValuesSubscription
  extends Promise<AsyncIterator<ReporterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  onBehalfOf: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ReporterType>>;
  reference: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<PriorityType>>;
  workText: () => Promise<AsyncIterator<String>>;
  internalText: () => Promise<AsyncIterator<String>>;
  adviceText: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isTrackAndTraceActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface ServiceAppointmentSubscriptionPayload {
  mutation: MutationType;
  node: ServiceAppointment;
  updatedFields: String[];
  previousValues: ServiceAppointmentPreviousValues;
}

export interface ServiceAppointmentSubscriptionPayloadPromise
  extends Promise<ServiceAppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceAppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceAppointmentPreviousValuesPromise>() => T;
}

export interface ServiceAppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceAppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceAppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceAppointmentPreviousValuesSubscription>() => T;
}

export interface ServiceAppointmentPreviousValues {
  id: ID_Output;
  code: String;
  orderType?: String;
  orderDate?: String;
  status?: String;
  roofCodes: String[];
  isLocked: Boolean;
  lockedBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceAppointmentPreviousValuesPromise
  extends Promise<ServiceAppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  orderType: () => Promise<String>;
  orderDate: () => Promise<String>;
  status: () => Promise<String>;
  roofCodes: () => Promise<String[]>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceAppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceAppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  orderType: () => Promise<AsyncIterator<String>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  roofCodes: () => Promise<AsyncIterator<String[]>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceContractSubscriptionPayload {
  mutation: MutationType;
  node: ServiceContract;
  updatedFields: String[];
  previousValues: ServiceContractPreviousValues;
}

export interface ServiceContractSubscriptionPayloadPromise
  extends Promise<ServiceContractSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceContractPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceContractPreviousValuesPromise>() => T;
}

export interface ServiceContractSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceContractSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceContractSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceContractPreviousValuesSubscription>() => T;
}

export interface ServiceContractPreviousValues {
  id: ID_Output;
  code: String;
  description?: String;
  roofAddress?: String;
  roofCity?: String;
  status?: ContractStatus;
  orderDate?: String;
  startingDate?: String;
  endingDate?: String;
  terminationDate?: String;
  customerCode?: String;
  contactPersonCode?: String;
  contactPersonCodes: String[];
  name?: String;
  name2?: String;
  address?: String;
  postcode?: String;
  city?: String;
  contactName?: String;
  phoneNo?: String;
  email?: String;
  billToCustomerNoContr?: String;
  billToNameContract?: String;
  billToAddressContract?: String;
  billToPostCodeContract?: String;
  billToCityContract?: String;
  billToContactPersonContr?: String;
  billToContPersNameCtr?: String;
  globalDimension1Code?: String;
  initialSalesAmount?: Float;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate?: Float;
  lastIndexDate?: String;
  contractManager?: String;
  contractManagerName?: String;
  yourReference?: String;
  blocked?: Boolean;
  firstYearMaintenance?: Int;
  maintenanceMonth?: Int;
  acknowledgedSO?: Int;
  createdSO?: Int;
  openedSO?: Int;
  readySO?: Int;
  percentageReady?: Int;
  workingHours?: Float;
  spendHours?: Float;
  hoursSpentLastYear?: Float;
  totalCost?: Float;
  billedAmount?: Float;
  invoicedUntil?: String;
  m2Dak?: Float;
  m2DakReady?: Float;
  m2DakReadyPercent?: String;
  reportDocument?: String;
  installmentsBasedOnProgress?: Boolean;
  invoiceType?: ContractInvoiceType;
  installmentType?: ContractInstallmentType;
  invoicePeriod?: ContractInvoicePeriod;
  currencyCode?: String;
  serviceIndexMethod?: String;
  invoiceTextInstallments?: String;
  outsourced?: Boolean;
  lastExecutedBy?: String;
  isLocked: Boolean;
  lockedBy?: String;
}

export interface ServiceContractPreviousValuesPromise
  extends Promise<ServiceContractPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  roofAddress: () => Promise<String>;
  roofCity: () => Promise<String>;
  status: () => Promise<ContractStatus>;
  orderDate: () => Promise<String>;
  startingDate: () => Promise<String>;
  endingDate: () => Promise<String>;
  terminationDate: () => Promise<String>;
  customerCode: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonCodes: () => Promise<String[]>;
  name: () => Promise<String>;
  name2: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  contactName: () => Promise<String>;
  phoneNo: () => Promise<String>;
  email: () => Promise<String>;
  billToCustomerNoContr: () => Promise<String>;
  billToNameContract: () => Promise<String>;
  billToAddressContract: () => Promise<String>;
  billToPostCodeContract: () => Promise<String>;
  billToCityContract: () => Promise<String>;
  billToContactPersonContr: () => Promise<String>;
  billToContPersNameCtr: () => Promise<String>;
  globalDimension1Code: () => Promise<String>;
  initialSalesAmount: () => Promise<Float>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate: () => Promise<Float>;
  lastIndexDate: () => Promise<String>;
  contractManager: () => Promise<String>;
  contractManagerName: () => Promise<String>;
  yourReference: () => Promise<String>;
  blocked: () => Promise<Boolean>;
  firstYearMaintenance: () => Promise<Int>;
  maintenanceMonth: () => Promise<Int>;
  acknowledgedSO: () => Promise<Int>;
  createdSO: () => Promise<Int>;
  openedSO: () => Promise<Int>;
  readySO: () => Promise<Int>;
  percentageReady: () => Promise<Int>;
  workingHours: () => Promise<Float>;
  spendHours: () => Promise<Float>;
  hoursSpentLastYear: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  invoicedUntil: () => Promise<String>;
  m2Dak: () => Promise<Float>;
  m2DakReady: () => Promise<Float>;
  m2DakReadyPercent: () => Promise<String>;
  reportDocument: () => Promise<String>;
  installmentsBasedOnProgress: () => Promise<Boolean>;
  invoiceType: () => Promise<ContractInvoiceType>;
  installmentType: () => Promise<ContractInstallmentType>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  currencyCode: () => Promise<String>;
  serviceIndexMethod: () => Promise<String>;
  invoiceTextInstallments: () => Promise<String>;
  outsourced: () => Promise<Boolean>;
  lastExecutedBy: () => Promise<String>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
}

export interface ServiceContractPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceContractPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  roofAddress: () => Promise<AsyncIterator<String>>;
  roofCity: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ContractStatus>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  startingDate: () => Promise<AsyncIterator<String>>;
  endingDate: () => Promise<AsyncIterator<String>>;
  terminationDate: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  contactPersonCode: () => Promise<AsyncIterator<String>>;
  contactPersonCodes: () => Promise<AsyncIterator<String[]>>;
  name: () => Promise<AsyncIterator<String>>;
  name2: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  contactName: () => Promise<AsyncIterator<String>>;
  phoneNo: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  billToCustomerNoContr: () => Promise<AsyncIterator<String>>;
  billToNameContract: () => Promise<AsyncIterator<String>>;
  billToAddressContract: () => Promise<AsyncIterator<String>>;
  billToPostCodeContract: () => Promise<AsyncIterator<String>>;
  billToCityContract: () => Promise<AsyncIterator<String>>;
  billToContactPersonContr: () => Promise<AsyncIterator<String>>;
  billToContPersNameCtr: () => Promise<AsyncIterator<String>>;
  globalDimension1Code: () => Promise<AsyncIterator<String>>;
  initialSalesAmount: () => Promise<AsyncIterator<Float>>;
  maintenanceInvoiceMgtGetContractAmntByDateRecWorkDate: () => Promise<
    AsyncIterator<Float>
  >;
  lastIndexDate: () => Promise<AsyncIterator<String>>;
  contractManager: () => Promise<AsyncIterator<String>>;
  contractManagerName: () => Promise<AsyncIterator<String>>;
  yourReference: () => Promise<AsyncIterator<String>>;
  blocked: () => Promise<AsyncIterator<Boolean>>;
  firstYearMaintenance: () => Promise<AsyncIterator<Int>>;
  maintenanceMonth: () => Promise<AsyncIterator<Int>>;
  acknowledgedSO: () => Promise<AsyncIterator<Int>>;
  createdSO: () => Promise<AsyncIterator<Int>>;
  openedSO: () => Promise<AsyncIterator<Int>>;
  readySO: () => Promise<AsyncIterator<Int>>;
  percentageReady: () => Promise<AsyncIterator<Int>>;
  workingHours: () => Promise<AsyncIterator<Float>>;
  spendHours: () => Promise<AsyncIterator<Float>>;
  hoursSpentLastYear: () => Promise<AsyncIterator<Float>>;
  totalCost: () => Promise<AsyncIterator<Float>>;
  billedAmount: () => Promise<AsyncIterator<Float>>;
  invoicedUntil: () => Promise<AsyncIterator<String>>;
  m2Dak: () => Promise<AsyncIterator<Float>>;
  m2DakReady: () => Promise<AsyncIterator<Float>>;
  m2DakReadyPercent: () => Promise<AsyncIterator<String>>;
  reportDocument: () => Promise<AsyncIterator<String>>;
  installmentsBasedOnProgress: () => Promise<AsyncIterator<Boolean>>;
  invoiceType: () => Promise<AsyncIterator<ContractInvoiceType>>;
  installmentType: () => Promise<AsyncIterator<ContractInstallmentType>>;
  invoicePeriod: () => Promise<AsyncIterator<ContractInvoicePeriod>>;
  currencyCode: () => Promise<AsyncIterator<String>>;
  serviceIndexMethod: () => Promise<AsyncIterator<String>>;
  invoiceTextInstallments: () => Promise<AsyncIterator<String>>;
  outsourced: () => Promise<AsyncIterator<Boolean>>;
  lastExecutedBy: () => Promise<AsyncIterator<String>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
}

export interface ServiceContractEstimationSubscriptionPayload {
  mutation: MutationType;
  node: ServiceContractEstimation;
  updatedFields: String[];
  previousValues: ServiceContractEstimationPreviousValues;
}

export interface ServiceContractEstimationSubscriptionPayloadPromise
  extends Promise<ServiceContractEstimationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceContractEstimationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceContractEstimationPreviousValuesPromise>() => T;
}

export interface ServiceContractEstimationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceContractEstimationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceContractEstimationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ServiceContractEstimationPreviousValuesSubscription
  >() => T;
}

export interface ServiceContractEstimationPreviousValues {
  id: ID_Output;
  initialSalesAmount?: Float;
  billedAmount?: Float;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceContractEstimationPreviousValuesPromise
  extends Promise<ServiceContractEstimationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  initialSalesAmount: () => Promise<Float>;
  billedAmount: () => Promise<Float>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractEstimationPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceContractEstimationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  initialSalesAmount: () => Promise<AsyncIterator<Float>>;
  billedAmount: () => Promise<AsyncIterator<Float>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceContractIndexSubscriptionPayload {
  mutation: MutationType;
  node: ServiceContractIndex;
  updatedFields: String[];
  previousValues: ServiceContractIndexPreviousValues;
}

export interface ServiceContractIndexSubscriptionPayloadPromise
  extends Promise<ServiceContractIndexSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceContractIndexPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceContractIndexPreviousValuesPromise>() => T;
}

export interface ServiceContractIndexSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceContractIndexSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceContractIndexSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceContractIndexPreviousValuesSubscription>() => T;
}

export interface ServiceContractIndexPreviousValues {
  id: ID_Output;
  indexMethod?: ContractIndexMethod;
  indexTime?: String;
  indexedAmount?: String;
  indexFigure?: String;
  contractNumber?: String;
  contractAmount?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceContractIndexPreviousValuesPromise
  extends Promise<ServiceContractIndexPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  indexMethod: () => Promise<ContractIndexMethod>;
  indexTime: () => Promise<String>;
  indexedAmount: () => Promise<String>;
  indexFigure: () => Promise<String>;
  contractNumber: () => Promise<String>;
  contractAmount: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceContractIndexPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceContractIndexPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  indexMethod: () => Promise<AsyncIterator<ContractIndexMethod>>;
  indexTime: () => Promise<AsyncIterator<String>>;
  indexedAmount: () => Promise<AsyncIterator<String>>;
  indexFigure: () => Promise<AsyncIterator<String>>;
  contractNumber: () => Promise<AsyncIterator<String>>;
  contractAmount: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceContractTermSubscriptionPayload {
  mutation: MutationType;
  node: ServiceContractTerm;
  updatedFields: String[];
  previousValues: ServiceContractTermPreviousValues;
}

export interface ServiceContractTermSubscriptionPayloadPromise
  extends Promise<ServiceContractTermSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceContractTermPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceContractTermPreviousValuesPromise>() => T;
}

export interface ServiceContractTermSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceContractTermSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceContractTermSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceContractTermPreviousValuesSubscription>() => T;
}

export interface ServiceContractTermPreviousValues {
  id: ID_Output;
  serviceContractCode?: String;
  lineNo?: Int;
  invoiceFrom?: String;
  endingDate?: String;
  invoicedUntil?: String;
  invoiceInterval?: String;
  invoicePostponePeriod?: String;
  nextInvoicingDate?: String;
  progressPercent?: Int;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode?: String;
  invoiceDirectly?: Boolean;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec?: String;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec?: String;
  description?: String;
  invoicingVIACollectiveList?: String;
  invoicePeriod?: ContractInvoicePeriod;
  chargeable?: Boolean;
  invoicedPrice?: Float;
  invoiceInProcess?: Float;
  creditMemoInProcess?: Float;
  invoicePayment?: Float;
  globalDimension1Code?: String;
  customerCode?: String;
  billToCustomerCode?: String;
}

export interface ServiceContractTermPreviousValuesPromise
  extends Promise<ServiceContractTermPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  serviceContractCode: () => Promise<String>;
  lineNo: () => Promise<Int>;
  invoiceFrom: () => Promise<String>;
  endingDate: () => Promise<String>;
  invoicedUntil: () => Promise<String>;
  invoiceInterval: () => Promise<String>;
  invoicePostponePeriod: () => Promise<String>;
  nextInvoicingDate: () => Promise<String>;
  progressPercent: () => Promise<Int>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode: () => Promise<
    String
  >;
  invoiceDirectly: () => Promise<Boolean>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec: () => Promise<String>;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec: () => Promise<String>;
  description: () => Promise<String>;
  invoicingVIACollectiveList: () => Promise<String>;
  invoicePeriod: () => Promise<ContractInvoicePeriod>;
  chargeable: () => Promise<Boolean>;
  invoicedPrice: () => Promise<Float>;
  invoiceInProcess: () => Promise<Float>;
  creditMemoInProcess: () => Promise<Float>;
  invoicePayment: () => Promise<Float>;
  globalDimension1Code: () => Promise<String>;
  customerCode: () => Promise<String>;
  billToCustomerCode: () => Promise<String>;
}

export interface ServiceContractTermPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceContractTermPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  lineNo: () => Promise<AsyncIterator<Int>>;
  invoiceFrom: () => Promise<AsyncIterator<String>>;
  endingDate: () => Promise<AsyncIterator<String>>;
  invoicedUntil: () => Promise<AsyncIterator<String>>;
  invoiceInterval: () => Promise<AsyncIterator<String>>;
  invoicePostponePeriod: () => Promise<AsyncIterator<String>>;
  nextInvoicingDate: () => Promise<AsyncIterator<String>>;
  progressPercent: () => Promise<AsyncIterator<Int>>;
  gvMaintInvMngmntCUGetContractCurrencyServiceContractCode: () => Promise<
    AsyncIterator<String>
  >;
  invoiceDirectly: () => Promise<AsyncIterator<Boolean>>;
  gvMaintInvMngmntCUGetInstallmAmntByDateRec: () => Promise<
    AsyncIterator<String>
  >;
  gvMaintInvMngmntCUGetInstallmAmntLCYByDateRec: () => Promise<
    AsyncIterator<String>
  >;
  description: () => Promise<AsyncIterator<String>>;
  invoicingVIACollectiveList: () => Promise<AsyncIterator<String>>;
  invoicePeriod: () => Promise<AsyncIterator<ContractInvoicePeriod>>;
  chargeable: () => Promise<AsyncIterator<Boolean>>;
  invoicedPrice: () => Promise<AsyncIterator<Float>>;
  invoiceInProcess: () => Promise<AsyncIterator<Float>>;
  creditMemoInProcess: () => Promise<AsyncIterator<Float>>;
  invoicePayment: () => Promise<AsyncIterator<Float>>;
  globalDimension1Code: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  billToCustomerCode: () => Promise<AsyncIterator<String>>;
}

export interface ServiceOrderSubscriptionPayload {
  mutation: MutationType;
  node: ServiceOrder;
  updatedFields: String[];
  previousValues: ServiceOrderPreviousValues;
}

export interface ServiceOrderSubscriptionPayloadPromise
  extends Promise<ServiceOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceOrderPreviousValuesPromise>() => T;
}

export interface ServiceOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceOrderPreviousValuesSubscription>() => T;
}

export interface ServiceOrderPreviousValues {
  id: ID_Output;
  code: String;
  globalId?: String;
  conceptId?: String;
  companyName?: String;
  callerCode?: String;
  orderType?: String;
  description?: String;
  ownerCode?: String;
  customerCode?: String;
  customerName?: String;
  billingCode?: String;
  customerFeature?: String;
  reference?: String;
  commissionDate?: String;
  serviceLocationCode?: String;
  name?: String;
  address?: String;
  postalCode?: String;
  city?: String;
  sourceType?: String;
  globalDimensionCode?: String;
  territoryCode?: String;
  orderDate?: String;
  orderTime?: String;
  budgetHours?: Float;
  expectedHours?: Float;
  durationTime?: Float;
  isFirmPlanned?: Boolean;
  startDate?: String;
  startTime?: String;
  endDate?: String;
  endTime?: String;
  priority?: PriorityType;
  nextDeadline?: String;
  status?: String;
  actualReferencePoint?: String;
  actualReferencePointDescription?: String;
  employeeCode?: String;
  employeeName?: String;
  roofingPartnerName?: String;
  detectorType?: String;
  notInDakota?: Boolean;
  gdbServiceOrderTrackAndTrace?: Boolean;
  gdbServiceOrderKTO?: Boolean;
  ktoFiture?: Float;
  serviceType?: String;
  invoicedPrice?: Float;
  orderAmount?: Float;
  serviceControlPeriodDate?: String;
  isRemoteControl?: Boolean;
  firstDeadline?: String;
  gdbServiceOrderStartDate?: String;
  dateExecuted?: String;
  gdbServiceOrderInvoicedDate?: String;
  isExportToFSA2?: Boolean;
  exportToFSADate?: String;
  isSignatureHasValue?: Boolean;
  signedBy?: String;
  isSendReport?: Boolean;
  isFinishedFieldService?: Boolean;
  cratedBy?: String;
  creationDate?: DateTimeOutput;
  updateDate?: String;
  updatedBy?: String;
  customerRemark?: String;
  internalRemark?: String;
  correctiveMaintenanceRemark?: String;
  agreementDate?: String;
  signature?: String;
  contactPersonCode?: String;
  contactPersonGender?: String;
  orderCodeCustomer?: String;
  countryCode?: String;
  serviceContractCode?: String;
  orderManager?: String;
  assignedTo?: String;
  servicePackage?: Float;
  problemDescription?: String;
  problemCause?: String;
  problemSolution?: String;
  baseServiceOrderCode?: String;
  isBaseServiceOrder?: Boolean;
  hasAdditionalServiceOrder?: Boolean;
  actualHours?: Float;
  isPublished: Boolean;
  isLocked: Boolean;
  lockedBy?: String;
  orderNumber?: String;
  isExportedLocked: Boolean;
  complexId?: ID_Output;
  complexCode?: String;
  complexName?: String;
  subComplexCode?: String;
  subComplexName?: String;
  roofCode?: String;
  workType?: String;
  statusReasonDescription?: String;
  readyDateNew?: String;
  roofPartner?: String;
  roofPartnerName?: String;
  roofWarranty?: Boolean;
  roofIsAGutter?: Boolean;
  amountOfMeasures?: Int;
  roofingPartDescription?: String;
  cause?: String;
  measureDescription?: String;
  consequentialDamageIndoor?: String;
  roofTypeCode?: String;
  condition?: Int;
  roofingPartCategories?: String;
  roofingPartCodes?: String;
  contractCode?: String;
  invoiceType?: String;
  billingAddress?: String;
  roofNumber?: String;
  isBlocked: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceOrderPreviousValuesPromise
  extends Promise<ServiceOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  globalId: () => Promise<String>;
  conceptId: () => Promise<String>;
  companyName: () => Promise<String>;
  callerCode: () => Promise<String>;
  orderType: () => Promise<String>;
  description: () => Promise<String>;
  ownerCode: () => Promise<String>;
  customerCode: () => Promise<String>;
  customerName: () => Promise<String>;
  billingCode: () => Promise<String>;
  customerFeature: () => Promise<String>;
  reference: () => Promise<String>;
  commissionDate: () => Promise<String>;
  serviceLocationCode: () => Promise<String>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  sourceType: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  territoryCode: () => Promise<String>;
  orderDate: () => Promise<String>;
  orderTime: () => Promise<String>;
  budgetHours: () => Promise<Float>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isFirmPlanned: () => Promise<Boolean>;
  startDate: () => Promise<String>;
  startTime: () => Promise<String>;
  endDate: () => Promise<String>;
  endTime: () => Promise<String>;
  priority: () => Promise<PriorityType>;
  nextDeadline: () => Promise<String>;
  status: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  actualReferencePointDescription: () => Promise<String>;
  employeeCode: () => Promise<String>;
  employeeName: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<Boolean>;
  gdbServiceOrderTrackAndTrace: () => Promise<Boolean>;
  gdbServiceOrderKTO: () => Promise<Boolean>;
  ktoFiture: () => Promise<Float>;
  serviceType: () => Promise<String>;
  invoicedPrice: () => Promise<Float>;
  orderAmount: () => Promise<Float>;
  serviceControlPeriodDate: () => Promise<String>;
  isRemoteControl: () => Promise<Boolean>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  isSignatureHasValue: () => Promise<Boolean>;
  signedBy: () => Promise<String>;
  isSendReport: () => Promise<Boolean>;
  isFinishedFieldService: () => Promise<Boolean>;
  cratedBy: () => Promise<String>;
  creationDate: () => Promise<DateTimeOutput>;
  updateDate: () => Promise<String>;
  updatedBy: () => Promise<String>;
  customerRemark: () => Promise<String>;
  internalRemark: () => Promise<String>;
  correctiveMaintenanceRemark: () => Promise<String>;
  agreementDate: () => Promise<String>;
  signature: () => Promise<String>;
  contactPersonCode: () => Promise<String>;
  contactPersonGender: () => Promise<String>;
  orderCodeCustomer: () => Promise<String>;
  countryCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  assignedTo: () => Promise<String>;
  servicePackage: () => Promise<Float>;
  problemDescription: () => Promise<String>;
  problemCause: () => Promise<String>;
  problemSolution: () => Promise<String>;
  baseServiceOrderCode: () => Promise<String>;
  isBaseServiceOrder: () => Promise<Boolean>;
  hasAdditionalServiceOrder: () => Promise<Boolean>;
  actualHours: () => Promise<Float>;
  isPublished: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  orderNumber: () => Promise<String>;
  isExportedLocked: () => Promise<Boolean>;
  complexId: () => Promise<ID_Output>;
  complexCode: () => Promise<String>;
  complexName: () => Promise<String>;
  subComplexCode: () => Promise<String>;
  subComplexName: () => Promise<String>;
  roofCode: () => Promise<String>;
  workType: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  readyDateNew: () => Promise<String>;
  roofPartner: () => Promise<String>;
  roofPartnerName: () => Promise<String>;
  roofWarranty: () => Promise<Boolean>;
  roofIsAGutter: () => Promise<Boolean>;
  amountOfMeasures: () => Promise<Int>;
  roofingPartDescription: () => Promise<String>;
  cause: () => Promise<String>;
  measureDescription: () => Promise<String>;
  consequentialDamageIndoor: () => Promise<String>;
  roofTypeCode: () => Promise<String>;
  condition: () => Promise<Int>;
  roofingPartCategories: () => Promise<String>;
  roofingPartCodes: () => Promise<String>;
  contractCode: () => Promise<String>;
  invoiceType: () => Promise<String>;
  billingAddress: () => Promise<String>;
  roofNumber: () => Promise<String>;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  globalId: () => Promise<AsyncIterator<String>>;
  conceptId: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  callerCode: () => Promise<AsyncIterator<String>>;
  orderType: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  ownerCode: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  customerName: () => Promise<AsyncIterator<String>>;
  billingCode: () => Promise<AsyncIterator<String>>;
  customerFeature: () => Promise<AsyncIterator<String>>;
  reference: () => Promise<AsyncIterator<String>>;
  commissionDate: () => Promise<AsyncIterator<String>>;
  serviceLocationCode: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<String>>;
  globalDimensionCode: () => Promise<AsyncIterator<String>>;
  territoryCode: () => Promise<AsyncIterator<String>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  orderTime: () => Promise<AsyncIterator<String>>;
  budgetHours: () => Promise<AsyncIterator<Float>>;
  expectedHours: () => Promise<AsyncIterator<Float>>;
  durationTime: () => Promise<AsyncIterator<Float>>;
  isFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  startDate: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<PriorityType>>;
  nextDeadline: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  actualReferencePoint: () => Promise<AsyncIterator<String>>;
  actualReferencePointDescription: () => Promise<AsyncIterator<String>>;
  employeeCode: () => Promise<AsyncIterator<String>>;
  employeeName: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  detectorType: () => Promise<AsyncIterator<String>>;
  notInDakota: () => Promise<AsyncIterator<Boolean>>;
  gdbServiceOrderTrackAndTrace: () => Promise<AsyncIterator<Boolean>>;
  gdbServiceOrderKTO: () => Promise<AsyncIterator<Boolean>>;
  ktoFiture: () => Promise<AsyncIterator<Float>>;
  serviceType: () => Promise<AsyncIterator<String>>;
  invoicedPrice: () => Promise<AsyncIterator<Float>>;
  orderAmount: () => Promise<AsyncIterator<Float>>;
  serviceControlPeriodDate: () => Promise<AsyncIterator<String>>;
  isRemoteControl: () => Promise<AsyncIterator<Boolean>>;
  firstDeadline: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderStartDate: () => Promise<AsyncIterator<String>>;
  dateExecuted: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderInvoicedDate: () => Promise<AsyncIterator<String>>;
  isExportToFSA2: () => Promise<AsyncIterator<Boolean>>;
  exportToFSADate: () => Promise<AsyncIterator<String>>;
  isSignatureHasValue: () => Promise<AsyncIterator<Boolean>>;
  signedBy: () => Promise<AsyncIterator<String>>;
  isSendReport: () => Promise<AsyncIterator<Boolean>>;
  isFinishedFieldService: () => Promise<AsyncIterator<Boolean>>;
  cratedBy: () => Promise<AsyncIterator<String>>;
  creationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateDate: () => Promise<AsyncIterator<String>>;
  updatedBy: () => Promise<AsyncIterator<String>>;
  customerRemark: () => Promise<AsyncIterator<String>>;
  internalRemark: () => Promise<AsyncIterator<String>>;
  correctiveMaintenanceRemark: () => Promise<AsyncIterator<String>>;
  agreementDate: () => Promise<AsyncIterator<String>>;
  signature: () => Promise<AsyncIterator<String>>;
  contactPersonCode: () => Promise<AsyncIterator<String>>;
  contactPersonGender: () => Promise<AsyncIterator<String>>;
  orderCodeCustomer: () => Promise<AsyncIterator<String>>;
  countryCode: () => Promise<AsyncIterator<String>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  orderManager: () => Promise<AsyncIterator<String>>;
  assignedTo: () => Promise<AsyncIterator<String>>;
  servicePackage: () => Promise<AsyncIterator<Float>>;
  problemDescription: () => Promise<AsyncIterator<String>>;
  problemCause: () => Promise<AsyncIterator<String>>;
  problemSolution: () => Promise<AsyncIterator<String>>;
  baseServiceOrderCode: () => Promise<AsyncIterator<String>>;
  isBaseServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  hasAdditionalServiceOrder: () => Promise<AsyncIterator<Boolean>>;
  actualHours: () => Promise<AsyncIterator<Float>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  isExportedLocked: () => Promise<AsyncIterator<Boolean>>;
  complexId: () => Promise<AsyncIterator<ID_Output>>;
  complexCode: () => Promise<AsyncIterator<String>>;
  complexName: () => Promise<AsyncIterator<String>>;
  subComplexCode: () => Promise<AsyncIterator<String>>;
  subComplexName: () => Promise<AsyncIterator<String>>;
  roofCode: () => Promise<AsyncIterator<String>>;
  workType: () => Promise<AsyncIterator<String>>;
  statusReasonDescription: () => Promise<AsyncIterator<String>>;
  readyDateNew: () => Promise<AsyncIterator<String>>;
  roofPartner: () => Promise<AsyncIterator<String>>;
  roofPartnerName: () => Promise<AsyncIterator<String>>;
  roofWarranty: () => Promise<AsyncIterator<Boolean>>;
  roofIsAGutter: () => Promise<AsyncIterator<Boolean>>;
  amountOfMeasures: () => Promise<AsyncIterator<Int>>;
  roofingPartDescription: () => Promise<AsyncIterator<String>>;
  cause: () => Promise<AsyncIterator<String>>;
  measureDescription: () => Promise<AsyncIterator<String>>;
  consequentialDamageIndoor: () => Promise<AsyncIterator<String>>;
  roofTypeCode: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<Int>>;
  roofingPartCategories: () => Promise<AsyncIterator<String>>;
  roofingPartCodes: () => Promise<AsyncIterator<String>>;
  contractCode: () => Promise<AsyncIterator<String>>;
  invoiceType: () => Promise<AsyncIterator<String>>;
  billingAddress: () => Promise<AsyncIterator<String>>;
  roofNumber: () => Promise<AsyncIterator<String>>;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceOrderCommentSubscriptionPayload {
  mutation: MutationType;
  node: ServiceOrderComment;
  updatedFields: String[];
  previousValues: ServiceOrderCommentPreviousValues;
}

export interface ServiceOrderCommentSubscriptionPayloadPromise
  extends Promise<ServiceOrderCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceOrderCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceOrderCommentPreviousValuesPromise>() => T;
}

export interface ServiceOrderCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceOrderCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceOrderCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceOrderCommentPreviousValuesSubscription>() => T;
}

export interface ServiceOrderCommentPreviousValues {
  id: ID_Output;
  orderCommentType?: ServiceOrderCommentType;
  text?: String;
  authorCode?: String;
  date?: String;
}

export interface ServiceOrderCommentPreviousValuesPromise
  extends Promise<ServiceOrderCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderCommentType: () => Promise<ServiceOrderCommentType>;
  text: () => Promise<String>;
  authorCode: () => Promise<String>;
  date: () => Promise<String>;
}

export interface ServiceOrderCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceOrderCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderCommentType: () => Promise<AsyncIterator<ServiceOrderCommentType>>;
  text: () => Promise<AsyncIterator<String>>;
  authorCode: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface ServiceOrderUpdateNotificationSubscriptionPayload {
  mutation: MutationType;
  node: ServiceOrderUpdateNotification;
  updatedFields: String[];
  previousValues: ServiceOrderUpdateNotificationPreviousValues;
}

export interface ServiceOrderUpdateNotificationSubscriptionPayloadPromise
  extends Promise<ServiceOrderUpdateNotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceOrderUpdateNotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <
    T = ServiceOrderUpdateNotificationPreviousValuesPromise
  >() => T;
}

export interface ServiceOrderUpdateNotificationSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<ServiceOrderUpdateNotificationSubscriptionPayload>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceOrderUpdateNotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ServiceOrderUpdateNotificationPreviousValuesSubscription
  >() => T;
}

export interface ServiceOrderUpdateNotificationPreviousValues {
  id: ID_Output;
  orderOwnerEmail?: String;
  orderOwnerPhone?: String;
  linkToken?: String;
  smsText?: String;
  stage: String;
  emailHtmlBody?: String;
  emailSubject?: String;
  companyEmail?: String;
  smsDeliveryStatus: Boolean;
  emailDeliveryStatus: Boolean;
  linkExpirationDate?: DateTimeOutput;
  serviceOrderId: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceOrderUpdateNotificationPreviousValuesPromise
  extends Promise<ServiceOrderUpdateNotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderOwnerEmail: () => Promise<String>;
  orderOwnerPhone: () => Promise<String>;
  linkToken: () => Promise<String>;
  smsText: () => Promise<String>;
  stage: () => Promise<String>;
  emailHtmlBody: () => Promise<String>;
  emailSubject: () => Promise<String>;
  companyEmail: () => Promise<String>;
  smsDeliveryStatus: () => Promise<Boolean>;
  emailDeliveryStatus: () => Promise<Boolean>;
  linkExpirationDate: () => Promise<DateTimeOutput>;
  serviceOrderId: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceOrderUpdateNotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceOrderUpdateNotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderOwnerEmail: () => Promise<AsyncIterator<String>>;
  orderOwnerPhone: () => Promise<AsyncIterator<String>>;
  linkToken: () => Promise<AsyncIterator<String>>;
  smsText: () => Promise<AsyncIterator<String>>;
  stage: () => Promise<AsyncIterator<String>>;
  emailHtmlBody: () => Promise<AsyncIterator<String>>;
  emailSubject: () => Promise<AsyncIterator<String>>;
  companyEmail: () => Promise<AsyncIterator<String>>;
  smsDeliveryStatus: () => Promise<AsyncIterator<Boolean>>;
  emailDeliveryStatus: () => Promise<AsyncIterator<Boolean>>;
  linkExpirationDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  serviceOrderId: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceStatusSubscriptionPayload {
  mutation: MutationType;
  node: ServiceStatus;
  updatedFields: String[];
  previousValues: ServiceStatusPreviousValues;
}

export interface ServiceStatusSubscriptionPayloadPromise
  extends Promise<ServiceStatusSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceStatusPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceStatusPreviousValuesPromise>() => T;
}

export interface ServiceStatusSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceStatusSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceStatusSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceStatusPreviousValuesSubscription>() => T;
}

export interface ServiceStatusPreviousValues {
  id: ID_Output;
  code: String;
  type?: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceStatusPreviousValuesPromise
  extends Promise<ServiceStatusPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceStatusPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceStatusPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceTextSubscriptionPayload {
  mutation: MutationType;
  node: ServiceText;
  updatedFields: String[];
  previousValues: ServiceTextPreviousValues;
}

export interface ServiceTextSubscriptionPayloadPromise
  extends Promise<ServiceTextSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceTextPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceTextPreviousValuesPromise>() => T;
}

export interface ServiceTextSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceTextSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceTextSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceTextPreviousValuesSubscription>() => T;
}

export interface ServiceTextPreviousValues {
  id: ID_Output;
  code: String;
  tableName?: String;
  type?: String;
  lineNumber?: Int;
  date?: String;
  comment?: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ServiceTextPreviousValuesPromise
  extends Promise<ServiceTextPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  tableName: () => Promise<String>;
  type: () => Promise<String>;
  lineNumber: () => Promise<Int>;
  date: () => Promise<String>;
  comment: () => Promise<String>;
  createdBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ServiceTextPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceTextPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  tableName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  lineNumber: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkOrderSubscriptionPayload {
  mutation: MutationType;
  node: WorkOrder;
  updatedFields: String[];
  previousValues: WorkOrderPreviousValues;
}

export interface WorkOrderSubscriptionPayloadPromise
  extends Promise<WorkOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkOrderPreviousValuesPromise>() => T;
}

export interface WorkOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkOrderPreviousValuesSubscription>() => T;
}

export interface WorkOrderPreviousValues {
  id: ID_Output;
  code: String;
  status?: String;
  sourceCompanyName?: String;
  sourceType?: String;
  sourceCode?: String;
  description?: String;
  resourceType?: String;
  resourceCode?: String;
  resourceCompanyName?: String;
  isMainResource?: Boolean;
  serviceStatus?: String;
  statusReasonDescription?: String;
  isFinishedService?: Boolean;
  firstPossibleStartDate?: String;
  lastPossibleStartDate?: String;
  starDate?: String;
  endDate?: String;
  expectedHours?: Float;
  durationTime?: Float;
  isDuringClockTime?: Boolean;
  isFirmPlanned?: Boolean;
  isExportToFSA?: Boolean;
  exportToFSADate?: String;
  actualReferencePoint?: String;
  assignedTo?: String;
  globalDimensionCode?: String;
  serviceContractCode?: String;
  orderManager?: String;
  address?: String;
  postalCode?: String;
  city?: String;
  customerCode?: String;
  jobDescription?: String;
  soCode?: String;
  soCallerCode?: String;
  soOrderType?: String;
  soDescription?: String;
  soContactCode?: String;
  soContactPersonCode?: String;
  soCustomerFeature?: String;
  soBillingCode?: String;
  soReference?: String;
  soCommissionDate?: String;
  soServiceLocationCode?: String;
  soOrderCodeCustomer?: String;
  soName?: String;
  soName2?: String;
  soSourceType?: String;
  soServiceContractCode?: String;
  soGlobalDimensionCode?: String;
  soTerritoryCode?: String;
  soOrderDate?: String;
  soOrderTime?: String;
  soBudgetHours?: Float;
  soExpectedHours?: Float;
  soDurationTime?: Float;
  soIsFirmPlanned?: Boolean;
  soStarDate?: String;
  soStarTime?: String;
  soEndDate?: String;
  soEndTime?: String;
  soPriority?: PriorityType;
  soNextDeadline?: String;
  soStatus?: String;
  soActualReferencePoint?: String;
  soOrderManager?: String;
  soAssignedTo?: String;
  soEmployeeCode?: String;
  roofingPartnerName?: String;
  detectorType?: String;
  notInDakota?: String;
  soServiceType?: String;
  soInvoicedPrice?: Float;
  soServicePackage?: String;
  soOrderAmount?: Int;
  soServiceControlPeriodDate?: String;
  soIsRemoteControl?: Boolean;
  soCountryCode?: String;
  soProblemDescription?: String;
  soProblemCause?: String;
  soProblemSolution?: String;
  firstDeadline?: String;
  gdbServiceOrderStartDate?: String;
  dateExecuted?: String;
  gdbServiceOrderInvoicedDate?: String;
  isExportToFSA2?: Boolean;
  soExportToFSADate?: String;
  hasSignature?: Boolean;
  planAhead?: String;
  startTime?: String;
  endTime?: String;
  orderIsSent?: Boolean;
  isLocked: Boolean;
  lockedBy?: String;
  isExportBlocked: Boolean;
  updatedByUserId?: String;
  isBlocked: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface WorkOrderPreviousValuesPromise
  extends Promise<WorkOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  status: () => Promise<String>;
  sourceCompanyName: () => Promise<String>;
  sourceType: () => Promise<String>;
  sourceCode: () => Promise<String>;
  description: () => Promise<String>;
  resourceType: () => Promise<String>;
  resourceCode: () => Promise<String>;
  resourceCompanyName: () => Promise<String>;
  isMainResource: () => Promise<Boolean>;
  serviceStatus: () => Promise<String>;
  statusReasonDescription: () => Promise<String>;
  isFinishedService: () => Promise<Boolean>;
  firstPossibleStartDate: () => Promise<String>;
  lastPossibleStartDate: () => Promise<String>;
  starDate: () => Promise<String>;
  endDate: () => Promise<String>;
  expectedHours: () => Promise<Float>;
  durationTime: () => Promise<Float>;
  isDuringClockTime: () => Promise<Boolean>;
  isFirmPlanned: () => Promise<Boolean>;
  isExportToFSA: () => Promise<Boolean>;
  exportToFSADate: () => Promise<String>;
  actualReferencePoint: () => Promise<String>;
  assignedTo: () => Promise<String>;
  globalDimensionCode: () => Promise<String>;
  serviceContractCode: () => Promise<String>;
  orderManager: () => Promise<String>;
  address: () => Promise<String>;
  postalCode: () => Promise<String>;
  city: () => Promise<String>;
  customerCode: () => Promise<String>;
  jobDescription: () => Promise<String>;
  soCode: () => Promise<String>;
  soCallerCode: () => Promise<String>;
  soOrderType: () => Promise<String>;
  soDescription: () => Promise<String>;
  soContactCode: () => Promise<String>;
  soContactPersonCode: () => Promise<String>;
  soCustomerFeature: () => Promise<String>;
  soBillingCode: () => Promise<String>;
  soReference: () => Promise<String>;
  soCommissionDate: () => Promise<String>;
  soServiceLocationCode: () => Promise<String>;
  soOrderCodeCustomer: () => Promise<String>;
  soName: () => Promise<String>;
  soName2: () => Promise<String>;
  soSourceType: () => Promise<String>;
  soServiceContractCode: () => Promise<String>;
  soGlobalDimensionCode: () => Promise<String>;
  soTerritoryCode: () => Promise<String>;
  soOrderDate: () => Promise<String>;
  soOrderTime: () => Promise<String>;
  soBudgetHours: () => Promise<Float>;
  soExpectedHours: () => Promise<Float>;
  soDurationTime: () => Promise<Float>;
  soIsFirmPlanned: () => Promise<Boolean>;
  soStarDate: () => Promise<String>;
  soStarTime: () => Promise<String>;
  soEndDate: () => Promise<String>;
  soEndTime: () => Promise<String>;
  soPriority: () => Promise<PriorityType>;
  soNextDeadline: () => Promise<String>;
  soStatus: () => Promise<String>;
  soActualReferencePoint: () => Promise<String>;
  soOrderManager: () => Promise<String>;
  soAssignedTo: () => Promise<String>;
  soEmployeeCode: () => Promise<String>;
  roofingPartnerName: () => Promise<String>;
  detectorType: () => Promise<String>;
  notInDakota: () => Promise<String>;
  soServiceType: () => Promise<String>;
  soInvoicedPrice: () => Promise<Float>;
  soServicePackage: () => Promise<String>;
  soOrderAmount: () => Promise<Int>;
  soServiceControlPeriodDate: () => Promise<String>;
  soIsRemoteControl: () => Promise<Boolean>;
  soCountryCode: () => Promise<String>;
  soProblemDescription: () => Promise<String>;
  soProblemCause: () => Promise<String>;
  soProblemSolution: () => Promise<String>;
  firstDeadline: () => Promise<String>;
  gdbServiceOrderStartDate: () => Promise<String>;
  dateExecuted: () => Promise<String>;
  gdbServiceOrderInvoicedDate: () => Promise<String>;
  isExportToFSA2: () => Promise<Boolean>;
  soExportToFSADate: () => Promise<String>;
  hasSignature: () => Promise<Boolean>;
  planAhead: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  orderIsSent: () => Promise<Boolean>;
  isLocked: () => Promise<Boolean>;
  lockedBy: () => Promise<String>;
  isExportBlocked: () => Promise<Boolean>;
  updatedByUserId: () => Promise<String>;
  isBlocked: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WorkOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  sourceCompanyName: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<String>>;
  sourceCode: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  resourceType: () => Promise<AsyncIterator<String>>;
  resourceCode: () => Promise<AsyncIterator<String>>;
  resourceCompanyName: () => Promise<AsyncIterator<String>>;
  isMainResource: () => Promise<AsyncIterator<Boolean>>;
  serviceStatus: () => Promise<AsyncIterator<String>>;
  statusReasonDescription: () => Promise<AsyncIterator<String>>;
  isFinishedService: () => Promise<AsyncIterator<Boolean>>;
  firstPossibleStartDate: () => Promise<AsyncIterator<String>>;
  lastPossibleStartDate: () => Promise<AsyncIterator<String>>;
  starDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  expectedHours: () => Promise<AsyncIterator<Float>>;
  durationTime: () => Promise<AsyncIterator<Float>>;
  isDuringClockTime: () => Promise<AsyncIterator<Boolean>>;
  isFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  isExportToFSA: () => Promise<AsyncIterator<Boolean>>;
  exportToFSADate: () => Promise<AsyncIterator<String>>;
  actualReferencePoint: () => Promise<AsyncIterator<String>>;
  assignedTo: () => Promise<AsyncIterator<String>>;
  globalDimensionCode: () => Promise<AsyncIterator<String>>;
  serviceContractCode: () => Promise<AsyncIterator<String>>;
  orderManager: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  customerCode: () => Promise<AsyncIterator<String>>;
  jobDescription: () => Promise<AsyncIterator<String>>;
  soCode: () => Promise<AsyncIterator<String>>;
  soCallerCode: () => Promise<AsyncIterator<String>>;
  soOrderType: () => Promise<AsyncIterator<String>>;
  soDescription: () => Promise<AsyncIterator<String>>;
  soContactCode: () => Promise<AsyncIterator<String>>;
  soContactPersonCode: () => Promise<AsyncIterator<String>>;
  soCustomerFeature: () => Promise<AsyncIterator<String>>;
  soBillingCode: () => Promise<AsyncIterator<String>>;
  soReference: () => Promise<AsyncIterator<String>>;
  soCommissionDate: () => Promise<AsyncIterator<String>>;
  soServiceLocationCode: () => Promise<AsyncIterator<String>>;
  soOrderCodeCustomer: () => Promise<AsyncIterator<String>>;
  soName: () => Promise<AsyncIterator<String>>;
  soName2: () => Promise<AsyncIterator<String>>;
  soSourceType: () => Promise<AsyncIterator<String>>;
  soServiceContractCode: () => Promise<AsyncIterator<String>>;
  soGlobalDimensionCode: () => Promise<AsyncIterator<String>>;
  soTerritoryCode: () => Promise<AsyncIterator<String>>;
  soOrderDate: () => Promise<AsyncIterator<String>>;
  soOrderTime: () => Promise<AsyncIterator<String>>;
  soBudgetHours: () => Promise<AsyncIterator<Float>>;
  soExpectedHours: () => Promise<AsyncIterator<Float>>;
  soDurationTime: () => Promise<AsyncIterator<Float>>;
  soIsFirmPlanned: () => Promise<AsyncIterator<Boolean>>;
  soStarDate: () => Promise<AsyncIterator<String>>;
  soStarTime: () => Promise<AsyncIterator<String>>;
  soEndDate: () => Promise<AsyncIterator<String>>;
  soEndTime: () => Promise<AsyncIterator<String>>;
  soPriority: () => Promise<AsyncIterator<PriorityType>>;
  soNextDeadline: () => Promise<AsyncIterator<String>>;
  soStatus: () => Promise<AsyncIterator<String>>;
  soActualReferencePoint: () => Promise<AsyncIterator<String>>;
  soOrderManager: () => Promise<AsyncIterator<String>>;
  soAssignedTo: () => Promise<AsyncIterator<String>>;
  soEmployeeCode: () => Promise<AsyncIterator<String>>;
  roofingPartnerName: () => Promise<AsyncIterator<String>>;
  detectorType: () => Promise<AsyncIterator<String>>;
  notInDakota: () => Promise<AsyncIterator<String>>;
  soServiceType: () => Promise<AsyncIterator<String>>;
  soInvoicedPrice: () => Promise<AsyncIterator<Float>>;
  soServicePackage: () => Promise<AsyncIterator<String>>;
  soOrderAmount: () => Promise<AsyncIterator<Int>>;
  soServiceControlPeriodDate: () => Promise<AsyncIterator<String>>;
  soIsRemoteControl: () => Promise<AsyncIterator<Boolean>>;
  soCountryCode: () => Promise<AsyncIterator<String>>;
  soProblemDescription: () => Promise<AsyncIterator<String>>;
  soProblemCause: () => Promise<AsyncIterator<String>>;
  soProblemSolution: () => Promise<AsyncIterator<String>>;
  firstDeadline: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderStartDate: () => Promise<AsyncIterator<String>>;
  dateExecuted: () => Promise<AsyncIterator<String>>;
  gdbServiceOrderInvoicedDate: () => Promise<AsyncIterator<String>>;
  isExportToFSA2: () => Promise<AsyncIterator<Boolean>>;
  soExportToFSADate: () => Promise<AsyncIterator<String>>;
  hasSignature: () => Promise<AsyncIterator<Boolean>>;
  planAhead: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  orderIsSent: () => Promise<AsyncIterator<Boolean>>;
  isLocked: () => Promise<AsyncIterator<Boolean>>;
  lockedBy: () => Promise<AsyncIterator<String>>;
  isExportBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedByUserId: () => Promise<AsyncIterator<String>>;
  isBlocked: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "StripSize",
    embedded: false
  },
  {
    name: "ProjectType",
    embedded: false
  },
  {
    name: "ReporterType",
    embedded: false
  },
  {
    name: "PriorityType",
    embedded: false
  },
  {
    name: "ContractStatus",
    embedded: false
  },
  {
    name: "AppointmentStatus",
    embedded: false
  },
  {
    name: "ContractInvoiceType",
    embedded: false
  },
  {
    name: "ContractIndexMethod",
    embedded: false
  },
  {
    name: "ContractInstallmentType",
    embedded: false
  },
  {
    name: "ContractInvoicePeriod",
    embedded: false
  },
  {
    name: "ServiceOrderCommentType",
    embedded: false
  },
  {
    name: "MomentEntityType",
    embedded: false
  },
  {
    name: "EventType",
    embedded: false
  },
  {
    name: "ServiceOrder",
    embedded: false
  },
  {
    name: "WorkOrder",
    embedded: false
  },
  {
    name: "ServiceText",
    embedded: false
  },
  {
    name: "ServiceStatus",
    embedded: false
  },
  {
    name: "ActivityLog",
    embedded: false
  },
  {
    name: "ActivityLogHistory",
    embedded: false
  },
  {
    name: "KimInformation",
    embedded: false
  },
  {
    name: "ReportIsNecessary",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "ServiceOrderUpdateNotification",
    embedded: false
  },
  {
    name: "CustomerFeedback",
    embedded: false
  },
  {
    name: "Faq",
    embedded: false
  },
  {
    name: "Reporter",
    embedded: false
  },
  {
    name: "ServiceAppointment",
    embedded: false
  },
  {
    name: "ServiceContract",
    embedded: false
  },
  {
    name: "ServiceContractTerm",
    embedded: false
  },
  {
    name: "ServiceContractIndex",
    embedded: false
  },
  {
    name: "ServiceContractEstimation",
    embedded: false
  },
  {
    name: "ServiceOrderComment",
    embedded: false
  },
  {
    name: "Moment",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Action",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
